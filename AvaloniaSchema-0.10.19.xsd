<?xml version="1.0" encoding="utf-8"?>
<xs:schema id="Schema.Avalonia" frameworkVersion="0.10.19" generator="AvantGarde" targetNamespace="https://github.com/avaloniaui" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:noNamespaceSchemaLocation="https://www.w3.org/2001/XMLSchema.xsd" elementFormDefault="qualified">
  <xs:simpleType name="text">
    <xs:restriction base="xs:string" />
  </xs:simpleType>
  <xs:complexType name="AnimatableType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Clock" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IClock Animatable.Clock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Transitions" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Transitions Animatable.Transitions</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="Animatable" mixed="true" type="AnimatableType">
    <xs:annotation>
      <xs:documentation>Class: Animatable

Namespace: Avalonia.Animation

Base: AvaloniaObject

Properties: Clock, Item, Transitions

Events: PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="AnimationType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Duration" type="text">
            <xs:annotation>
              <xs:documentation>Property:

TimeSpan Animation.Duration</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IterationCount" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IterationCount Animation.IterationCount</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PlaybackDirection" type="text">
            <xs:annotation>
              <xs:documentation>Property:

PlaybackDirection Animation.PlaybackDirection

enum PlaybackDirection = {Normal, Reverse, Alternate, AlternateReverse}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FillMode" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FillMode Animation.FillMode

enum FillMode = {None, Forward, Backward, Both}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Easing" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Easing Animation.Easing</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Delay" type="text">
            <xs:annotation>
              <xs:documentation>Property:

TimeSpan Animation.Delay</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DelayBetweenIterations" type="text">
            <xs:annotation>
              <xs:documentation>Property:

TimeSpan Animation.DelayBetweenIterations</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SpeedRatio" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Animation.SpeedRatio</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RepeatCount" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string Animation.RepeatCount</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="Animation" mixed="true" type="AnimationType">
    <xs:annotation>
      <xs:documentation>Class: Animation

Namespace: Avalonia.Animation

Base: AvaloniaObject

Properties: Delay, DelayBetweenIterations, Duration, Easing, FillMode, Item, IterationCount, PlaybackDirection, RepeatCount, SpeedRatio

Events: PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="AnimatorKeyFrameType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Value" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AnimatorKeyFrame.Value</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="AnimatorKeyFrame" mixed="true" type="AnimatorKeyFrameType">
    <xs:annotation>
      <xs:documentation>Class: AnimatorKeyFrame

Namespace: Avalonia.Animation

Base: AvaloniaObject

Properties: Item, Value

Events: PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ClockType" mixed="true">
    <xs:complexContent>
      <xs:extension base="ClockBaseType">
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="Clock" mixed="true" type="ClockType">
    <xs:annotation>
      <xs:documentation>Class: Clock

Namespace: Avalonia.Animation

Base: ClockBase

Properties: PlayState

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ClockBaseType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="PlayState" type="text">
            <xs:annotation>
              <xs:documentation>Property:

PlayState ClockBase.PlayState

enum PlayState = {Run, Pause, Stop}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ClockBase" mixed="true" type="ClockBaseType">
    <xs:annotation>
      <xs:documentation>Class: ClockBase

Namespace: Avalonia.Animation

Base: 

Properties: PlayState

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="CueTypeConverterType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="CueTypeConverter" mixed="true" type="CueTypeConverterType">
    <xs:annotation>
      <xs:documentation>Class: CueTypeConverter

Namespace: Avalonia.Animation

Base: TypeConverter

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="IterationCountTypeConverterType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="IterationCountTypeConverter" mixed="true" type="IterationCountTypeConverterType">
    <xs:annotation>
      <xs:documentation>Class: IterationCountTypeConverter

Namespace: Avalonia.Animation

Base: TypeConverter

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="KeyFrameType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="KeyTime" type="text">
            <xs:annotation>
              <xs:documentation>Property:

TimeSpan KeyFrame.KeyTime</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Cue" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Cue KeyFrame.Cue</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="KeySpline" type="text">
            <xs:annotation>
              <xs:documentation>Property:

KeySpline KeyFrame.KeySpline</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="KeyFrame" mixed="true" type="KeyFrameType">
    <xs:annotation>
      <xs:documentation>Class: KeyFrame

Namespace: Avalonia.Animation

Base: AvaloniaObject

Properties: Cue, Item, KeySpline, KeyTime

Events: PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="KeyFramesType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="ResetBehavior" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ResetBehavior AvaloniaList&amp;lt;KeyFrame&amp;gt;.ResetBehavior

enum ResetBehavior = {Reset, Remove}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Validate" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Action&amp;lt;KeyFrame&amp;gt; AvaloniaList&amp;lt;KeyFrame&amp;gt;.Validate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

KeyFrame AvaloniaList&amp;lt;KeyFrame&amp;gt;.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Capacity" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int AvaloniaList&amp;lt;KeyFrame&amp;gt;.Capacity</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CollectionChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

NotifyCollectionChangedEventHandler AvaloniaList&amp;lt;KeyFrame&amp;gt;.CollectionChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

PropertyChangedEventHandler AvaloniaList&amp;lt;KeyFrame&amp;gt;.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="KeyFrames" mixed="true" type="KeyFramesType">
    <xs:annotation>
      <xs:documentation>Class: KeyFrames

Namespace: Avalonia.Animation

Base: AvaloniaList`1

Properties: Capacity, Item, ResetBehavior, Validate

Events: CollectionChanged, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="KeySplineType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ControlPointX1" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double KeySpline.ControlPointX1</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ControlPointY1" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double KeySpline.ControlPointY1</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ControlPointX2" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double KeySpline.ControlPointX2</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ControlPointY2" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double KeySpline.ControlPointY2</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="KeySpline" mixed="true" type="KeySplineType">
    <xs:annotation>
      <xs:documentation>Class: KeySpline

Namespace: Avalonia.Animation

Base: AvaloniaObject

Properties: ControlPointX1, ControlPointX2, ControlPointY1, ControlPointY2, Item

Events: PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="KeySplineTypeConverterType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="KeySplineTypeConverter" mixed="true" type="KeySplineTypeConverterType">
    <xs:annotation>
      <xs:documentation>Class: KeySplineTypeConverter

Namespace: Avalonia.Animation

Base: TypeConverter

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="TransitionsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="ResetBehavior" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ResetBehavior AvaloniaList&amp;lt;ITransition&amp;gt;.ResetBehavior

enum ResetBehavior = {Reset, Remove}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Validate" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Action&amp;lt;ITransition&amp;gt; AvaloniaList&amp;lt;ITransition&amp;gt;.Validate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ITransition AvaloniaList&amp;lt;ITransition&amp;gt;.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Capacity" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int AvaloniaList&amp;lt;ITransition&amp;gt;.Capacity</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CollectionChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

NotifyCollectionChangedEventHandler AvaloniaList&amp;lt;ITransition&amp;gt;.CollectionChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

PropertyChangedEventHandler AvaloniaList&amp;lt;ITransition&amp;gt;.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="Transitions" mixed="true" type="TransitionsType">
    <xs:annotation>
      <xs:documentation>Class: Transitions

Namespace: Avalonia.Animation

Base: AvaloniaList`1

Properties: Capacity, Item, ResetBehavior, Validate

Events: CollectionChanged, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="DoubleTransitionType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Duration" type="text">
            <xs:annotation>
              <xs:documentation>Property:

TimeSpan Transition&amp;lt;double&amp;gt;.Duration</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Delay" type="text">
            <xs:annotation>
              <xs:documentation>Property:

TimeSpan Transition&amp;lt;double&amp;gt;.Delay</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Easing" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Easing Transition&amp;lt;double&amp;gt;.Easing</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Property" type="text">
            <xs:annotation>
              <xs:documentation>Property:

AvaloniaProperty Transition&amp;lt;double&amp;gt;.Property</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="DoubleTransition" mixed="true" type="DoubleTransitionType">
    <xs:annotation>
      <xs:documentation>Class: DoubleTransition

Namespace: Avalonia.Animation

Base: AnimatorDrivenTransition`2, Transition`1, AvaloniaObject

Properties: Delay, Duration, Easing, Item, Property

Events: PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="FloatTransitionType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Duration" type="text">
            <xs:annotation>
              <xs:documentation>Property:

TimeSpan Transition&amp;lt;float&amp;gt;.Duration</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Delay" type="text">
            <xs:annotation>
              <xs:documentation>Property:

TimeSpan Transition&amp;lt;float&amp;gt;.Delay</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Easing" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Easing Transition&amp;lt;float&amp;gt;.Easing</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Property" type="text">
            <xs:annotation>
              <xs:documentation>Property:

AvaloniaProperty Transition&amp;lt;float&amp;gt;.Property</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="FloatTransition" mixed="true" type="FloatTransitionType">
    <xs:annotation>
      <xs:documentation>Class: FloatTransition

Namespace: Avalonia.Animation

Base: AnimatorDrivenTransition`2, Transition`1, AvaloniaObject

Properties: Delay, Duration, Easing, Item, Property

Events: PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="IntegerTransitionType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Duration" type="text">
            <xs:annotation>
              <xs:documentation>Property:

TimeSpan Transition&amp;lt;int&amp;gt;.Duration</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Delay" type="text">
            <xs:annotation>
              <xs:documentation>Property:

TimeSpan Transition&amp;lt;int&amp;gt;.Delay</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Easing" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Easing Transition&amp;lt;int&amp;gt;.Easing</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Property" type="text">
            <xs:annotation>
              <xs:documentation>Property:

AvaloniaProperty Transition&amp;lt;int&amp;gt;.Property</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="IntegerTransition" mixed="true" type="IntegerTransitionType">
    <xs:annotation>
      <xs:documentation>Class: IntegerTransition

Namespace: Avalonia.Animation

Base: AnimatorDrivenTransition`2, Transition`1, AvaloniaObject

Properties: Delay, Duration, Easing, Item, Property

Events: PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="BackEaseInType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="BackEaseIn" mixed="true" type="BackEaseInType">
    <xs:annotation>
      <xs:documentation>Class: BackEaseIn

Namespace: Avalonia.Animation.Easings

Base: Easing

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="BackEaseInOutType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="BackEaseInOut" mixed="true" type="BackEaseInOutType">
    <xs:annotation>
      <xs:documentation>Class: BackEaseInOut

Namespace: Avalonia.Animation.Easings

Base: Easing

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="BackEaseOutType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="BackEaseOut" mixed="true" type="BackEaseOutType">
    <xs:annotation>
      <xs:documentation>Class: BackEaseOut

Namespace: Avalonia.Animation.Easings

Base: Easing

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="BounceEaseInType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="BounceEaseIn" mixed="true" type="BounceEaseInType">
    <xs:annotation>
      <xs:documentation>Class: BounceEaseIn

Namespace: Avalonia.Animation.Easings

Base: Easing

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="BounceEaseInOutType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="BounceEaseInOut" mixed="true" type="BounceEaseInOutType">
    <xs:annotation>
      <xs:documentation>Class: BounceEaseInOut

Namespace: Avalonia.Animation.Easings

Base: Easing

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="BounceEaseOutType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="BounceEaseOut" mixed="true" type="BounceEaseOutType">
    <xs:annotation>
      <xs:documentation>Class: BounceEaseOut

Namespace: Avalonia.Animation.Easings

Base: Easing

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="CircularEaseInType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="CircularEaseIn" mixed="true" type="CircularEaseInType">
    <xs:annotation>
      <xs:documentation>Class: CircularEaseIn

Namespace: Avalonia.Animation.Easings

Base: Easing

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="CircularEaseInOutType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="CircularEaseInOut" mixed="true" type="CircularEaseInOutType">
    <xs:annotation>
      <xs:documentation>Class: CircularEaseInOut

Namespace: Avalonia.Animation.Easings

Base: Easing

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="CircularEaseOutType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="CircularEaseOut" mixed="true" type="CircularEaseOutType">
    <xs:annotation>
      <xs:documentation>Class: CircularEaseOut

Namespace: Avalonia.Animation.Easings

Base: Easing

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="CubicEaseInType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="CubicEaseIn" mixed="true" type="CubicEaseInType">
    <xs:annotation>
      <xs:documentation>Class: CubicEaseIn

Namespace: Avalonia.Animation.Easings

Base: Easing

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="CubicEaseInOutType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="CubicEaseInOut" mixed="true" type="CubicEaseInOutType">
    <xs:annotation>
      <xs:documentation>Class: CubicEaseInOut

Namespace: Avalonia.Animation.Easings

Base: Easing

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="CubicEaseOutType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="CubicEaseOut" mixed="true" type="CubicEaseOutType">
    <xs:annotation>
      <xs:documentation>Class: CubicEaseOut

Namespace: Avalonia.Animation.Easings

Base: Easing

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="EasingTypeConverterType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="EasingTypeConverter" mixed="true" type="EasingTypeConverterType">
    <xs:annotation>
      <xs:documentation>Class: EasingTypeConverter

Namespace: Avalonia.Animation.Easings

Base: TypeConverter

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ElasticEaseInType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ElasticEaseIn" mixed="true" type="ElasticEaseInType">
    <xs:annotation>
      <xs:documentation>Class: ElasticEaseIn

Namespace: Avalonia.Animation.Easings

Base: Easing

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ElasticEaseInOutType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ElasticEaseInOut" mixed="true" type="ElasticEaseInOutType">
    <xs:annotation>
      <xs:documentation>Class: ElasticEaseInOut

Namespace: Avalonia.Animation.Easings

Base: Easing

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ElasticEaseOutType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ElasticEaseOut" mixed="true" type="ElasticEaseOutType">
    <xs:annotation>
      <xs:documentation>Class: ElasticEaseOut

Namespace: Avalonia.Animation.Easings

Base: Easing

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ExponentialEaseInType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ExponentialEaseIn" mixed="true" type="ExponentialEaseInType">
    <xs:annotation>
      <xs:documentation>Class: ExponentialEaseIn

Namespace: Avalonia.Animation.Easings

Base: Easing

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ExponentialEaseInOutType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ExponentialEaseInOut" mixed="true" type="ExponentialEaseInOutType">
    <xs:annotation>
      <xs:documentation>Class: ExponentialEaseInOut

Namespace: Avalonia.Animation.Easings

Base: Easing

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ExponentialEaseOutType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ExponentialEaseOut" mixed="true" type="ExponentialEaseOutType">
    <xs:annotation>
      <xs:documentation>Class: ExponentialEaseOut

Namespace: Avalonia.Animation.Easings

Base: Easing

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="LinearEasingType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="LinearEasing" mixed="true" type="LinearEasingType">
    <xs:annotation>
      <xs:documentation>Class: LinearEasing

Namespace: Avalonia.Animation.Easings

Base: Easing

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="QuadraticEaseInType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="QuadraticEaseIn" mixed="true" type="QuadraticEaseInType">
    <xs:annotation>
      <xs:documentation>Class: QuadraticEaseIn

Namespace: Avalonia.Animation.Easings

Base: Easing

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="QuadraticEaseInOutType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="QuadraticEaseInOut" mixed="true" type="QuadraticEaseInOutType">
    <xs:annotation>
      <xs:documentation>Class: QuadraticEaseInOut

Namespace: Avalonia.Animation.Easings

Base: Easing

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="QuadraticEaseOutType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="QuadraticEaseOut" mixed="true" type="QuadraticEaseOutType">
    <xs:annotation>
      <xs:documentation>Class: QuadraticEaseOut

Namespace: Avalonia.Animation.Easings

Base: Easing

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="QuarticEaseInType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="QuarticEaseIn" mixed="true" type="QuarticEaseInType">
    <xs:annotation>
      <xs:documentation>Class: QuarticEaseIn

Namespace: Avalonia.Animation.Easings

Base: Easing

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="QuarticEaseInOutType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="QuarticEaseInOut" mixed="true" type="QuarticEaseInOutType">
    <xs:annotation>
      <xs:documentation>Class: QuarticEaseInOut

Namespace: Avalonia.Animation.Easings

Base: Easing

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="QuarticEaseOutType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="QuarticEaseOut" mixed="true" type="QuarticEaseOutType">
    <xs:annotation>
      <xs:documentation>Class: QuarticEaseOut

Namespace: Avalonia.Animation.Easings

Base: Easing

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="QuinticEaseInType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="QuinticEaseIn" mixed="true" type="QuinticEaseInType">
    <xs:annotation>
      <xs:documentation>Class: QuinticEaseIn

Namespace: Avalonia.Animation.Easings

Base: Easing

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="QuinticEaseInOutType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="QuinticEaseInOut" mixed="true" type="QuinticEaseInOutType">
    <xs:annotation>
      <xs:documentation>Class: QuinticEaseInOut

Namespace: Avalonia.Animation.Easings

Base: Easing

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="QuinticEaseOutType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="QuinticEaseOut" mixed="true" type="QuinticEaseOutType">
    <xs:annotation>
      <xs:documentation>Class: QuinticEaseOut

Namespace: Avalonia.Animation.Easings

Base: Easing

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="SineEaseInType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="SineEaseIn" mixed="true" type="SineEaseInType">
    <xs:annotation>
      <xs:documentation>Class: SineEaseIn

Namespace: Avalonia.Animation.Easings

Base: Easing

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="SineEaseInOutType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="SineEaseInOut" mixed="true" type="SineEaseInOutType">
    <xs:annotation>
      <xs:documentation>Class: SineEaseInOut

Namespace: Avalonia.Animation.Easings

Base: Easing

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="SineEaseOutType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="SineEaseOut" mixed="true" type="SineEaseOutType">
    <xs:annotation>
      <xs:documentation>Class: SineEaseOut

Namespace: Avalonia.Animation.Easings

Base: Easing

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="SplineEasingType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="X1" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double SplineEasing.X1</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Y1" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double SplineEasing.Y1</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="X2" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double SplineEasing.X2</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Y2" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double SplineEasing.Y2</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="SplineEasing" mixed="true" type="SplineEasingType">
    <xs:annotation>
      <xs:documentation>Class: SplineEasing

Namespace: Avalonia.Animation.Easings

Base: Easing

Properties: X1, X2, Y1, Y2

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="BoolAnimatorType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Property" type="text">
            <xs:annotation>
              <xs:documentation>Property:

AvaloniaProperty Animator&amp;lt;bool&amp;gt;.Property</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ResetBehavior" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ResetBehavior AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.ResetBehavior

enum ResetBehavior = {Reset, Remove}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Validate" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Action&amp;lt;AnimatorKeyFrame&amp;gt; AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.Validate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

AnimatorKeyFrame AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Capacity" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.Capacity</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CollectionChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

NotifyCollectionChangedEventHandler AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.CollectionChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

PropertyChangedEventHandler AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="BoolAnimator" mixed="true" type="BoolAnimatorType">
    <xs:annotation>
      <xs:documentation>Class: BoolAnimator

Namespace: Avalonia.Animation.Animators

Base: Animator`1, AvaloniaList`1

Properties: Capacity, Item, Property, ResetBehavior, Validate

Events: CollectionChanged, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ByteAnimatorType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Property" type="text">
            <xs:annotation>
              <xs:documentation>Property:

AvaloniaProperty Animator&amp;lt;byte&amp;gt;.Property</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ResetBehavior" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ResetBehavior AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.ResetBehavior

enum ResetBehavior = {Reset, Remove}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Validate" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Action&amp;lt;AnimatorKeyFrame&amp;gt; AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.Validate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

AnimatorKeyFrame AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Capacity" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.Capacity</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CollectionChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

NotifyCollectionChangedEventHandler AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.CollectionChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

PropertyChangedEventHandler AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ByteAnimator" mixed="true" type="ByteAnimatorType">
    <xs:annotation>
      <xs:documentation>Class: ByteAnimator

Namespace: Avalonia.Animation.Animators

Base: Animator`1, AvaloniaList`1

Properties: Capacity, Item, Property, ResetBehavior, Validate

Events: CollectionChanged, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="DecimalAnimatorType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Property" type="text">
            <xs:annotation>
              <xs:documentation>Property:

AvaloniaProperty Animator&amp;lt;decimal&amp;gt;.Property</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ResetBehavior" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ResetBehavior AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.ResetBehavior

enum ResetBehavior = {Reset, Remove}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Validate" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Action&amp;lt;AnimatorKeyFrame&amp;gt; AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.Validate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

AnimatorKeyFrame AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Capacity" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.Capacity</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CollectionChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

NotifyCollectionChangedEventHandler AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.CollectionChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

PropertyChangedEventHandler AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="DecimalAnimator" mixed="true" type="DecimalAnimatorType">
    <xs:annotation>
      <xs:documentation>Class: DecimalAnimator

Namespace: Avalonia.Animation.Animators

Base: Animator`1, AvaloniaList`1

Properties: Capacity, Item, Property, ResetBehavior, Validate

Events: CollectionChanged, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="DoubleAnimatorType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Property" type="text">
            <xs:annotation>
              <xs:documentation>Property:

AvaloniaProperty Animator&amp;lt;double&amp;gt;.Property</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ResetBehavior" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ResetBehavior AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.ResetBehavior

enum ResetBehavior = {Reset, Remove}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Validate" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Action&amp;lt;AnimatorKeyFrame&amp;gt; AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.Validate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

AnimatorKeyFrame AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Capacity" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.Capacity</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CollectionChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

NotifyCollectionChangedEventHandler AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.CollectionChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

PropertyChangedEventHandler AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="DoubleAnimator" mixed="true" type="DoubleAnimatorType">
    <xs:annotation>
      <xs:documentation>Class: DoubleAnimator

Namespace: Avalonia.Animation.Animators

Base: Animator`1, AvaloniaList`1

Properties: Capacity, Item, Property, ResetBehavior, Validate

Events: CollectionChanged, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="FloatAnimatorType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Property" type="text">
            <xs:annotation>
              <xs:documentation>Property:

AvaloniaProperty Animator&amp;lt;float&amp;gt;.Property</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ResetBehavior" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ResetBehavior AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.ResetBehavior

enum ResetBehavior = {Reset, Remove}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Validate" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Action&amp;lt;AnimatorKeyFrame&amp;gt; AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.Validate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

AnimatorKeyFrame AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Capacity" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.Capacity</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CollectionChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

NotifyCollectionChangedEventHandler AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.CollectionChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

PropertyChangedEventHandler AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="FloatAnimator" mixed="true" type="FloatAnimatorType">
    <xs:annotation>
      <xs:documentation>Class: FloatAnimator

Namespace: Avalonia.Animation.Animators

Base: Animator`1, AvaloniaList`1

Properties: Capacity, Item, Property, ResetBehavior, Validate

Events: CollectionChanged, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="Int16AnimatorType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Property" type="text">
            <xs:annotation>
              <xs:documentation>Property:

AvaloniaProperty Animator&amp;lt;short&amp;gt;.Property</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ResetBehavior" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ResetBehavior AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.ResetBehavior

enum ResetBehavior = {Reset, Remove}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Validate" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Action&amp;lt;AnimatorKeyFrame&amp;gt; AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.Validate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

AnimatorKeyFrame AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Capacity" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.Capacity</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CollectionChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

NotifyCollectionChangedEventHandler AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.CollectionChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

PropertyChangedEventHandler AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="Int16Animator" mixed="true" type="Int16AnimatorType">
    <xs:annotation>
      <xs:documentation>Class: Int16Animator

Namespace: Avalonia.Animation.Animators

Base: Animator`1, AvaloniaList`1

Properties: Capacity, Item, Property, ResetBehavior, Validate

Events: CollectionChanged, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="Int32AnimatorType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Property" type="text">
            <xs:annotation>
              <xs:documentation>Property:

AvaloniaProperty Animator&amp;lt;int&amp;gt;.Property</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ResetBehavior" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ResetBehavior AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.ResetBehavior

enum ResetBehavior = {Reset, Remove}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Validate" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Action&amp;lt;AnimatorKeyFrame&amp;gt; AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.Validate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

AnimatorKeyFrame AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Capacity" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.Capacity</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CollectionChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

NotifyCollectionChangedEventHandler AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.CollectionChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

PropertyChangedEventHandler AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="Int32Animator" mixed="true" type="Int32AnimatorType">
    <xs:annotation>
      <xs:documentation>Class: Int32Animator

Namespace: Avalonia.Animation.Animators

Base: Animator`1, AvaloniaList`1

Properties: Capacity, Item, Property, ResetBehavior, Validate

Events: CollectionChanged, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="Int64AnimatorType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Property" type="text">
            <xs:annotation>
              <xs:documentation>Property:

AvaloniaProperty Animator&amp;lt;long&amp;gt;.Property</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ResetBehavior" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ResetBehavior AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.ResetBehavior

enum ResetBehavior = {Reset, Remove}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Validate" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Action&amp;lt;AnimatorKeyFrame&amp;gt; AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.Validate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

AnimatorKeyFrame AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Capacity" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.Capacity</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CollectionChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

NotifyCollectionChangedEventHandler AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.CollectionChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

PropertyChangedEventHandler AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="Int64Animator" mixed="true" type="Int64AnimatorType">
    <xs:annotation>
      <xs:documentation>Class: Int64Animator

Namespace: Avalonia.Animation.Animators

Base: Animator`1, AvaloniaList`1

Properties: Capacity, Item, Property, ResetBehavior, Validate

Events: CollectionChanged, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="UInt16AnimatorType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Property" type="text">
            <xs:annotation>
              <xs:documentation>Property:

AvaloniaProperty Animator&amp;lt;ushort&amp;gt;.Property</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ResetBehavior" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ResetBehavior AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.ResetBehavior

enum ResetBehavior = {Reset, Remove}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Validate" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Action&amp;lt;AnimatorKeyFrame&amp;gt; AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.Validate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

AnimatorKeyFrame AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Capacity" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.Capacity</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CollectionChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

NotifyCollectionChangedEventHandler AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.CollectionChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

PropertyChangedEventHandler AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="UInt16Animator" mixed="true" type="UInt16AnimatorType">
    <xs:annotation>
      <xs:documentation>Class: UInt16Animator

Namespace: Avalonia.Animation.Animators

Base: Animator`1, AvaloniaList`1

Properties: Capacity, Item, Property, ResetBehavior, Validate

Events: CollectionChanged, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="UInt32AnimatorType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Property" type="text">
            <xs:annotation>
              <xs:documentation>Property:

AvaloniaProperty Animator&amp;lt;uint&amp;gt;.Property</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ResetBehavior" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ResetBehavior AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.ResetBehavior

enum ResetBehavior = {Reset, Remove}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Validate" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Action&amp;lt;AnimatorKeyFrame&amp;gt; AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.Validate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

AnimatorKeyFrame AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Capacity" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.Capacity</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CollectionChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

NotifyCollectionChangedEventHandler AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.CollectionChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

PropertyChangedEventHandler AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="UInt32Animator" mixed="true" type="UInt32AnimatorType">
    <xs:annotation>
      <xs:documentation>Class: UInt32Animator

Namespace: Avalonia.Animation.Animators

Base: Animator`1, AvaloniaList`1

Properties: Capacity, Item, Property, ResetBehavior, Validate

Events: CollectionChanged, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="UInt64AnimatorType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Property" type="text">
            <xs:annotation>
              <xs:documentation>Property:

AvaloniaProperty Animator&amp;lt;ulong&amp;gt;.Property</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ResetBehavior" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ResetBehavior AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.ResetBehavior

enum ResetBehavior = {Reset, Remove}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Validate" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Action&amp;lt;AnimatorKeyFrame&amp;gt; AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.Validate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

AnimatorKeyFrame AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Capacity" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.Capacity</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CollectionChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

NotifyCollectionChangedEventHandler AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.CollectionChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

PropertyChangedEventHandler AvaloniaList&amp;lt;AnimatorKeyFrame&amp;gt;.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="UInt64Animator" mixed="true" type="UInt64AnimatorType">
    <xs:annotation>
      <xs:documentation>Class: UInt64Animator

Namespace: Avalonia.Animation.Animators

Base: Animator`1, AvaloniaList`1

Properties: Capacity, Item, Property, ResetBehavior, Validate

Events: CollectionChanged, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="DefaultValueConverterType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="DefaultValueConverter" mixed="true" type="DefaultValueConverterType">
    <xs:annotation>
      <xs:documentation>Class: DefaultValueConverter

Namespace: Avalonia.Data.Converters

Base: 

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="StringFormatMultiValueConverterType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="StringFormatMultiValueConverter" mixed="true" type="StringFormatMultiValueConverterType">
    <xs:annotation>
      <xs:documentation>Class: StringFormatMultiValueConverter

Namespace: Avalonia.Data.Converters

Base: 

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="StringFormatValueConverterType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="StringFormatValueConverter" mixed="true" type="StringFormatValueConverterType">
    <xs:annotation>
      <xs:documentation>Class: StringFormatValueConverter

Namespace: Avalonia.Data.Converters

Base: 

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="DataGridType" mixed="true">
    <xs:complexContent>
      <xs:extension base="TemplatedControlType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="CanUserReorderColumns" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool DataGrid.CanUserReorderColumns</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CanUserResizeColumns" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool DataGrid.CanUserResizeColumns</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CanUserSortColumns" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool DataGrid.CanUserSortColumns</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ColumnHeaderHeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double DataGrid.ColumnHeaderHeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ColumnWidth" type="text">
            <xs:annotation>
              <xs:documentation>Property:

DataGridLength DataGrid.ColumnWidth</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AlternatingRowBackground" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush DataGrid.AlternatingRowBackground</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FrozenColumnCount" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int DataGrid.FrozenColumnCount</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="GridLinesVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Property:

DataGridGridLinesVisibility DataGrid.GridLinesVisibility

enum DataGridGridLinesVisibility = {None, Horizontal, Vertical, All}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="HeadersVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Property:

DataGridHeadersVisibility DataGrid.HeadersVisibility

enum DataGridHeadersVisibility = {None, Column, Row, All}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="HorizontalGridLinesBrush" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush DataGrid.HorizontalGridLinesBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ScrollBarVisibility DataGrid.HorizontalScrollBarVisibility

enum ScrollBarVisibility = {Disabled, Auto, Hidden, Visible}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsReadOnly" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool DataGrid.IsReadOnly</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AreRowGroupHeadersFrozen" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool DataGrid.AreRowGroupHeadersFrozen</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MaxColumnWidth" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double DataGrid.MaxColumnWidth</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MinColumnWidth" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double DataGrid.MinColumnWidth</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RowBackground" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush DataGrid.RowBackground</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RowHeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double DataGrid.RowHeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RowHeaderWidth" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double DataGrid.RowHeaderWidth</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SelectionMode" type="text">
            <xs:annotation>
              <xs:documentation>Property:

DataGridSelectionMode DataGrid.SelectionMode

enum DataGridSelectionMode = {Extended, Single}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="VerticalGridLinesBrush" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush DataGrid.VerticalGridLinesBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ScrollBarVisibility DataGrid.VerticalScrollBarVisibility

enum ScrollBarVisibility = {Disabled, Auto, Hidden, Visible}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DropLocationIndicatorTemplate" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ITemplate&amp;lt;IControl&amp;gt; DataGrid.DropLocationIndicatorTemplate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SelectedIndex" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int DataGrid.SelectedIndex</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SelectedItem" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object DataGrid.SelectedItem</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ClipboardCopyMode" type="text">
            <xs:annotation>
              <xs:documentation>Property:

DataGridClipboardCopyMode DataGrid.ClipboardCopyMode

enum DataGridClipboardCopyMode = {None, ExcludeHeader, IncludeHeader}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AutoGenerateColumns" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool DataGrid.AutoGenerateColumns</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Items" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IEnumerable DataGrid.Items</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AreRowDetailsFrozen" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool DataGrid.AreRowDetailsFrozen</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RowDetailsTemplate" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IDataTemplate DataGrid.RowDetailsTemplate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RowDetailsVisibilityMode" type="text">
            <xs:annotation>
              <xs:documentation>Property:

DataGridRowDetailsVisibilityMode DataGrid.RowDetailsVisibilityMode

enum DataGridRowDetailsVisibilityMode = {VisibleWhenSelected, Visible, Collapsed}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CurrentColumn" type="text">
            <xs:annotation>
              <xs:documentation>Property:

DataGridColumn DataGrid.CurrentColumn</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="HorizontalScroll" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;ScrollEventArgs&amp;gt; DataGrid.HorizontalScroll</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="VerticalScroll" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;ScrollEventArgs&amp;gt; DataGrid.VerticalScroll</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AutoGeneratingColumn" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;DataGridAutoGeneratingColumnEventArgs&amp;gt; DataGrid.AutoGeneratingColumn</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="BeginningEdit" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;DataGridBeginningEditEventArgs&amp;gt; DataGrid.BeginningEdit</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CellEditEnded" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;DataGridCellEditEndedEventArgs&amp;gt; DataGrid.CellEditEnded</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CellEditEnding" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;DataGridCellEditEndingEventArgs&amp;gt; DataGrid.CellEditEnding</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CellPointerPressed" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;DataGridCellPointerPressedEventArgs&amp;gt; DataGrid.CellPointerPressed</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ColumnDisplayIndexChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;DataGridColumnEventArgs&amp;gt; DataGrid.ColumnDisplayIndexChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ColumnReordered" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;DataGridColumnEventArgs&amp;gt; DataGrid.ColumnReordered</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ColumnReordering" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;DataGridColumnReorderingEventArgs&amp;gt; DataGrid.ColumnReordering</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CurrentCellChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;EventArgs&amp;gt; DataGrid.CurrentCellChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="LoadingRow" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;DataGridRowEventArgs&amp;gt; DataGrid.LoadingRow</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PreparingCellForEdit" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;DataGridPreparingCellForEditEventArgs&amp;gt; DataGrid.PreparingCellForEdit</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RowEditEnded" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;DataGridRowEditEndedEventArgs&amp;gt; DataGrid.RowEditEnded</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RowEditEnding" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;DataGridRowEditEndingEventArgs&amp;gt; DataGrid.RowEditEnding</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SelectionChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;SelectionChangedEventArgs&amp;gt; DataGrid.SelectionChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Sorting" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;DataGridColumnEventArgs&amp;gt; DataGrid.Sorting</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="UnloadingRow" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;DataGridRowEventArgs&amp;gt; DataGrid.UnloadingRow</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="LoadingRowDetails" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;DataGridRowDetailsEventArgs&amp;gt; DataGrid.LoadingRowDetails</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RowDetailsVisibilityChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;DataGridRowDetailsEventArgs&amp;gt; DataGrid.RowDetailsVisibilityChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="UnloadingRowDetails" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;DataGridRowDetailsEventArgs&amp;gt; DataGrid.UnloadingRowDetails</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="LoadingRowGroup" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;DataGridRowGroupHeaderEventArgs&amp;gt; DataGrid.LoadingRowGroup</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="UnloadingRowGroup" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;DataGridRowGroupHeaderEventArgs&amp;gt; DataGrid.UnloadingRowGroup</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CopyingRowClipboardContent" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;DataGridRowClipboardEventArgs&amp;gt; DataGrid.CopyingRowClipboardContent</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="DataGrid" mixed="true" type="DataGridType">
    <xs:annotation>
      <xs:documentation>Class: DataGrid

Namespace: Avalonia.Controls

Base: TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: AlternatingRowBackground, AreRowDetailsFrozen, AreRowGroupHeadersFrozen, AutoGenerateColumns, Background, BorderBrush, BorderThickness, CanUserReorderColumns, CanUserResizeColumns, CanUserSortColumns, Classes, Clip, ClipboardCopyMode, ClipToBounds, Clock, ColumnHeaderHeight, ColumnWidth, ContextFlyout, ContextMenu, CornerRadius, CurrentColumn, Cursor, DataContext, DropLocationIndicatorTemplate, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, FrozenColumnCount, GridLinesVisibility, HeadersVisibility, Height, HorizontalAlignment, HorizontalGridLinesBrush, HorizontalScrollBarVisibility, IsEnabled, IsHitTestVisible, IsReadOnly, IsTabStop, IsVisible, Item, Items, Margin, MaxColumnWidth, MaxHeight, MaxWidth, MinColumnWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, RowBackground, RowDetailsTemplate, RowDetailsVisibilityMode, RowHeaderWidth, RowHeight, SelectedIndex, SelectedItem, SelectionMode, TabIndex, Tag, Template, Transitions, UseLayoutRounding, VerticalAlignment, VerticalGridLinesBrush, VerticalScrollBarVisibility, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, AutoGeneratingColumn, BeginningEdit, CellEditEnded, CellEditEnding, CellPointerPressed, ColumnDisplayIndexChanged, ColumnReordered, ColumnReordering, ContextRequested, CopyingRowClipboardContent, CurrentCellChanged, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, HorizontalScroll, Initialized, KeyDown, KeyUp, LayoutUpdated, LoadingRow, LoadingRowDetails, LoadingRowGroup, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PreparingCellForEdit, PropertyChanged, ResourcesChanged, RowDetailsVisibilityChanged, RowEditEnded, RowEditEnding, SelectionChanged, Sorting, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery, UnloadingRow, UnloadingRowDetails, UnloadingRowGroup, VerticalScroll</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="DisplayIndexComparerType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="DisplayIndexComparer" mixed="true" type="DisplayIndexComparerType">
    <xs:annotation>
      <xs:documentation>Class: DisplayIndexComparer

Namespace: Avalonia.Controls

Base: 

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="DataGridCellType" mixed="true">
    <xs:complexContent>
      <xs:extension base="ContentControlType">
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="DataGridCell" mixed="true" type="DataGridCellType">
    <xs:annotation>
      <xs:documentation>Class: DataGridCell

Namespace: Avalonia.Controls

Base: ContentControl, TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, BorderBrush, BorderThickness, Classes, Clip, ClipToBounds, Clock, Content, ContentTemplate, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HorizontalAlignment, HorizontalContentAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Template, Transitions, UseLayoutRounding, VerticalAlignment, VerticalContentAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="DataGridCheckBoxColumnType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsThreeState" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool DataGridCheckBoxColumn.IsThreeState</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Binding" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBinding DataGridBoundColumn.Binding</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ClipboardContentBinding" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBinding DataGridBoundColumn.ClipboardContentBinding</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsVisible" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool DataGridColumn.IsVisible</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CanUserReorder" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool DataGridColumn.CanUserReorder</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CanUserResize" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool DataGridColumn.CanUserResize</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CanUserSort" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool DataGridColumn.CanUserSort</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DisplayIndex" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int DataGridColumn.DisplayIndex</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CellStyleClasses" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Classes DataGridColumn.CellStyleClasses</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Header" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object DataGridColumn.Header</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="HeaderTemplate" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IDataTemplate DataGridColumn.HeaderTemplate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsReadOnly" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool DataGridColumn.IsReadOnly</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MaxWidth" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double DataGridColumn.MaxWidth</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MinWidth" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double DataGridColumn.MinWidth</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Width" type="text">
            <xs:annotation>
              <xs:documentation>Property:

DataGridLength DataGridColumn.Width</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SortMemberPath" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string DataGridColumn.SortMemberPath</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CustomSortComparer" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IComparer DataGridColumn.CustomSortComparer</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="DataGridCheckBoxColumn" mixed="true" type="DataGridCheckBoxColumnType">
    <xs:annotation>
      <xs:documentation>Class: DataGridCheckBoxColumn

Namespace: Avalonia.Controls

Base: DataGridBoundColumn, DataGridColumn, AvaloniaObject

Properties: Binding, CanUserReorder, CanUserResize, CanUserSort, CellStyleClasses, ClipboardContentBinding, CustomSortComparer, DisplayIndex, Header, HeaderTemplate, IsReadOnly, IsThreeState, IsVisible, Item, MaxWidth, MinWidth, SortMemberPath, Width

Events: PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="DataGridRowClipboardEventArgsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="DataGridRowClipboardEventArgs" mixed="true" type="DataGridRowClipboardEventArgsType">
    <xs:annotation>
      <xs:documentation>Class: DataGridRowClipboardEventArgs

Namespace: Avalonia.Controls

Base: EventArgs

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="DataGridColumnHeaderType" mixed="true">
    <xs:complexContent>
      <xs:extension base="ContentControlType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="SeparatorBrush" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush DataGridColumnHeader.SeparatorBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AreSeparatorsVisible" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool DataGridColumnHeader.AreSeparatorsVisible</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="DataGridColumnHeader" mixed="true" type="DataGridColumnHeaderType">
    <xs:annotation>
      <xs:documentation>Class: DataGridColumnHeader

Namespace: Avalonia.Controls

Base: ContentControl, TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: AreSeparatorsVisible, Background, BorderBrush, BorderThickness, Classes, Clip, ClipToBounds, Clock, Content, ContentTemplate, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HorizontalAlignment, HorizontalContentAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, SeparatorBrush, TabIndex, Tag, Template, Transitions, UseLayoutRounding, VerticalAlignment, VerticalContentAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="DataGridLengthConverterType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="DataGridLengthConverter" mixed="true" type="DataGridLengthConverterType">
    <xs:annotation>
      <xs:documentation>Class: DataGridLengthConverter

Namespace: Avalonia.Controls

Base: TypeConverter

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="DataGridRowType" mixed="true">
    <xs:complexContent>
      <xs:extension base="TemplatedControlType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Header" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object DataGridRow.Header</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DetailsTemplate" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IDataTemplate DataGridRow.DetailsTemplate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AreDetailsVisible" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool DataGridRow.AreDetailsVisible</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="DataGridRow" mixed="true" type="DataGridRowType">
    <xs:annotation>
      <xs:documentation>Class: DataGridRow

Namespace: Avalonia.Controls

Base: TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: AreDetailsVisible, Background, BorderBrush, BorderThickness, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, DetailsTemplate, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Header, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Template, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="DataGridRowGroupHeaderType" mixed="true">
    <xs:complexContent>
      <xs:extension base="TemplatedControlType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="IsItemCountVisible" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool DataGridRowGroupHeader.IsItemCountVisible</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyName" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string DataGridRowGroupHeader.PropertyName</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsPropertyNameVisible" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool DataGridRowGroupHeader.IsPropertyNameVisible</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SublevelIndent" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double DataGridRowGroupHeader.SublevelIndent</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="DataGridRowGroupHeader" mixed="true" type="DataGridRowGroupHeaderType">
    <xs:annotation>
      <xs:documentation>Class: DataGridRowGroupHeader

Namespace: Avalonia.Controls

Base: TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, BorderBrush, BorderThickness, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsItemCountVisible, IsPropertyNameVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, PropertyName, RenderTransform, RenderTransformOrigin, Resources, SublevelIndent, TabIndex, Tag, Template, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="DataGridTemplateColumnType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CellTemplate" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IDataTemplate DataGridTemplateColumn.CellTemplate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CellEditingTemplate" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IDataTemplate DataGridTemplateColumn.CellEditingTemplate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsReadOnly" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool DataGridTemplateColumn.IsReadOnly</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsVisible" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool DataGridColumn.IsVisible</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CanUserReorder" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool DataGridColumn.CanUserReorder</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CanUserResize" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool DataGridColumn.CanUserResize</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CanUserSort" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool DataGridColumn.CanUserSort</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DisplayIndex" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int DataGridColumn.DisplayIndex</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CellStyleClasses" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Classes DataGridColumn.CellStyleClasses</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Header" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object DataGridColumn.Header</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="HeaderTemplate" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IDataTemplate DataGridColumn.HeaderTemplate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MaxWidth" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double DataGridColumn.MaxWidth</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MinWidth" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double DataGridColumn.MinWidth</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Width" type="text">
            <xs:annotation>
              <xs:documentation>Property:

DataGridLength DataGridColumn.Width</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ClipboardContentBinding" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBinding DataGridColumn.ClipboardContentBinding</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SortMemberPath" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string DataGridColumn.SortMemberPath</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CustomSortComparer" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IComparer DataGridColumn.CustomSortComparer</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="DataGridTemplateColumn" mixed="true" type="DataGridTemplateColumnType">
    <xs:annotation>
      <xs:documentation>Class: DataGridTemplateColumn

Namespace: Avalonia.Controls

Base: DataGridColumn, AvaloniaObject

Properties: CanUserReorder, CanUserResize, CanUserSort, CellEditingTemplate, CellStyleClasses, CellTemplate, ClipboardContentBinding, CustomSortComparer, DisplayIndex, Header, HeaderTemplate, IsReadOnly, IsVisible, Item, MaxWidth, MinWidth, SortMemberPath, Width

Events: PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="DataGridTextColumnType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FontFamily DataGridTextColumn.FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double DataGridTextColumn.FontSize</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FontStyle DataGridTextColumn.FontStyle

enum FontStyle = {Normal, Italic, Oblique}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FontWeight DataGridTextColumn.FontWeight

enum FontWeight = {Thin, ExtraLight, ExtraLight, Light, SemiLight, Normal, Normal, Medium, DemiBold, DemiBold, Bold, ExtraBold,  ...}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush DataGridTextColumn.Foreground</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Binding" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBinding DataGridBoundColumn.Binding</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ClipboardContentBinding" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBinding DataGridBoundColumn.ClipboardContentBinding</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsVisible" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool DataGridColumn.IsVisible</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CanUserReorder" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool DataGridColumn.CanUserReorder</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CanUserResize" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool DataGridColumn.CanUserResize</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CanUserSort" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool DataGridColumn.CanUserSort</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DisplayIndex" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int DataGridColumn.DisplayIndex</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CellStyleClasses" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Classes DataGridColumn.CellStyleClasses</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Header" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object DataGridColumn.Header</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="HeaderTemplate" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IDataTemplate DataGridColumn.HeaderTemplate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsReadOnly" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool DataGridColumn.IsReadOnly</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MaxWidth" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double DataGridColumn.MaxWidth</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MinWidth" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double DataGridColumn.MinWidth</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Width" type="text">
            <xs:annotation>
              <xs:documentation>Property:

DataGridLength DataGridColumn.Width</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SortMemberPath" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string DataGridColumn.SortMemberPath</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CustomSortComparer" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IComparer DataGridColumn.CustomSortComparer</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="DataGridTextColumn" mixed="true" type="DataGridTextColumnType">
    <xs:annotation>
      <xs:documentation>Class: DataGridTextColumn

Namespace: Avalonia.Controls

Base: DataGridBoundColumn, DataGridColumn, AvaloniaObject

Properties: Binding, CanUserReorder, CanUserResize, CanUserSort, CellStyleClasses, ClipboardContentBinding, CustomSortComparer, DisplayIndex, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Header, HeaderTemplate, IsReadOnly, IsVisible, Item, MaxWidth, MinWidth, SortMemberPath, Width

Events: PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="DataGridAutoGeneratingColumnEventArgsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Column" type="text">
            <xs:annotation>
              <xs:documentation>Property:

DataGridColumn DataGridAutoGeneratingColumnEventArgs.Column</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Cancel" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool CancelEventArgs.Cancel</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="DataGridAutoGeneratingColumnEventArgs" mixed="true" type="DataGridAutoGeneratingColumnEventArgsType">
    <xs:annotation>
      <xs:documentation>Class: DataGridAutoGeneratingColumnEventArgs

Namespace: Avalonia.Controls

Base: CancelEventArgs, EventArgs

Properties: Cancel, Column

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="DataGridBeginningEditEventArgsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Cancel" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool CancelEventArgs.Cancel</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="DataGridBeginningEditEventArgs" mixed="true" type="DataGridBeginningEditEventArgsType">
    <xs:annotation>
      <xs:documentation>Class: DataGridBeginningEditEventArgs

Namespace: Avalonia.Controls

Base: CancelEventArgs, EventArgs

Properties: Cancel

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="DataGridCellEditEndedEventArgsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="DataGridCellEditEndedEventArgs" mixed="true" type="DataGridCellEditEndedEventArgsType">
    <xs:annotation>
      <xs:documentation>Class: DataGridCellEditEndedEventArgs

Namespace: Avalonia.Controls

Base: EventArgs

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="DataGridCellPointerPressedEventArgsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="DataGridCellPointerPressedEventArgs" mixed="true" type="DataGridCellPointerPressedEventArgsType">
    <xs:annotation>
      <xs:documentation>Class: DataGridCellPointerPressedEventArgs

Namespace: Avalonia.Controls

Base: EventArgs

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="DataGridCellEditEndingEventArgsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Cancel" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool CancelEventArgs.Cancel</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="DataGridCellEditEndingEventArgs" mixed="true" type="DataGridCellEditEndingEventArgsType">
    <xs:annotation>
      <xs:documentation>Class: DataGridCellEditEndingEventArgs

Namespace: Avalonia.Controls

Base: CancelEventArgs, EventArgs

Properties: Cancel

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="DataGridColumnEventArgsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Handled" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool HandledEventArgs.Handled</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="DataGridColumnEventArgs" mixed="true" type="DataGridColumnEventArgsType">
    <xs:annotation>
      <xs:documentation>Class: DataGridColumnEventArgs

Namespace: Avalonia.Controls

Base: HandledEventArgs, EventArgs

Properties: Handled

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="DataGridColumnReorderingEventArgsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DragIndicator" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Control DataGridColumnReorderingEventArgs.DragIndicator</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DropLocationIndicator" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IControl DataGridColumnReorderingEventArgs.DropLocationIndicator</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Cancel" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool CancelEventArgs.Cancel</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="DataGridColumnReorderingEventArgs" mixed="true" type="DataGridColumnReorderingEventArgsType">
    <xs:annotation>
      <xs:documentation>Class: DataGridColumnReorderingEventArgs

Namespace: Avalonia.Controls

Base: CancelEventArgs, EventArgs

Properties: Cancel, DragIndicator, DropLocationIndicator

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="DataGridRowEventArgsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="DataGridRowEventArgs" mixed="true" type="DataGridRowEventArgsType">
    <xs:annotation>
      <xs:documentation>Class: DataGridRowEventArgs

Namespace: Avalonia.Controls

Base: EventArgs

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="DataGridRowEditEndingEventArgsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Cancel" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool CancelEventArgs.Cancel</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="DataGridRowEditEndingEventArgs" mixed="true" type="DataGridRowEditEndingEventArgsType">
    <xs:annotation>
      <xs:documentation>Class: DataGridRowEditEndingEventArgs

Namespace: Avalonia.Controls

Base: CancelEventArgs, EventArgs

Properties: Cancel

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="DataGridRowEditEndedEventArgsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="DataGridRowEditEndedEventArgs" mixed="true" type="DataGridRowEditEndedEventArgsType">
    <xs:annotation>
      <xs:documentation>Class: DataGridRowEditEndedEventArgs

Namespace: Avalonia.Controls

Base: EventArgs

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="DataGridPreparingCellForEditEventArgsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="DataGridPreparingCellForEditEventArgs" mixed="true" type="DataGridPreparingCellForEditEventArgsType">
    <xs:annotation>
      <xs:documentation>Class: DataGridPreparingCellForEditEventArgs

Namespace: Avalonia.Controls

Base: EventArgs

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="DataGridRowGroupHeaderEventArgsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="DataGridRowGroupHeaderEventArgs" mixed="true" type="DataGridRowGroupHeaderEventArgsType">
    <xs:annotation>
      <xs:documentation>Class: DataGridRowGroupHeaderEventArgs

Namespace: Avalonia.Controls

Base: EventArgs

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="DataGridRowDetailsEventArgsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="DataGridRowDetailsEventArgs" mixed="true" type="DataGridRowDetailsEventArgsType">
    <xs:annotation>
      <xs:documentation>Class: DataGridRowDetailsEventArgs

Namespace: Avalonia.Controls

Base: EventArgs

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="DataGridRowHeaderType" mixed="true">
    <xs:complexContent>
      <xs:extension base="ContentControlType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="SeparatorBrush" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush DataGridRowHeader.SeparatorBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AreSeparatorsVisible" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool DataGridRowHeader.AreSeparatorsVisible</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="DataGridRowHeader" mixed="true" type="DataGridRowHeaderType">
    <xs:annotation>
      <xs:documentation>Class: DataGridRowHeader

Namespace: Avalonia.Controls.Primitives

Base: ContentControl, TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: AreSeparatorsVisible, Background, BorderBrush, BorderThickness, Classes, Clip, ClipToBounds, Clock, Content, ContentTemplate, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HorizontalAlignment, HorizontalContentAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, SeparatorBrush, TabIndex, Tag, Template, Transitions, UseLayoutRounding, VerticalAlignment, VerticalContentAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="DataGridCellsPresenterType" mixed="true">
    <xs:complexContent>
      <xs:extension base="PanelType">
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="DataGridCellsPresenter" mixed="true" type="DataGridCellsPresenterType">
    <xs:annotation>
      <xs:documentation>Class: DataGridCellsPresenter

Namespace: Avalonia.Controls.Primitives

Base: Panel, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, Cursor, DataContext, Focusable, FocusAdorner, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="DataGridColumnHeadersPresenterType" mixed="true">
    <xs:complexContent>
      <xs:extension base="PanelType">
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="DataGridColumnHeadersPresenter" mixed="true" type="DataGridColumnHeadersPresenterType">
    <xs:annotation>
      <xs:documentation>Class: DataGridColumnHeadersPresenter

Namespace: Avalonia.Controls.Primitives

Base: Panel, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, Cursor, DataContext, Focusable, FocusAdorner, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="DataGridDetailsPresenterType" mixed="true">
    <xs:complexContent>
      <xs:extension base="PanelType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="ContentHeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double DataGridDetailsPresenter.ContentHeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="DataGridDetailsPresenter" mixed="true" type="DataGridDetailsPresenterType">
    <xs:annotation>
      <xs:documentation>Class: DataGridDetailsPresenter

Namespace: Avalonia.Controls.Primitives

Base: Panel, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, Classes, Clip, ClipToBounds, Clock, ContentHeight, ContextFlyout, ContextMenu, Cursor, DataContext, Focusable, FocusAdorner, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="DataGridFrozenGridType" mixed="true">
    <xs:complexContent>
      <xs:extension base="GridType">
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="DataGridFrozenGrid" mixed="true" type="DataGridFrozenGridType">
    <xs:annotation>
      <xs:documentation>Class: DataGridFrozenGrid

Namespace: Avalonia.Controls.Primitives

Base: Grid, Panel, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, Classes, Clip, ClipToBounds, Clock, ColumnDefinitions, ContextFlyout, ContextMenu, Cursor, DataContext, Focusable, FocusAdorner, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, RenderTransform, RenderTransformOrigin, Resources, RowDefinitions, ShowGridLines, TabIndex, Tag, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="DataGridRowsPresenterType" mixed="true">
    <xs:complexContent>
      <xs:extension base="PanelType">
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="DataGridRowsPresenter" mixed="true" type="DataGridRowsPresenterType">
    <xs:annotation>
      <xs:documentation>Class: DataGridRowsPresenter

Namespace: Avalonia.Controls.Primitives

Base: Panel, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, Cursor, DataContext, Focusable, FocusAdorner, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ApplicationType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataContext" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object Application.DataContext</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Resources" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IResourceDictionary Application.Resources</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ApplicationLifetime" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IApplicationLifetime Application.ApplicationLifetime</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Name" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string Application.Name</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ResourcesChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;ResourcesChangedEventArgs&amp;gt; Application.ResourcesChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="UrlsOpened" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;UrlOpenedEventArgs&amp;gt; Application.UrlsOpened</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="Application" mixed="true" type="ApplicationType">
    <xs:annotation>
      <xs:documentation>Class: Application

Namespace: Avalonia

Base: AvaloniaObject

Properties: ApplicationLifetime, DataContext, Item, Name, Resources

Events: PropertyChanged, ResourcesChanged, UrlsOpened</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="UrlOpenedEventArgsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="UrlOpenedEventArgs" mixed="true" type="UrlOpenedEventArgsType">
    <xs:annotation>
      <xs:documentation>Class: UrlOpenedEventArgs

Namespace: Avalonia

Base: EventArgs

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="PopulatedEventArgsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="PopulatedEventArgs" mixed="true" type="PopulatedEventArgsType">
    <xs:annotation>
      <xs:documentation>Class: PopulatedEventArgs

Namespace: Avalonia.Controls

Base: EventArgs

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="PopulatingEventArgsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Cancel" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool CancelEventArgs.Cancel</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="PopulatingEventArgs" mixed="true" type="PopulatingEventArgsType">
    <xs:annotation>
      <xs:documentation>Class: PopulatingEventArgs

Namespace: Avalonia.Controls

Base: CancelEventArgs, EventArgs

Properties: Cancel

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="AutoCompleteBoxType" mixed="true">
    <xs:complexContent>
      <xs:extension base="TemplatedControlType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="MinimumPrefixLength" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int AutoCompleteBox.MinimumPrefixLength</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsTextCompletionEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool AutoCompleteBox.IsTextCompletionEnabled</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ItemTemplate" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IDataTemplate AutoCompleteBox.ItemTemplate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MinimumPopulateDelay" type="text">
            <xs:annotation>
              <xs:documentation>Property:

TimeSpan AutoCompleteBox.MinimumPopulateDelay</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MaxDropDownHeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double AutoCompleteBox.MaxDropDownHeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsDropDownOpen" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool AutoCompleteBox.IsDropDownOpen</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ValueMemberBinding" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBinding AutoCompleteBox.ValueMemberBinding</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SelectedItem" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AutoCompleteBox.SelectedItem</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Text" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string AutoCompleteBox.Text</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FilterMode" type="text">
            <xs:annotation>
              <xs:documentation>Property:

AutoCompleteFilterMode AutoCompleteBox.FilterMode

enum AutoCompleteFilterMode = {None, StartsWith, StartsWithCaseSensitive, StartsWithOrdinal, StartsWithOrdinalCaseSensitive, Contains, ContainsCaseSensitive, ContainsOrdinal, ContainsOrdinalCaseSensitive, Equals, EqualsCaseSensitive, EqualsOrdinal,  ...}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Watermark" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string AutoCompleteBox.Watermark</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ItemFilter" type="text">
            <xs:annotation>
              <xs:documentation>Property:

AutoCompleteFilterPredicate&amp;lt;object&amp;gt; AutoCompleteBox.ItemFilter</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextFilter" type="text">
            <xs:annotation>
              <xs:documentation>Property:

AutoCompleteFilterPredicate&amp;lt;string&amp;gt; AutoCompleteBox.TextFilter</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ItemSelector" type="text">
            <xs:annotation>
              <xs:documentation>Property:

AutoCompleteSelector&amp;lt;object&amp;gt; AutoCompleteBox.ItemSelector</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextSelector" type="text">
            <xs:annotation>
              <xs:documentation>Property:

AutoCompleteSelector&amp;lt;string&amp;gt; AutoCompleteBox.TextSelector</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AsyncPopulator" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Func&amp;lt;string, CancellationToken, Task&amp;lt;IEnumerable&amp;lt;object&amp;gt;&amp;gt;&amp;gt; AutoCompleteBox.AsyncPopulator</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Items" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IEnumerable AutoCompleteBox.Items</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler AutoCompleteBox.TextChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Populating" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PopulatingEventArgs&amp;gt; AutoCompleteBox.Populating</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Populated" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PopulatedEventArgs&amp;gt; AutoCompleteBox.Populated</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DropDownOpening" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;CancelEventArgs&amp;gt; AutoCompleteBox.DropDownOpening</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DropDownOpened" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler AutoCompleteBox.DropDownOpened</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DropDownClosing" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;CancelEventArgs&amp;gt; AutoCompleteBox.DropDownClosing</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DropDownClosed" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler AutoCompleteBox.DropDownClosed</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SelectionChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;SelectionChangedEventArgs&amp;gt; AutoCompleteBox.SelectionChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="AutoCompleteBox" mixed="true" type="AutoCompleteBoxType">
    <xs:annotation>
      <xs:documentation>Class: AutoCompleteBox

Namespace: Avalonia.Controls

Base: TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: AsyncPopulator, Background, BorderBrush, BorderThickness, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, FilterMode, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HorizontalAlignment, IsDropDownOpen, IsEnabled, IsHitTestVisible, IsTabStop, IsTextCompletionEnabled, IsVisible, Item, ItemFilter, Items, ItemSelector, ItemTemplate, Margin, MaxDropDownHeight, MaxHeight, MaxWidth, MinHeight, MinimumPopulateDelay, MinimumPrefixLength, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, SelectedItem, TabIndex, Tag, Template, Text, TextFilter, TextSelector, Transitions, UseLayoutRounding, ValueMemberBinding, VerticalAlignment, Watermark, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, DropDownClosed, DropDownClosing, DropDownOpened, DropDownOpening, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, Populated, Populating, PropertyChanged, ResourcesChanged, SelectionChanged, Tapped, TemplateApplied, TextChanged, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="BorderType" mixed="true">
    <xs:complexContent>
      <xs:extension base="DecoratorType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Background" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush Border.Background</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="BorderBrush" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush Border.BorderBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="BorderDashArray" type="text">
            <xs:annotation>
              <xs:documentation>Property:

AvaloniaList&amp;lt;double&amp;gt; Border.BorderDashArray</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="BorderThickness" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Thickness Border.BorderThickness</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="BorderDashOffset" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Border.BorderDashOffset</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="BorderLineCap" type="text">
            <xs:annotation>
              <xs:documentation>Property:

PenLineCap Border.BorderLineCap

enum PenLineCap = {Flat, Round, Square}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="BorderLineJoin" type="text">
            <xs:annotation>
              <xs:documentation>Property:

PenLineJoin Border.BorderLineJoin

enum PenLineJoin = {Bevel, Miter, Round}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CornerRadius" type="text">
            <xs:annotation>
              <xs:documentation>Property:

CornerRadius Border.CornerRadius</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="BoxShadow" type="text">
            <xs:annotation>
              <xs:documentation>Property:

BoxShadows Border.BoxShadow</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="Border" mixed="true" type="BorderType">
    <xs:annotation>
      <xs:documentation>Class: Border

Namespace: Avalonia.Controls

Base: Decorator, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, BorderBrush, BorderDashArray, BorderDashOffset, BorderLineCap, BorderLineJoin, BorderThickness, BoxShadow, Child, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Focusable, FocusAdorner, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ButtonType" mixed="true">
    <xs:complexContent>
      <xs:extension base="ContentControlType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="ClickMode" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ClickMode Button.ClickMode

enum ClickMode = {Release, Press}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Command" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ICommand Button.Command</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="HotKey" type="text">
            <xs:annotation>
              <xs:documentation>Property:

KeyGesture Button.HotKey</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CommandParameter" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object Button.CommandParameter</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsDefault" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Button.IsDefault</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsCancel" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Button.IsCancel</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Flyout" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FlyoutBase Button.Flyout</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Click" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; Button.Click</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="Button" mixed="true" type="ButtonType">
    <xs:annotation>
      <xs:documentation>Class: Button

Namespace: Avalonia.Controls

Base: ContentControl, TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, BorderBrush, BorderThickness, Classes, ClickMode, Clip, ClipToBounds, Clock, Command, CommandParameter, Content, ContentTemplate, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Flyout, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HorizontalAlignment, HorizontalContentAlignment, HotKey, IsCancel, IsDefault, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Template, Transitions, UseLayoutRounding, VerticalAlignment, VerticalContentAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, Click, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ButtonSpinnerType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AllowSpin" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool ButtonSpinner.AllowSpin</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ShowButtonSpinner" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool ButtonSpinner.ShowButtonSpinner</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ButtonSpinnerLocation" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Location ButtonSpinner.ButtonSpinnerLocation

enum Location = {Left, Right}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ValidSpinDirection" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ValidSpinDirections Spinner.ValidSpinDirection

enum ValidSpinDirections = {None, Increase, Decrease}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Content" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object ContentControl.Content</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContentTemplate" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IDataTemplate ContentControl.ContentTemplate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="HorizontalContentAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

HorizontalAlignment ContentControl.HorizontalContentAlignment

enum HorizontalAlignment = {Stretch, Left, Center, Right}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="VerticalContentAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

VerticalAlignment ContentControl.VerticalContentAlignment

enum VerticalAlignment = {Stretch, Top, Center, Bottom}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Background" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush TemplatedControl.Background</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="BorderBrush" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush TemplatedControl.BorderBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="BorderThickness" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Thickness TemplatedControl.BorderThickness</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CornerRadius" type="text">
            <xs:annotation>
              <xs:documentation>Property:

CornerRadius TemplatedControl.CornerRadius</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FontFamily TemplatedControl.FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double TemplatedControl.FontSize</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FontStyle TemplatedControl.FontStyle

enum FontStyle = {Normal, Italic, Oblique}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FontWeight TemplatedControl.FontWeight

enum FontWeight = {Thin, ExtraLight, ExtraLight, Light, SemiLight, Normal, Normal, Medium, DemiBold, DemiBold, Bold, ExtraBold,  ...}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush TemplatedControl.Foreground</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Padding" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Thickness TemplatedControl.Padding</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Template" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IControlTemplate TemplatedControl.Template</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FocusAdorner" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ITemplate&amp;lt;IControl&amp;gt; Control.FocusAdorner</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextMenu" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ContextMenu Control.ContextMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextFlyout" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FlyoutBase Control.ContextFlyout</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Tag" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object Control.Tag</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Focusable" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.Focusable</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsEnabled</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Cursor" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Cursor InputElement.Cursor</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsHitTestVisible" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsHitTestVisible</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsTabStop" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsTabStop</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TabIndex" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int InputElement.TabIndex</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Width" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.Width</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Height" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.Height</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MinWidth" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MinWidth</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MaxWidth" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MaxWidth</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MinHeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MinHeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MaxHeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MaxHeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Margin" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Thickness Layoutable.Margin</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="HorizontalAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

HorizontalAlignment Layoutable.HorizontalAlignment

enum HorizontalAlignment = {Stretch, Left, Center, Right}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="VerticalAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

VerticalAlignment Layoutable.VerticalAlignment

enum VerticalAlignment = {Stretch, Top, Center, Bottom}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="UseLayoutRounding" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Layoutable.UseLayoutRounding</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ClipToBounds" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Visual.ClipToBounds</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Clip" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Geometry Visual.Clip</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsVisible" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Visual.IsVisible</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Opacity" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Visual.Opacity</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="OpacityMask" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush Visual.OpacityMask</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RenderTransform" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ITransform Visual.RenderTransform</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RenderTransformOrigin" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RelativePoint Visual.RenderTransformOrigin</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ZIndex" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int Visual.ZIndex</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Name" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string StyledElement.Name</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Classes" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Classes StyledElement.Classes</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataContext" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object StyledElement.DataContext</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Resources" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IResourceDictionary StyledElement.Resources</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Clock" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IClock Animatable.Clock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Transitions" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Transitions Animatable.Transitions</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Spin" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;SpinEventArgs&amp;gt; Spinner.Spin</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplateApplied" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TemplateAppliedEventArgs&amp;gt; TemplatedControl.TemplateApplied</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextRequested" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;ContextRequestedEventArgs&amp;gt; Control.ContextRequested</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="GotFocus" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;GotFocusEventArgs&amp;gt; InputElement.GotFocus</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="LostFocus" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.LostFocus</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="KeyDown" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;KeyEventArgs&amp;gt; InputElement.KeyDown</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="KeyUp" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;KeyEventArgs&amp;gt; InputElement.KeyUp</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInput" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputEventArgs&amp;gt; InputElement.TextInput</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInputMethodClientRequested" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputMethodClientRequestedEventArgs&amp;gt; InputElement.TextInputMethodClientRequested</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInputOptionsQuery" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputOptionsQueryEventArgs&amp;gt; InputElement.TextInputOptionsQuery</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerEnter" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerEnter</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerLeave" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerLeave</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerMoved" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerMoved</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerPressed" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerPressedEventArgs&amp;gt; InputElement.PointerPressed</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerReleased" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerReleasedEventArgs&amp;gt; InputElement.PointerReleased</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerCaptureLost" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerCaptureLostEventArgs&amp;gt; InputElement.PointerCaptureLost</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerWheelChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerWheelEventArgs&amp;gt; InputElement.PointerWheelChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Tapped" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.Tapped</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DoubleTapped" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.DoubleTapped</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="EffectiveViewportChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;EffectiveViewportChangedEventArgs&amp;gt; Layoutable.EffectiveViewportChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="LayoutUpdated" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler Layoutable.LayoutUpdated</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AttachedToVisualTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;VisualTreeAttachmentEventArgs&amp;gt; Visual.AttachedToVisualTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DetachedFromVisualTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;VisualTreeAttachmentEventArgs&amp;gt; Visual.DetachedFromVisualTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AttachedToLogicalTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;LogicalTreeAttachmentEventArgs&amp;gt; StyledElement.AttachedToLogicalTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DetachedFromLogicalTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;LogicalTreeAttachmentEventArgs&amp;gt; StyledElement.DetachedFromLogicalTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataContextChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler StyledElement.DataContextChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Initialized" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler StyledElement.Initialized</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ResourcesChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;ResourcesChangedEventArgs&amp;gt; StyledElement.ResourcesChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ButtonSpinner" mixed="true" type="ButtonSpinnerType">
    <xs:annotation>
      <xs:documentation>Class: ButtonSpinner

Namespace: Avalonia.Controls

Base: Spinner, ContentControl, TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: AllowSpin, Background, BorderBrush, BorderThickness, ButtonSpinnerLocation, Classes, Clip, ClipToBounds, Clock, Content, ContentTemplate, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HorizontalAlignment, HorizontalContentAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, ShowButtonSpinner, TabIndex, Tag, Template, Transitions, UseLayoutRounding, ValidSpinDirection, VerticalAlignment, VerticalContentAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Spin, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="CalendarDateChangedEventArgsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Handled" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool RoutedEventArgs.Handled</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RoutedEvent" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RoutedEvent RoutedEventArgs.RoutedEvent</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Route" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RoutingStrategies RoutedEventArgs.Route

enum RoutingStrategies = {Direct, Tunnel, Bubble}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Source" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IInteractive RoutedEventArgs.Source</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="CalendarDateChangedEventArgs" mixed="true" type="CalendarDateChangedEventArgsType">
    <xs:annotation>
      <xs:documentation>Class: CalendarDateChangedEventArgs

Namespace: Avalonia.Controls

Base: RoutedEventArgs, EventArgs

Properties: Handled, Route, RoutedEvent, Source

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="CalendarModeChangedEventArgsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Handled" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool RoutedEventArgs.Handled</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RoutedEvent" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RoutedEvent RoutedEventArgs.RoutedEvent</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Route" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RoutingStrategies RoutedEventArgs.Route

enum RoutingStrategies = {Direct, Tunnel, Bubble}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Source" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IInteractive RoutedEventArgs.Source</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="CalendarModeChangedEventArgs" mixed="true" type="CalendarModeChangedEventArgsType">
    <xs:annotation>
      <xs:documentation>Class: CalendarModeChangedEventArgs

Namespace: Avalonia.Controls

Base: RoutedEventArgs, EventArgs

Properties: Handled, Route, RoutedEvent, Source

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="CalendarType" mixed="true">
    <xs:complexContent>
      <xs:extension base="TemplatedControlType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="FirstDayOfWeek" type="text">
            <xs:annotation>
              <xs:documentation>Property:

DayOfWeek Calendar.FirstDayOfWeek

enum DayOfWeek = {Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsTodayHighlighted" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Calendar.IsTodayHighlighted</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="HeaderBackground" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush Calendar.HeaderBackground</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DisplayMode" type="text">
            <xs:annotation>
              <xs:documentation>Property:

CalendarMode Calendar.DisplayMode

enum CalendarMode = {Month, Year, Decade}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SelectionMode" type="text">
            <xs:annotation>
              <xs:documentation>Property:

CalendarSelectionMode Calendar.SelectionMode

enum CalendarSelectionMode = {SingleDate, SingleRange, MultipleRange, None}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SelectedDate" type="text">
            <xs:annotation>
              <xs:documentation>Property:

DateTime? Calendar.SelectedDate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DisplayDate" type="text">
            <xs:annotation>
              <xs:documentation>Property:

DateTime Calendar.DisplayDate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DisplayDateStart" type="text">
            <xs:annotation>
              <xs:documentation>Property:

DateTime? Calendar.DisplayDateStart</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DisplayDateEnd" type="text">
            <xs:annotation>
              <xs:documentation>Property:

DateTime? Calendar.DisplayDateEnd</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SelectedDatesChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;SelectionChangedEventArgs&amp;gt; Calendar.SelectedDatesChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DisplayDateChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;CalendarDateChangedEventArgs&amp;gt; Calendar.DisplayDateChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DisplayModeChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;CalendarModeChangedEventArgs&amp;gt; Calendar.DisplayModeChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="Calendar" mixed="true" type="CalendarType">
    <xs:annotation>
      <xs:documentation>Class: Calendar

Namespace: Avalonia.Controls

Base: TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, BorderBrush, BorderThickness, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, DisplayDate, DisplayDateEnd, DisplayDateStart, DisplayMode, FirstDayOfWeek, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, HeaderBackground, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsTodayHighlighted, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, SelectedDate, SelectionMode, TabIndex, Tag, Template, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DisplayDateChanged, DisplayModeChanged, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, SelectedDatesChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="CalendarDatePickerDateValidationErrorEventArgsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="ThrowException" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool CalendarDatePickerDateValidationErrorEventArgs.ThrowException</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="CalendarDatePickerDateValidationErrorEventArgs" mixed="true" type="CalendarDatePickerDateValidationErrorEventArgsType">
    <xs:annotation>
      <xs:documentation>Class: CalendarDatePickerDateValidationErrorEventArgs

Namespace: Avalonia.Controls

Base: EventArgs

Properties: ThrowException

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="CalendarDatePickerType" mixed="true">
    <xs:complexContent>
      <xs:extension base="TemplatedControlType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DisplayDate" type="text">
            <xs:annotation>
              <xs:documentation>Property:

DateTime CalendarDatePicker.DisplayDate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DisplayDateStart" type="text">
            <xs:annotation>
              <xs:documentation>Property:

DateTime? CalendarDatePicker.DisplayDateStart</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DisplayDateEnd" type="text">
            <xs:annotation>
              <xs:documentation>Property:

DateTime? CalendarDatePicker.DisplayDateEnd</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FirstDayOfWeek" type="text">
            <xs:annotation>
              <xs:documentation>Property:

DayOfWeek CalendarDatePicker.FirstDayOfWeek

enum DayOfWeek = {Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsDropDownOpen" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool CalendarDatePicker.IsDropDownOpen</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsTodayHighlighted" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool CalendarDatePicker.IsTodayHighlighted</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SelectedDate" type="text">
            <xs:annotation>
              <xs:documentation>Property:

DateTime? CalendarDatePicker.SelectedDate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SelectedDateFormat" type="text">
            <xs:annotation>
              <xs:documentation>Property:

CalendarDatePickerFormat CalendarDatePicker.SelectedDateFormat

enum CalendarDatePickerFormat = {Long, Short, Custom}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CustomDateFormatString" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string CalendarDatePicker.CustomDateFormatString</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Text" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string CalendarDatePicker.Text</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Watermark" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string CalendarDatePicker.Watermark</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="UseFloatingWatermark" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool CalendarDatePicker.UseFloatingWatermark</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="HorizontalContentAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

HorizontalAlignment CalendarDatePicker.HorizontalContentAlignment

enum HorizontalAlignment = {Stretch, Left, Center, Right}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="VerticalContentAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

VerticalAlignment CalendarDatePicker.VerticalContentAlignment

enum VerticalAlignment = {Stretch, Top, Center, Bottom}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CalendarClosed" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler CalendarDatePicker.CalendarClosed</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CalendarOpened" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler CalendarDatePicker.CalendarOpened</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DateValidationError" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;CalendarDatePickerDateValidationErrorEventArgs&amp;gt; CalendarDatePicker.DateValidationError</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SelectedDateChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;SelectionChangedEventArgs&amp;gt; CalendarDatePicker.SelectedDateChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="CalendarDatePicker" mixed="true" type="CalendarDatePickerType">
    <xs:annotation>
      <xs:documentation>Class: CalendarDatePicker

Namespace: Avalonia.Controls

Base: TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, BorderBrush, BorderThickness, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, CornerRadius, Cursor, CustomDateFormatString, DataContext, DisplayDate, DisplayDateEnd, DisplayDateStart, FirstDayOfWeek, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HorizontalAlignment, HorizontalContentAlignment, IsDropDownOpen, IsEnabled, IsHitTestVisible, IsTabStop, IsTodayHighlighted, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, SelectedDate, SelectedDateFormat, TabIndex, Tag, Template, Text, Transitions, UseFloatingWatermark, UseLayoutRounding, VerticalAlignment, VerticalContentAlignment, Watermark, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, CalendarClosed, CalendarOpened, ContextRequested, DataContextChanged, DateValidationError, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, SelectedDateChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="CalendarDateRangeType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="CalendarDateRange" mixed="true" type="CalendarDateRangeType">
    <xs:annotation>
      <xs:documentation>Class: CalendarDateRange

Namespace: Avalonia.Controls

Base: 

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="CanvasType" mixed="true">
    <xs:complexContent>
      <xs:extension base="PanelType">
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="Canvas" mixed="true" type="CanvasType">
    <xs:annotation>
      <xs:documentation>Class: Canvas

Namespace: Avalonia.Controls

Base: Panel, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, Cursor, DataContext, Focusable, FocusAdorner, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="CarouselType" mixed="true">
    <xs:complexContent>
      <xs:extension base="SelectingItemsControlType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="IsVirtualized" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Carousel.IsVirtualized</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PageTransition" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IPageTransition Carousel.PageTransition</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="Carousel" mixed="true" type="CarouselType">
    <xs:annotation>
      <xs:documentation>Class: Carousel

Namespace: Avalonia.Controls

Base: SelectingItemsControl, ItemsControl, TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: AutoScrollToSelectedItem, Background, BorderBrush, BorderThickness, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsTextSearchEnabled, IsVirtualized, IsVisible, Item, Items, ItemsPanel, ItemTemplate, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, PageTransition, RenderTransform, RenderTransformOrigin, Resources, SelectedIndex, SelectedItem, TabIndex, Tag, Template, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, SelectionChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="CheckBoxType" mixed="true">
    <xs:complexContent>
      <xs:extension base="ToggleButtonType">
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="CheckBox" mixed="true" type="CheckBoxType">
    <xs:annotation>
      <xs:documentation>Class: CheckBox

Namespace: Avalonia.Controls

Base: ToggleButton, Button, ContentControl, TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, BorderBrush, BorderThickness, Classes, ClickMode, Clip, ClipToBounds, Clock, Command, CommandParameter, Content, ContentTemplate, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Flyout, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HorizontalAlignment, HorizontalContentAlignment, HotKey, IsCancel, IsChecked, IsDefault, IsEnabled, IsHitTestVisible, IsTabStop, IsThreeState, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Template, Transitions, UseLayoutRounding, VerticalAlignment, VerticalContentAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, Checked, Click, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Indeterminate, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery, Unchecked</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ColumnDefinitionType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MaxWidth" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double ColumnDefinition.MaxWidth</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MinWidth" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double ColumnDefinition.MinWidth</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Width" type="text">
            <xs:annotation>
              <xs:documentation>Property:

GridLength ColumnDefinition.Width</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SharedSizeGroup" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string DefinitionBase.SharedSizeGroup</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ColumnDefinition" mixed="true" type="ColumnDefinitionType">
    <xs:annotation>
      <xs:documentation>Class: ColumnDefinition

Namespace: Avalonia.Controls

Base: DefinitionBase, AvaloniaObject

Properties: Item, MaxWidth, MinWidth, SharedSizeGroup, Width

Events: PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ColumnDefinitionsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="ResetBehavior" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ResetBehavior AvaloniaList&amp;lt;ColumnDefinition&amp;gt;.ResetBehavior

enum ResetBehavior = {Reset, Remove}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Validate" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Action&amp;lt;ColumnDefinition&amp;gt; AvaloniaList&amp;lt;ColumnDefinition&amp;gt;.Validate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ColumnDefinition AvaloniaList&amp;lt;ColumnDefinition&amp;gt;.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Capacity" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int AvaloniaList&amp;lt;ColumnDefinition&amp;gt;.Capacity</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CollectionChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

NotifyCollectionChangedEventHandler AvaloniaList&amp;lt;ColumnDefinition&amp;gt;.CollectionChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

PropertyChangedEventHandler AvaloniaList&amp;lt;ColumnDefinition&amp;gt;.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ColumnDefinitions" mixed="true" type="ColumnDefinitionsType">
    <xs:annotation>
      <xs:documentation>Class: ColumnDefinitions

Namespace: Avalonia.Controls

Base: DefinitionList`1, AvaloniaList`1

Properties: Capacity, Item, ResetBehavior, Validate

Events: CollectionChanged, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ComboBoxType" mixed="true">
    <xs:complexContent>
      <xs:extension base="SelectingItemsControlType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="IsDropDownOpen" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool ComboBox.IsDropDownOpen</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MaxDropDownHeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double ComboBox.MaxDropDownHeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PlaceholderText" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string ComboBox.PlaceholderText</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PlaceholderForeground" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush ComboBox.PlaceholderForeground</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="VirtualizationMode" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ItemVirtualizationMode ComboBox.VirtualizationMode

enum ItemVirtualizationMode = {None, Simple}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="HorizontalContentAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

HorizontalAlignment ComboBox.HorizontalContentAlignment

enum HorizontalAlignment = {Stretch, Left, Center, Right}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="VerticalContentAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

VerticalAlignment ComboBox.VerticalContentAlignment

enum VerticalAlignment = {Stretch, Top, Center, Bottom}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ComboBox" mixed="true" type="ComboBoxType">
    <xs:annotation>
      <xs:documentation>Class: ComboBox

Namespace: Avalonia.Controls

Base: SelectingItemsControl, ItemsControl, TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: AutoScrollToSelectedItem, Background, BorderBrush, BorderThickness, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HorizontalAlignment, HorizontalContentAlignment, IsDropDownOpen, IsEnabled, IsHitTestVisible, IsTabStop, IsTextSearchEnabled, IsVisible, Item, Items, ItemsPanel, ItemTemplate, Margin, MaxDropDownHeight, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, PlaceholderForeground, PlaceholderText, RenderTransform, RenderTransformOrigin, Resources, SelectedIndex, SelectedItem, TabIndex, Tag, Template, Transitions, UseLayoutRounding, VerticalAlignment, VerticalContentAlignment, VirtualizationMode, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, SelectionChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ComboBoxItemType" mixed="true">
    <xs:complexContent>
      <xs:extension base="ListBoxItemType">
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ComboBoxItem" mixed="true" type="ComboBoxItemType">
    <xs:annotation>
      <xs:documentation>Class: ComboBoxItem

Namespace: Avalonia.Controls

Base: ListBoxItem, ContentControl, TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, BorderBrush, BorderThickness, Classes, Clip, ClipToBounds, Clock, Content, ContentTemplate, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HorizontalAlignment, HorizontalContentAlignment, IsEnabled, IsHitTestVisible, IsSelected, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Template, Transitions, UseLayoutRounding, VerticalAlignment, VerticalContentAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ContentControlType" mixed="true">
    <xs:complexContent>
      <xs:extension base="TemplatedControlType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Content" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object ContentControl.Content</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContentTemplate" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IDataTemplate ContentControl.ContentTemplate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="HorizontalContentAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

HorizontalAlignment ContentControl.HorizontalContentAlignment

enum HorizontalAlignment = {Stretch, Left, Center, Right}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="VerticalContentAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

VerticalAlignment ContentControl.VerticalContentAlignment

enum VerticalAlignment = {Stretch, Top, Center, Bottom}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ContentControl" mixed="true" type="ContentControlType">
    <xs:annotation>
      <xs:documentation>Class: ContentControl

Namespace: Avalonia.Controls

Base: TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, BorderBrush, BorderThickness, Classes, Clip, ClipToBounds, Clock, Content, ContentTemplate, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HorizontalAlignment, HorizontalContentAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Template, Transitions, UseLayoutRounding, VerticalAlignment, VerticalContentAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ContextMenuType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double ContextMenu.HorizontalOffset</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double ContextMenu.VerticalOffset</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PlacementAnchor" type="text">
            <xs:annotation>
              <xs:documentation>Property:

PopupAnchor ContextMenu.PlacementAnchor

enum PopupAnchor = {None, Top, Bottom, VerticalMask, Left, TopLeft, BottomLeft, Right, TopRight, BottomRight, HorizontalMask, AllMask}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PlacementConstraintAdjustment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

PopupPositionerConstraintAdjustment ContextMenu.PlacementConstraintAdjustment

enum PopupPositionerConstraintAdjustment = {None, SlideX, SlideY, FlipX, FlipY, ResizeY, ResizeY, All}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PlacementGravity" type="text">
            <xs:annotation>
              <xs:documentation>Property:

PopupGravity ContextMenu.PlacementGravity

enum PopupGravity = {None, Top, Bottom, Left, TopLeft, BottomLeft, Right, TopRight, BottomRight}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PlacementMode" type="text">
            <xs:annotation>
              <xs:documentation>Property:

PlacementMode ContextMenu.PlacementMode

enum PlacementMode = {Pointer, Bottom, Right, Left, Top, AnchorAndGravity}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="WindowManagerAddShadowHint" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool ContextMenu.WindowManagerAddShadowHint</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PlacementRect" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Rect? ContextMenu.PlacementRect</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PlacementTarget" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Control ContextMenu.PlacementTarget</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AutoScrollToSelectedItem" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool SelectingItemsControl.AutoScrollToSelectedItem</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SelectedIndex" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int SelectingItemsControl.SelectedIndex</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SelectedItem" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object SelectingItemsControl.SelectedItem</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsTextSearchEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool SelectingItemsControl.IsTextSearchEnabled</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Items" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IEnumerable ItemsControl.Items</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ItemsPanel" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ITemplate&amp;lt;IPanel&amp;gt; ItemsControl.ItemsPanel</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ItemTemplate" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IDataTemplate ItemsControl.ItemTemplate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Background" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush TemplatedControl.Background</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="BorderBrush" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush TemplatedControl.BorderBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="BorderThickness" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Thickness TemplatedControl.BorderThickness</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CornerRadius" type="text">
            <xs:annotation>
              <xs:documentation>Property:

CornerRadius TemplatedControl.CornerRadius</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FontFamily TemplatedControl.FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double TemplatedControl.FontSize</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FontStyle TemplatedControl.FontStyle

enum FontStyle = {Normal, Italic, Oblique}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FontWeight TemplatedControl.FontWeight

enum FontWeight = {Thin, ExtraLight, ExtraLight, Light, SemiLight, Normal, Normal, Medium, DemiBold, DemiBold, Bold, ExtraBold,  ...}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush TemplatedControl.Foreground</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Padding" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Thickness TemplatedControl.Padding</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Template" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IControlTemplate TemplatedControl.Template</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FocusAdorner" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ITemplate&amp;lt;IControl&amp;gt; Control.FocusAdorner</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextMenu" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ContextMenu Control.ContextMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextFlyout" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FlyoutBase Control.ContextFlyout</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Tag" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object Control.Tag</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Focusable" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.Focusable</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsEnabled</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Cursor" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Cursor InputElement.Cursor</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsHitTestVisible" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsHitTestVisible</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsTabStop" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsTabStop</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TabIndex" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int InputElement.TabIndex</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Width" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.Width</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Height" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.Height</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MinWidth" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MinWidth</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MaxWidth" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MaxWidth</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MinHeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MinHeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MaxHeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MaxHeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Margin" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Thickness Layoutable.Margin</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="HorizontalAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

HorizontalAlignment Layoutable.HorizontalAlignment

enum HorizontalAlignment = {Stretch, Left, Center, Right}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="VerticalAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

VerticalAlignment Layoutable.VerticalAlignment

enum VerticalAlignment = {Stretch, Top, Center, Bottom}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="UseLayoutRounding" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Layoutable.UseLayoutRounding</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ClipToBounds" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Visual.ClipToBounds</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Clip" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Geometry Visual.Clip</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsVisible" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Visual.IsVisible</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Opacity" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Visual.Opacity</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="OpacityMask" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush Visual.OpacityMask</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RenderTransform" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ITransform Visual.RenderTransform</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RenderTransformOrigin" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RelativePoint Visual.RenderTransformOrigin</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ZIndex" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int Visual.ZIndex</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Name" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string StyledElement.Name</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Classes" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Classes StyledElement.Classes</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataContext" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object StyledElement.DataContext</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Resources" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IResourceDictionary StyledElement.Resources</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Clock" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IClock Animatable.Clock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Transitions" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Transitions Animatable.Transitions</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextMenuOpening" type="text">
            <xs:annotation>
              <xs:documentation>Event:

CancelEventHandler ContextMenu.ContextMenuOpening</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextMenuClosing" type="text">
            <xs:annotation>
              <xs:documentation>Event:

CancelEventHandler ContextMenu.ContextMenuClosing</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MenuOpened" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; MenuBase.MenuOpened</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MenuClosed" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; MenuBase.MenuClosed</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SelectionChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;SelectionChangedEventArgs&amp;gt; SelectingItemsControl.SelectionChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplateApplied" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TemplateAppliedEventArgs&amp;gt; TemplatedControl.TemplateApplied</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextRequested" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;ContextRequestedEventArgs&amp;gt; Control.ContextRequested</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="GotFocus" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;GotFocusEventArgs&amp;gt; InputElement.GotFocus</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="LostFocus" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.LostFocus</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="KeyDown" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;KeyEventArgs&amp;gt; InputElement.KeyDown</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="KeyUp" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;KeyEventArgs&amp;gt; InputElement.KeyUp</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInput" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputEventArgs&amp;gt; InputElement.TextInput</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInputMethodClientRequested" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputMethodClientRequestedEventArgs&amp;gt; InputElement.TextInputMethodClientRequested</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInputOptionsQuery" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputOptionsQueryEventArgs&amp;gt; InputElement.TextInputOptionsQuery</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerEnter" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerEnter</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerLeave" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerLeave</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerMoved" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerMoved</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerPressed" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerPressedEventArgs&amp;gt; InputElement.PointerPressed</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerReleased" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerReleasedEventArgs&amp;gt; InputElement.PointerReleased</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerCaptureLost" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerCaptureLostEventArgs&amp;gt; InputElement.PointerCaptureLost</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerWheelChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerWheelEventArgs&amp;gt; InputElement.PointerWheelChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Tapped" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.Tapped</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DoubleTapped" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.DoubleTapped</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="EffectiveViewportChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;EffectiveViewportChangedEventArgs&amp;gt; Layoutable.EffectiveViewportChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="LayoutUpdated" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler Layoutable.LayoutUpdated</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AttachedToVisualTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;VisualTreeAttachmentEventArgs&amp;gt; Visual.AttachedToVisualTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DetachedFromVisualTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;VisualTreeAttachmentEventArgs&amp;gt; Visual.DetachedFromVisualTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AttachedToLogicalTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;LogicalTreeAttachmentEventArgs&amp;gt; StyledElement.AttachedToLogicalTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DetachedFromLogicalTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;LogicalTreeAttachmentEventArgs&amp;gt; StyledElement.DetachedFromLogicalTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataContextChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler StyledElement.DataContextChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Initialized" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler StyledElement.Initialized</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ResourcesChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;ResourcesChangedEventArgs&amp;gt; StyledElement.ResourcesChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ContextMenu" mixed="true" type="ContextMenuType">
    <xs:annotation>
      <xs:documentation>Class: ContextMenu

Namespace: Avalonia.Controls

Base: MenuBase, SelectingItemsControl, ItemsControl, TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: AutoScrollToSelectedItem, Background, BorderBrush, BorderThickness, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HorizontalAlignment, HorizontalOffset, IsEnabled, IsHitTestVisible, IsTabStop, IsTextSearchEnabled, IsVisible, Item, Items, ItemsPanel, ItemTemplate, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, PlacementAnchor, PlacementConstraintAdjustment, PlacementGravity, PlacementMode, PlacementRect, PlacementTarget, RenderTransform, RenderTransformOrigin, Resources, SelectedIndex, SelectedItem, TabIndex, Tag, Template, Transitions, UseLayoutRounding, VerticalAlignment, VerticalOffset, Width, WindowManagerAddShadowHint, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextMenuClosing, ContextMenuOpening, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, MenuClosed, MenuOpened, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, SelectionChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ContextRequestedEventArgsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Handled" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool RoutedEventArgs.Handled</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RoutedEvent" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RoutedEvent RoutedEventArgs.RoutedEvent</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Route" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RoutingStrategies RoutedEventArgs.Route

enum RoutingStrategies = {Direct, Tunnel, Bubble}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Source" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IInteractive RoutedEventArgs.Source</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ContextRequestedEventArgs" mixed="true" type="ContextRequestedEventArgsType">
    <xs:annotation>
      <xs:documentation>Class: ContextRequestedEventArgs

Namespace: Avalonia.Controls

Base: RoutedEventArgs, EventArgs

Properties: Handled, Route, RoutedEvent, Source

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ControlType" mixed="true">
    <xs:complexContent>
      <xs:extension base="InputElementType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="FocusAdorner" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ITemplate&amp;lt;IControl&amp;gt; Control.FocusAdorner</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextMenu" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ContextMenu Control.ContextMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextFlyout" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FlyoutBase Control.ContextFlyout</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Tag" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object Control.Tag</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextRequested" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;ContextRequestedEventArgs&amp;gt; Control.ContextRequested</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="Control" mixed="true" type="ControlType">
    <xs:annotation>
      <xs:documentation>Class: Control

Namespace: Avalonia.Controls

Base: InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, Cursor, DataContext, Focusable, FocusAdorner, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ControlsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="ResetBehavior" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ResetBehavior AvaloniaList&amp;lt;IControl&amp;gt;.ResetBehavior

enum ResetBehavior = {Reset, Remove}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Validate" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Action&amp;lt;IControl&amp;gt; AvaloniaList&amp;lt;IControl&amp;gt;.Validate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IControl AvaloniaList&amp;lt;IControl&amp;gt;.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Capacity" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int AvaloniaList&amp;lt;IControl&amp;gt;.Capacity</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CollectionChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

NotifyCollectionChangedEventHandler AvaloniaList&amp;lt;IControl&amp;gt;.CollectionChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

PropertyChangedEventHandler AvaloniaList&amp;lt;IControl&amp;gt;.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="Controls" mixed="true" type="ControlsType">
    <xs:annotation>
      <xs:documentation>Class: Controls

Namespace: Avalonia.Controls

Base: AvaloniaList`1

Properties: Capacity, Item, ResetBehavior, Validate

Events: CollectionChanged, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="DataValidationErrorsType" mixed="true">
    <xs:complexContent>
      <xs:extension base="ContentControlType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Owner" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Control DataValidationErrors.Owner</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ErrorTemplate" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IDataTemplate DataValidationErrors.ErrorTemplate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="DataValidationErrors" mixed="true" type="DataValidationErrorsType">
    <xs:annotation>
      <xs:documentation>Class: DataValidationErrors

Namespace: Avalonia.Controls

Base: ContentControl, TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, BorderBrush, BorderThickness, Classes, Clip, ClipToBounds, Clock, Content, ContentTemplate, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, ErrorTemplate, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HorizontalAlignment, HorizontalContentAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Owner, Padding, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Template, Transitions, UseLayoutRounding, VerticalAlignment, VerticalContentAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="DatePickerType" mixed="true">
    <xs:complexContent>
      <xs:extension base="TemplatedControlType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DayFormat" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string DatePicker.DayFormat</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DayVisible" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool DatePicker.DayVisible</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Header" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object DatePicker.Header</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="HeaderTemplate" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IDataTemplate DatePicker.HeaderTemplate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MaxYear" type="text">
            <xs:annotation>
              <xs:documentation>Property:

DateTimeOffset DatePicker.MaxYear</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MinYear" type="text">
            <xs:annotation>
              <xs:documentation>Property:

DateTimeOffset DatePicker.MinYear</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MonthFormat" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string DatePicker.MonthFormat</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MonthVisible" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool DatePicker.MonthVisible</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="YearFormat" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string DatePicker.YearFormat</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="YearVisible" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool DatePicker.YearVisible</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SelectedDate" type="text">
            <xs:annotation>
              <xs:documentation>Property:

DateTimeOffset? DatePicker.SelectedDate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SelectedDateChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;DatePickerSelectedValueChangedEventArgs&amp;gt; DatePicker.SelectedDateChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="DatePicker" mixed="true" type="DatePickerType">
    <xs:annotation>
      <xs:documentation>Class: DatePicker

Namespace: Avalonia.Controls

Base: TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, BorderBrush, BorderThickness, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, DayFormat, DayVisible, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Header, HeaderTemplate, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MaxYear, MinHeight, MinWidth, MinYear, MonthFormat, MonthVisible, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, SelectedDate, TabIndex, Tag, Template, Transitions, UseLayoutRounding, VerticalAlignment, Width, YearFormat, YearVisible, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, SelectedDateChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="DatePickerPresenterType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Date" type="text">
            <xs:annotation>
              <xs:documentation>Property:

DateTimeOffset DatePickerPresenter.Date</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DayFormat" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string DatePickerPresenter.DayFormat</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DayVisible" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool DatePickerPresenter.DayVisible</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MaxYear" type="text">
            <xs:annotation>
              <xs:documentation>Property:

DateTimeOffset DatePickerPresenter.MaxYear</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MinYear" type="text">
            <xs:annotation>
              <xs:documentation>Property:

DateTimeOffset DatePickerPresenter.MinYear</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MonthFormat" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string DatePickerPresenter.MonthFormat</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MonthVisible" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool DatePickerPresenter.MonthVisible</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="YearFormat" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string DatePickerPresenter.YearFormat</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="YearVisible" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool DatePickerPresenter.YearVisible</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Background" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush TemplatedControl.Background</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="BorderBrush" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush TemplatedControl.BorderBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="BorderThickness" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Thickness TemplatedControl.BorderThickness</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CornerRadius" type="text">
            <xs:annotation>
              <xs:documentation>Property:

CornerRadius TemplatedControl.CornerRadius</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FontFamily TemplatedControl.FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double TemplatedControl.FontSize</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FontStyle TemplatedControl.FontStyle

enum FontStyle = {Normal, Italic, Oblique}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FontWeight TemplatedControl.FontWeight

enum FontWeight = {Thin, ExtraLight, ExtraLight, Light, SemiLight, Normal, Normal, Medium, DemiBold, DemiBold, Bold, ExtraBold,  ...}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush TemplatedControl.Foreground</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Padding" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Thickness TemplatedControl.Padding</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Template" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IControlTemplate TemplatedControl.Template</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FocusAdorner" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ITemplate&amp;lt;IControl&amp;gt; Control.FocusAdorner</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextMenu" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ContextMenu Control.ContextMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextFlyout" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FlyoutBase Control.ContextFlyout</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Tag" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object Control.Tag</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Focusable" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.Focusable</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsEnabled</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Cursor" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Cursor InputElement.Cursor</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsHitTestVisible" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsHitTestVisible</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsTabStop" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsTabStop</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TabIndex" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int InputElement.TabIndex</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Width" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.Width</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Height" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.Height</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MinWidth" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MinWidth</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MaxWidth" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MaxWidth</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MinHeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MinHeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MaxHeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MaxHeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Margin" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Thickness Layoutable.Margin</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="HorizontalAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

HorizontalAlignment Layoutable.HorizontalAlignment

enum HorizontalAlignment = {Stretch, Left, Center, Right}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="VerticalAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

VerticalAlignment Layoutable.VerticalAlignment

enum VerticalAlignment = {Stretch, Top, Center, Bottom}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="UseLayoutRounding" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Layoutable.UseLayoutRounding</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ClipToBounds" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Visual.ClipToBounds</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Clip" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Geometry Visual.Clip</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsVisible" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Visual.IsVisible</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Opacity" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Visual.Opacity</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="OpacityMask" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush Visual.OpacityMask</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RenderTransform" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ITransform Visual.RenderTransform</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RenderTransformOrigin" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RelativePoint Visual.RenderTransformOrigin</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ZIndex" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int Visual.ZIndex</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Name" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string StyledElement.Name</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Classes" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Classes StyledElement.Classes</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataContext" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object StyledElement.DataContext</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Resources" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IResourceDictionary StyledElement.Resources</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Clock" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IClock Animatable.Clock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Transitions" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Transitions Animatable.Transitions</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Confirmed" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler PickerPresenterBase.Confirmed</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Dismissed" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler PickerPresenterBase.Dismissed</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplateApplied" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TemplateAppliedEventArgs&amp;gt; TemplatedControl.TemplateApplied</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextRequested" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;ContextRequestedEventArgs&amp;gt; Control.ContextRequested</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="GotFocus" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;GotFocusEventArgs&amp;gt; InputElement.GotFocus</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="LostFocus" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.LostFocus</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="KeyDown" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;KeyEventArgs&amp;gt; InputElement.KeyDown</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="KeyUp" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;KeyEventArgs&amp;gt; InputElement.KeyUp</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInput" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputEventArgs&amp;gt; InputElement.TextInput</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInputMethodClientRequested" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputMethodClientRequestedEventArgs&amp;gt; InputElement.TextInputMethodClientRequested</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInputOptionsQuery" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputOptionsQueryEventArgs&amp;gt; InputElement.TextInputOptionsQuery</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerEnter" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerEnter</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerLeave" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerLeave</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerMoved" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerMoved</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerPressed" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerPressedEventArgs&amp;gt; InputElement.PointerPressed</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerReleased" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerReleasedEventArgs&amp;gt; InputElement.PointerReleased</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerCaptureLost" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerCaptureLostEventArgs&amp;gt; InputElement.PointerCaptureLost</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerWheelChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerWheelEventArgs&amp;gt; InputElement.PointerWheelChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Tapped" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.Tapped</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DoubleTapped" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.DoubleTapped</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="EffectiveViewportChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;EffectiveViewportChangedEventArgs&amp;gt; Layoutable.EffectiveViewportChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="LayoutUpdated" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler Layoutable.LayoutUpdated</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AttachedToVisualTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;VisualTreeAttachmentEventArgs&amp;gt; Visual.AttachedToVisualTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DetachedFromVisualTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;VisualTreeAttachmentEventArgs&amp;gt; Visual.DetachedFromVisualTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AttachedToLogicalTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;LogicalTreeAttachmentEventArgs&amp;gt; StyledElement.AttachedToLogicalTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DetachedFromLogicalTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;LogicalTreeAttachmentEventArgs&amp;gt; StyledElement.DetachedFromLogicalTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataContextChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler StyledElement.DataContextChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Initialized" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler StyledElement.Initialized</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ResourcesChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;ResourcesChangedEventArgs&amp;gt; StyledElement.ResourcesChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="DatePickerPresenter" mixed="true" type="DatePickerPresenterType">
    <xs:annotation>
      <xs:documentation>Class: DatePickerPresenter

Namespace: Avalonia.Controls

Base: PickerPresenterBase, TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, BorderBrush, BorderThickness, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Date, DayFormat, DayVisible, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MaxYear, MinHeight, MinWidth, MinYear, MonthFormat, MonthVisible, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Template, Transitions, UseLayoutRounding, VerticalAlignment, Width, YearFormat, YearVisible, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, Confirmed, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, Dismissed, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="DatePickerSelectedValueChangedEventArgsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="DatePickerSelectedValueChangedEventArgs" mixed="true" type="DatePickerSelectedValueChangedEventArgsType">
    <xs:annotation>
      <xs:documentation>Class: DatePickerSelectedValueChangedEventArgs

Namespace: Avalonia.Controls

Base: 

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="TimePickerType" mixed="true">
    <xs:complexContent>
      <xs:extension base="TemplatedControlType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="MinuteIncrement" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int TimePicker.MinuteIncrement</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Header" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object TimePicker.Header</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="HeaderTemplate" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IDataTemplate TimePicker.HeaderTemplate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ClockIdentifier" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string TimePicker.ClockIdentifier</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SelectedTime" type="text">
            <xs:annotation>
              <xs:documentation>Property:

TimeSpan? TimePicker.SelectedTime</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SelectedTimeChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TimePickerSelectedValueChangedEventArgs&amp;gt; TimePicker.SelectedTimeChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="TimePicker" mixed="true" type="TimePickerType">
    <xs:annotation>
      <xs:documentation>Class: TimePicker

Namespace: Avalonia.Controls

Base: TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, BorderBrush, BorderThickness, Classes, Clip, ClipToBounds, Clock, ClockIdentifier, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Header, HeaderTemplate, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinuteIncrement, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, SelectedTime, TabIndex, Tag, Template, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, SelectedTimeChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="TimePickerPresenterType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MinuteIncrement" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int TimePickerPresenter.MinuteIncrement</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ClockIdentifier" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string TimePickerPresenter.ClockIdentifier</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Time" type="text">
            <xs:annotation>
              <xs:documentation>Property:

TimeSpan TimePickerPresenter.Time</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Background" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush TemplatedControl.Background</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="BorderBrush" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush TemplatedControl.BorderBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="BorderThickness" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Thickness TemplatedControl.BorderThickness</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CornerRadius" type="text">
            <xs:annotation>
              <xs:documentation>Property:

CornerRadius TemplatedControl.CornerRadius</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FontFamily TemplatedControl.FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double TemplatedControl.FontSize</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FontStyle TemplatedControl.FontStyle

enum FontStyle = {Normal, Italic, Oblique}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FontWeight TemplatedControl.FontWeight

enum FontWeight = {Thin, ExtraLight, ExtraLight, Light, SemiLight, Normal, Normal, Medium, DemiBold, DemiBold, Bold, ExtraBold,  ...}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush TemplatedControl.Foreground</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Padding" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Thickness TemplatedControl.Padding</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Template" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IControlTemplate TemplatedControl.Template</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FocusAdorner" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ITemplate&amp;lt;IControl&amp;gt; Control.FocusAdorner</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextMenu" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ContextMenu Control.ContextMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextFlyout" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FlyoutBase Control.ContextFlyout</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Tag" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object Control.Tag</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Focusable" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.Focusable</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsEnabled</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Cursor" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Cursor InputElement.Cursor</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsHitTestVisible" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsHitTestVisible</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsTabStop" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsTabStop</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TabIndex" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int InputElement.TabIndex</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Width" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.Width</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Height" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.Height</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MinWidth" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MinWidth</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MaxWidth" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MaxWidth</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MinHeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MinHeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MaxHeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MaxHeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Margin" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Thickness Layoutable.Margin</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="HorizontalAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

HorizontalAlignment Layoutable.HorizontalAlignment

enum HorizontalAlignment = {Stretch, Left, Center, Right}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="VerticalAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

VerticalAlignment Layoutable.VerticalAlignment

enum VerticalAlignment = {Stretch, Top, Center, Bottom}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="UseLayoutRounding" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Layoutable.UseLayoutRounding</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ClipToBounds" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Visual.ClipToBounds</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Clip" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Geometry Visual.Clip</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsVisible" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Visual.IsVisible</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Opacity" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Visual.Opacity</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="OpacityMask" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush Visual.OpacityMask</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RenderTransform" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ITransform Visual.RenderTransform</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RenderTransformOrigin" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RelativePoint Visual.RenderTransformOrigin</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ZIndex" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int Visual.ZIndex</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Name" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string StyledElement.Name</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Classes" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Classes StyledElement.Classes</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataContext" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object StyledElement.DataContext</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Resources" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IResourceDictionary StyledElement.Resources</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Clock" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IClock Animatable.Clock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Transitions" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Transitions Animatable.Transitions</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Confirmed" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler PickerPresenterBase.Confirmed</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Dismissed" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler PickerPresenterBase.Dismissed</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplateApplied" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TemplateAppliedEventArgs&amp;gt; TemplatedControl.TemplateApplied</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextRequested" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;ContextRequestedEventArgs&amp;gt; Control.ContextRequested</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="GotFocus" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;GotFocusEventArgs&amp;gt; InputElement.GotFocus</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="LostFocus" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.LostFocus</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="KeyDown" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;KeyEventArgs&amp;gt; InputElement.KeyDown</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="KeyUp" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;KeyEventArgs&amp;gt; InputElement.KeyUp</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInput" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputEventArgs&amp;gt; InputElement.TextInput</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInputMethodClientRequested" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputMethodClientRequestedEventArgs&amp;gt; InputElement.TextInputMethodClientRequested</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInputOptionsQuery" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputOptionsQueryEventArgs&amp;gt; InputElement.TextInputOptionsQuery</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerEnter" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerEnter</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerLeave" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerLeave</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerMoved" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerMoved</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerPressed" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerPressedEventArgs&amp;gt; InputElement.PointerPressed</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerReleased" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerReleasedEventArgs&amp;gt; InputElement.PointerReleased</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerCaptureLost" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerCaptureLostEventArgs&amp;gt; InputElement.PointerCaptureLost</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerWheelChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerWheelEventArgs&amp;gt; InputElement.PointerWheelChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Tapped" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.Tapped</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DoubleTapped" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.DoubleTapped</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="EffectiveViewportChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;EffectiveViewportChangedEventArgs&amp;gt; Layoutable.EffectiveViewportChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="LayoutUpdated" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler Layoutable.LayoutUpdated</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AttachedToVisualTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;VisualTreeAttachmentEventArgs&amp;gt; Visual.AttachedToVisualTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DetachedFromVisualTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;VisualTreeAttachmentEventArgs&amp;gt; Visual.DetachedFromVisualTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AttachedToLogicalTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;LogicalTreeAttachmentEventArgs&amp;gt; StyledElement.AttachedToLogicalTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DetachedFromLogicalTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;LogicalTreeAttachmentEventArgs&amp;gt; StyledElement.DetachedFromLogicalTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataContextChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler StyledElement.DataContextChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Initialized" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler StyledElement.Initialized</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ResourcesChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;ResourcesChangedEventArgs&amp;gt; StyledElement.ResourcesChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="TimePickerPresenter" mixed="true" type="TimePickerPresenterType">
    <xs:annotation>
      <xs:documentation>Class: TimePickerPresenter

Namespace: Avalonia.Controls

Base: PickerPresenterBase, TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, BorderBrush, BorderThickness, Classes, Clip, ClipToBounds, Clock, ClockIdentifier, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinuteIncrement, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Template, Time, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, Confirmed, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, Dismissed, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="TimePickerSelectedValueChangedEventArgsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="TimePickerSelectedValueChangedEventArgs" mixed="true" type="TimePickerSelectedValueChangedEventArgsType">
    <xs:annotation>
      <xs:documentation>Class: TimePickerSelectedValueChangedEventArgs

Namespace: Avalonia.Controls

Base: 

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="DecoratorType" mixed="true">
    <xs:complexContent>
      <xs:extension base="ControlType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Child" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IControl Decorator.Child</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Padding" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Thickness Decorator.Padding</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="Decorator" mixed="true" type="DecoratorType">
    <xs:annotation>
      <xs:documentation>Class: Decorator

Namespace: Avalonia.Controls

Base: Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Child, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, Cursor, DataContext, Focusable, FocusAdorner, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="DockPanelType" mixed="true">
    <xs:complexContent>
      <xs:extension base="PanelType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="LastChildFill" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool DockPanel.LastChildFill</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="DockPanel" mixed="true" type="DockPanelType">
    <xs:annotation>
      <xs:documentation>Class: DockPanel

Namespace: Avalonia.Controls

Base: Panel, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, Cursor, DataContext, Focusable, FocusAdorner, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, LastChildFill, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="DrawingPresenterType" mixed="true">
    <xs:complexContent>
      <xs:extension base="ControlType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Drawing" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Drawing DrawingPresenter.Drawing</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Stretch" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Stretch DrawingPresenter.Stretch

enum Stretch = {None, Fill, Uniform, UniformToFill}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="DrawingPresenter" mixed="true" type="DrawingPresenterType">
    <xs:annotation>
      <xs:documentation>Class: DrawingPresenter

Namespace: Avalonia.Controls

Base: Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, Cursor, DataContext, Drawing, Focusable, FocusAdorner, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, RenderTransform, RenderTransformOrigin, Resources, Stretch, TabIndex, Tag, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="DropDownType" mixed="true">
    <xs:complexContent>
      <xs:extension base="ComboBoxType">
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="DropDown" mixed="true" type="DropDownType">
    <xs:annotation>
      <xs:documentation>Class: DropDown

Namespace: Avalonia.Controls

Base: ComboBox, SelectingItemsControl, ItemsControl, TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: AutoScrollToSelectedItem, Background, BorderBrush, BorderThickness, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HorizontalAlignment, HorizontalContentAlignment, IsDropDownOpen, IsEnabled, IsHitTestVisible, IsTabStop, IsTextSearchEnabled, IsVisible, Item, Items, ItemsPanel, ItemTemplate, Margin, MaxDropDownHeight, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, PlaceholderForeground, PlaceholderText, RenderTransform, RenderTransformOrigin, Resources, SelectedIndex, SelectedItem, TabIndex, Tag, Template, Transitions, UseLayoutRounding, VerticalAlignment, VerticalContentAlignment, VirtualizationMode, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, SelectionChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="DropDownItemType" mixed="true">
    <xs:complexContent>
      <xs:extension base="ComboBoxItemType">
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="DropDownItem" mixed="true" type="DropDownItemType">
    <xs:annotation>
      <xs:documentation>Class: DropDownItem

Namespace: Avalonia.Controls

Base: ComboBoxItem, ListBoxItem, ContentControl, TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, BorderBrush, BorderThickness, Classes, Clip, ClipToBounds, Clock, Content, ContentTemplate, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HorizontalAlignment, HorizontalContentAlignment, IsEnabled, IsHitTestVisible, IsSelected, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Template, Transitions, UseLayoutRounding, VerticalAlignment, VerticalContentAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ExpanderType" mixed="true">
    <xs:complexContent>
      <xs:extension base="HeaderedContentControlType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="ContentTransition" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IPageTransition Expander.ContentTransition</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ExpandDirection" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ExpandDirection Expander.ExpandDirection

enum ExpandDirection = {Down, Up, Left, Right}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsExpanded" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Expander.IsExpanded</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="Expander" mixed="true" type="ExpanderType">
    <xs:annotation>
      <xs:documentation>Class: Expander

Namespace: Avalonia.Controls

Base: HeaderedContentControl, ContentControl, TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, BorderBrush, BorderThickness, Classes, Clip, ClipToBounds, Clock, Content, ContentTemplate, ContentTransition, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, ExpandDirection, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Header, HeaderTemplate, Height, HorizontalAlignment, HorizontalContentAlignment, IsEnabled, IsExpanded, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Template, Transitions, UseLayoutRounding, VerticalAlignment, VerticalContentAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ExperimentalAcrylicBorderType" mixed="true">
    <xs:complexContent>
      <xs:extension base="DecoratorType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="CornerRadius" type="text">
            <xs:annotation>
              <xs:documentation>Property:

CornerRadius ExperimentalAcrylicBorder.CornerRadius</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Material" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ExperimentalAcrylicMaterial ExperimentalAcrylicBorder.Material</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ExperimentalAcrylicBorder" mixed="true" type="ExperimentalAcrylicBorderType">
    <xs:annotation>
      <xs:documentation>Class: ExperimentalAcrylicBorder

Namespace: Avalonia.Controls

Base: Decorator, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Child, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Focusable, FocusAdorner, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, Material, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="FlyoutType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Content" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object Flyout.Content</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Placement" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FlyoutPlacementMode FlyoutBase.Placement

enum FlyoutPlacementMode = {Top, Bottom, Left, Right, TopEdgeAlignedLeft, TopEdgeAlignedRight, BottomEdgeAlignedLeft, BottomEdgeAlignedRight, LeftEdgeAlignedTop, LeftEdgeAlignedBottom, RightEdgeAlignedTop, RightEdgeAlignedBottom,  ...}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ShowMode" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FlyoutShowMode FlyoutBase.ShowMode

enum FlyoutShowMode = {Standard, Transient, TransientWithDismissOnPointerMoveAway}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Closed" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler FlyoutBase.Closed</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Closing" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;CancelEventArgs&amp;gt; FlyoutBase.Closing</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Opened" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler FlyoutBase.Opened</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Opening" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler FlyoutBase.Opening</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="Flyout" mixed="true" type="FlyoutType">
    <xs:annotation>
      <xs:documentation>Class: Flyout

Namespace: Avalonia.Controls

Base: FlyoutBase, AvaloniaObject

Properties: Content, Item, Placement, ShowMode

Events: Closed, Closing, Opened, Opening, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="FlyoutPresenterType" mixed="true">
    <xs:complexContent>
      <xs:extension base="ContentControlType">
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="FlyoutPresenter" mixed="true" type="FlyoutPresenterType">
    <xs:annotation>
      <xs:documentation>Class: FlyoutPresenter

Namespace: Avalonia.Controls

Base: ContentControl, TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, BorderBrush, BorderThickness, Classes, Clip, ClipToBounds, Clock, Content, ContentTemplate, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HorizontalAlignment, HorizontalContentAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Template, Transitions, UseLayoutRounding, VerticalAlignment, VerticalContentAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="MenuFlyoutType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Items" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IEnumerable MenuFlyout.Items</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ItemTemplate" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IDataTemplate MenuFlyout.ItemTemplate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Placement" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FlyoutPlacementMode FlyoutBase.Placement

enum FlyoutPlacementMode = {Top, Bottom, Left, Right, TopEdgeAlignedLeft, TopEdgeAlignedRight, BottomEdgeAlignedLeft, BottomEdgeAlignedRight, LeftEdgeAlignedTop, LeftEdgeAlignedBottom, RightEdgeAlignedTop, RightEdgeAlignedBottom,  ...}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ShowMode" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FlyoutShowMode FlyoutBase.ShowMode

enum FlyoutShowMode = {Standard, Transient, TransientWithDismissOnPointerMoveAway}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Closed" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler FlyoutBase.Closed</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Closing" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;CancelEventArgs&amp;gt; FlyoutBase.Closing</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Opened" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler FlyoutBase.Opened</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Opening" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler FlyoutBase.Opening</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="MenuFlyout" mixed="true" type="MenuFlyoutType">
    <xs:annotation>
      <xs:documentation>Class: MenuFlyout

Namespace: Avalonia.Controls

Base: FlyoutBase, AvaloniaObject

Properties: Item, Items, ItemTemplate, Placement, ShowMode

Events: Closed, Closing, Opened, Opening, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="MenuFlyoutPresenterType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CornerRadius" type="text">
            <xs:annotation>
              <xs:documentation>Property:

CornerRadius MenuFlyoutPresenter.CornerRadius</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AutoScrollToSelectedItem" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool SelectingItemsControl.AutoScrollToSelectedItem</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SelectedIndex" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int SelectingItemsControl.SelectedIndex</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SelectedItem" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object SelectingItemsControl.SelectedItem</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsTextSearchEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool SelectingItemsControl.IsTextSearchEnabled</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Items" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IEnumerable ItemsControl.Items</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ItemsPanel" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ITemplate&amp;lt;IPanel&amp;gt; ItemsControl.ItemsPanel</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ItemTemplate" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IDataTemplate ItemsControl.ItemTemplate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Background" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush TemplatedControl.Background</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="BorderBrush" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush TemplatedControl.BorderBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="BorderThickness" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Thickness TemplatedControl.BorderThickness</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FontFamily TemplatedControl.FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double TemplatedControl.FontSize</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FontStyle TemplatedControl.FontStyle

enum FontStyle = {Normal, Italic, Oblique}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FontWeight TemplatedControl.FontWeight

enum FontWeight = {Thin, ExtraLight, ExtraLight, Light, SemiLight, Normal, Normal, Medium, DemiBold, DemiBold, Bold, ExtraBold,  ...}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush TemplatedControl.Foreground</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Padding" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Thickness TemplatedControl.Padding</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Template" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IControlTemplate TemplatedControl.Template</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FocusAdorner" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ITemplate&amp;lt;IControl&amp;gt; Control.FocusAdorner</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextMenu" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ContextMenu Control.ContextMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextFlyout" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FlyoutBase Control.ContextFlyout</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Tag" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object Control.Tag</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Focusable" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.Focusable</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsEnabled</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Cursor" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Cursor InputElement.Cursor</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsHitTestVisible" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsHitTestVisible</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsTabStop" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsTabStop</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TabIndex" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int InputElement.TabIndex</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Width" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.Width</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Height" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.Height</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MinWidth" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MinWidth</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MaxWidth" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MaxWidth</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MinHeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MinHeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MaxHeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MaxHeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Margin" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Thickness Layoutable.Margin</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="HorizontalAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

HorizontalAlignment Layoutable.HorizontalAlignment

enum HorizontalAlignment = {Stretch, Left, Center, Right}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="VerticalAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

VerticalAlignment Layoutable.VerticalAlignment

enum VerticalAlignment = {Stretch, Top, Center, Bottom}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="UseLayoutRounding" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Layoutable.UseLayoutRounding</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ClipToBounds" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Visual.ClipToBounds</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Clip" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Geometry Visual.Clip</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsVisible" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Visual.IsVisible</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Opacity" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Visual.Opacity</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="OpacityMask" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush Visual.OpacityMask</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RenderTransform" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ITransform Visual.RenderTransform</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RenderTransformOrigin" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RelativePoint Visual.RenderTransformOrigin</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ZIndex" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int Visual.ZIndex</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Name" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string StyledElement.Name</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Classes" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Classes StyledElement.Classes</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataContext" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object StyledElement.DataContext</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Resources" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IResourceDictionary StyledElement.Resources</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Clock" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IClock Animatable.Clock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Transitions" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Transitions Animatable.Transitions</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MenuOpened" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; MenuBase.MenuOpened</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MenuClosed" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; MenuBase.MenuClosed</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SelectionChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;SelectionChangedEventArgs&amp;gt; SelectingItemsControl.SelectionChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplateApplied" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TemplateAppliedEventArgs&amp;gt; TemplatedControl.TemplateApplied</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextRequested" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;ContextRequestedEventArgs&amp;gt; Control.ContextRequested</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="GotFocus" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;GotFocusEventArgs&amp;gt; InputElement.GotFocus</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="LostFocus" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.LostFocus</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="KeyDown" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;KeyEventArgs&amp;gt; InputElement.KeyDown</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="KeyUp" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;KeyEventArgs&amp;gt; InputElement.KeyUp</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInput" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputEventArgs&amp;gt; InputElement.TextInput</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInputMethodClientRequested" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputMethodClientRequestedEventArgs&amp;gt; InputElement.TextInputMethodClientRequested</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInputOptionsQuery" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputOptionsQueryEventArgs&amp;gt; InputElement.TextInputOptionsQuery</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerEnter" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerEnter</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerLeave" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerLeave</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerMoved" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerMoved</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerPressed" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerPressedEventArgs&amp;gt; InputElement.PointerPressed</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerReleased" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerReleasedEventArgs&amp;gt; InputElement.PointerReleased</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerCaptureLost" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerCaptureLostEventArgs&amp;gt; InputElement.PointerCaptureLost</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerWheelChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerWheelEventArgs&amp;gt; InputElement.PointerWheelChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Tapped" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.Tapped</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DoubleTapped" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.DoubleTapped</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="EffectiveViewportChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;EffectiveViewportChangedEventArgs&amp;gt; Layoutable.EffectiveViewportChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="LayoutUpdated" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler Layoutable.LayoutUpdated</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AttachedToVisualTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;VisualTreeAttachmentEventArgs&amp;gt; Visual.AttachedToVisualTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DetachedFromVisualTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;VisualTreeAttachmentEventArgs&amp;gt; Visual.DetachedFromVisualTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AttachedToLogicalTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;LogicalTreeAttachmentEventArgs&amp;gt; StyledElement.AttachedToLogicalTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DetachedFromLogicalTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;LogicalTreeAttachmentEventArgs&amp;gt; StyledElement.DetachedFromLogicalTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataContextChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler StyledElement.DataContextChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Initialized" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler StyledElement.Initialized</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ResourcesChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;ResourcesChangedEventArgs&amp;gt; StyledElement.ResourcesChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="MenuFlyoutPresenter" mixed="true" type="MenuFlyoutPresenterType">
    <xs:annotation>
      <xs:documentation>Class: MenuFlyoutPresenter

Namespace: Avalonia.Controls

Base: MenuBase, SelectingItemsControl, ItemsControl, TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: AutoScrollToSelectedItem, Background, BorderBrush, BorderThickness, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsTextSearchEnabled, IsVisible, Item, Items, ItemsPanel, ItemTemplate, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, SelectedIndex, SelectedItem, TabIndex, Tag, Template, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, MenuClosed, MenuOpened, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, SelectionChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="GridType" mixed="true">
    <xs:complexContent>
      <xs:extension base="PanelType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="ShowGridLines" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Grid.ShowGridLines</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ColumnDefinitions" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ColumnDefinitions Grid.ColumnDefinitions</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RowDefinitions" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RowDefinitions Grid.RowDefinitions</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="Grid" mixed="true" type="GridType">
    <xs:annotation>
      <xs:documentation>Class: Grid

Namespace: Avalonia.Controls

Base: Panel, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, Classes, Clip, ClipToBounds, Clock, ColumnDefinitions, ContextFlyout, ContextMenu, Cursor, DataContext, Focusable, FocusAdorner, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, RenderTransform, RenderTransformOrigin, Resources, RowDefinitions, ShowGridLines, TabIndex, Tag, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="GridSplitterType" mixed="true">
    <xs:complexContent>
      <xs:extension base="ThumbType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="ResizeDirection" type="text">
            <xs:annotation>
              <xs:documentation>Property:

GridResizeDirection GridSplitter.ResizeDirection

enum GridResizeDirection = {Auto, Columns, Rows}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ResizeBehavior" type="text">
            <xs:annotation>
              <xs:documentation>Property:

GridResizeBehavior GridSplitter.ResizeBehavior

enum GridResizeBehavior = {BasedOnAlignment, CurrentAndNext, PreviousAndCurrent, PreviousAndNext}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ShowsPreview" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool GridSplitter.ShowsPreview</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="KeyboardIncrement" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double GridSplitter.KeyboardIncrement</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DragIncrement" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double GridSplitter.DragIncrement</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PreviewContent" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ITemplate&amp;lt;IControl&amp;gt; GridSplitter.PreviewContent</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="GridSplitter" mixed="true" type="GridSplitterType">
    <xs:annotation>
      <xs:documentation>Class: GridSplitter

Namespace: Avalonia.Controls

Base: Thumb, TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, BorderBrush, BorderThickness, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, DragIncrement, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, KeyboardIncrement, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, PreviewContent, RenderTransform, RenderTransformOrigin, ResizeBehavior, ResizeDirection, Resources, ShowsPreview, TabIndex, Tag, Template, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, DragCompleted, DragDelta, DragStarted, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="HotKeyManagerType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="HotKeyManager" mixed="true" type="HotKeyManagerType">
    <xs:annotation>
      <xs:documentation>Class: HotKeyManager

Namespace: Avalonia.Controls

Base: 

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ImageType" mixed="true">
    <xs:complexContent>
      <xs:extension base="ControlType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Source" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IImage Image.Source</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Stretch" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Stretch Image.Stretch

enum Stretch = {None, Fill, Uniform, UniformToFill}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="StretchDirection" type="text">
            <xs:annotation>
              <xs:documentation>Property:

StretchDirection Image.StretchDirection

enum StretchDirection = {UpOnly, DownOnly, Both}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="Image" mixed="true" type="ImageType">
    <xs:annotation>
      <xs:documentation>Class: Image

Namespace: Avalonia.Controls

Base: Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, Cursor, DataContext, Focusable, FocusAdorner, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, RenderTransform, RenderTransformOrigin, Resources, Source, Stretch, StretchDirection, TabIndex, Tag, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ItemsControlType" mixed="true">
    <xs:complexContent>
      <xs:extension base="TemplatedControlType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Items" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IEnumerable ItemsControl.Items</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ItemsPanel" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ITemplate&amp;lt;IPanel&amp;gt; ItemsControl.ItemsPanel</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ItemTemplate" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IDataTemplate ItemsControl.ItemTemplate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ItemsControl" mixed="true" type="ItemsControlType">
    <xs:annotation>
      <xs:documentation>Class: ItemsControl

Namespace: Avalonia.Controls

Base: TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, BorderBrush, BorderThickness, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Items, ItemsPanel, ItemTemplate, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Template, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ItemsSourceViewType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="CollectionChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

NotifyCollectionChangedEventHandler ItemsSourceView.CollectionChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ItemsSourceView" mixed="true" type="ItemsSourceViewType">
    <xs:annotation>
      <xs:documentation>Class: ItemsSourceView

Namespace: Avalonia.Controls

Base: 

Properties: {none}

Events: CollectionChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="LabelType" mixed="true">
    <xs:complexContent>
      <xs:extension base="ContentControlType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Target" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IInputElement Label.Target</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="Label" mixed="true" type="LabelType">
    <xs:annotation>
      <xs:documentation>Class: Label

Namespace: Avalonia.Controls

Base: ContentControl, TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, BorderBrush, BorderThickness, Classes, Clip, ClipToBounds, Clock, Content, ContentTemplate, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HorizontalAlignment, HorizontalContentAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Target, Template, Transitions, UseLayoutRounding, VerticalAlignment, VerticalContentAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="LayoutTransformControlType" mixed="true">
    <xs:complexContent>
      <xs:extension base="DecoratorType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="LayoutTransform" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ITransform LayoutTransformControl.LayoutTransform</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="UseRenderTransform" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool LayoutTransformControl.UseRenderTransform</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="LayoutTransformControl" mixed="true" type="LayoutTransformControlType">
    <xs:annotation>
      <xs:documentation>Class: LayoutTransformControl

Namespace: Avalonia.Controls

Base: Decorator, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Child, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, Cursor, DataContext, Focusable, FocusAdorner, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, LayoutTransform, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Transitions, UseLayoutRounding, UseRenderTransform, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ListBoxType" mixed="true">
    <xs:complexContent>
      <xs:extension base="SelectingItemsControlType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="SelectedItems" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IList ListBox.SelectedItems</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Selection" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ISelectionModel ListBox.Selection</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SelectionMode" type="text">
            <xs:annotation>
              <xs:documentation>Property:

SelectionMode ListBox.SelectionMode

enum SelectionMode = {Single, Multiple, Toggle, AlwaysSelected}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="VirtualizationMode" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ItemVirtualizationMode ListBox.VirtualizationMode

enum ItemVirtualizationMode = {None, Simple}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ListBox" mixed="true" type="ListBoxType">
    <xs:annotation>
      <xs:documentation>Class: ListBox

Namespace: Avalonia.Controls

Base: SelectingItemsControl, ItemsControl, TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: AutoScrollToSelectedItem, Background, BorderBrush, BorderThickness, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsTextSearchEnabled, IsVisible, Item, Items, ItemsPanel, ItemTemplate, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, SelectedIndex, SelectedItem, SelectedItems, Selection, SelectionMode, TabIndex, Tag, Template, Transitions, UseLayoutRounding, VerticalAlignment, VirtualizationMode, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, SelectionChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ListBoxItemType" mixed="true">
    <xs:complexContent>
      <xs:extension base="ContentControlType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="IsSelected" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool ListBoxItem.IsSelected</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ListBoxItem" mixed="true" type="ListBoxItemType">
    <xs:annotation>
      <xs:documentation>Class: ListBoxItem

Namespace: Avalonia.Controls

Base: ContentControl, TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, BorderBrush, BorderThickness, Classes, Clip, ClipToBounds, Clock, Content, ContentTemplate, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HorizontalAlignment, HorizontalContentAlignment, IsEnabled, IsHitTestVisible, IsSelected, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Template, Transitions, UseLayoutRounding, VerticalAlignment, VerticalContentAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="MaskedTextBoxType" mixed="true">
    <xs:complexContent>
      <xs:extension base="TextBoxType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="AsciiOnly" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool MaskedTextBox.AsciiOnly</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Culture" type="text">
            <xs:annotation>
              <xs:documentation>Property:

CultureInfo MaskedTextBox.Culture</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="HidePromptOnLeave" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool MaskedTextBox.HidePromptOnLeave</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Mask" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string MaskedTextBox.Mask</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PromptChar" type="text">
            <xs:annotation>
              <xs:documentation>Property:

char MaskedTextBox.PromptChar</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ResetOnPrompt" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool MaskedTextBox.ResetOnPrompt</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ResetOnSpace" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool MaskedTextBox.ResetOnSpace</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="MaskedTextBox" mixed="true" type="MaskedTextBoxType">
    <xs:annotation>
      <xs:documentation>Class: MaskedTextBox

Namespace: Avalonia.Controls

Base: TextBox, TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: AcceptsReturn, AcceptsTab, AsciiOnly, Background, BorderBrush, BorderThickness, CaretBrush, CaretIndex, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, CornerRadius, Culture, Cursor, DataContext, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HidePromptOnLeave, HorizontalAlignment, HorizontalContentAlignment, InnerLeftContent, InnerRightContent, IsEnabled, IsHitTestVisible, IsReadOnly, IsTabStop, IsUndoEnabled, IsVisible, Item, Margin, Mask, MaxHeight, MaxLength, MaxWidth, MinHeight, MinWidth, Name, NewLine, Opacity, OpacityMask, Padding, PasswordChar, PromptChar, RenderTransform, RenderTransformOrigin, ResetOnPrompt, ResetOnSpace, Resources, RevealPassword, SelectedText, SelectionBrush, SelectionEnd, SelectionForegroundBrush, SelectionStart, TabIndex, Tag, Template, Text, TextAlignment, TextWrapping, Transitions, UndoLimit, UseFloatingWatermark, UseLayoutRounding, VerticalAlignment, VerticalContentAlignment, Watermark, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, CopyingToClipboard, CuttingToClipboard, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PastingFromClipboard, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="MenuType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AutoScrollToSelectedItem" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool SelectingItemsControl.AutoScrollToSelectedItem</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SelectedIndex" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int SelectingItemsControl.SelectedIndex</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SelectedItem" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object SelectingItemsControl.SelectedItem</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsTextSearchEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool SelectingItemsControl.IsTextSearchEnabled</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Items" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IEnumerable ItemsControl.Items</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ItemsPanel" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ITemplate&amp;lt;IPanel&amp;gt; ItemsControl.ItemsPanel</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ItemTemplate" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IDataTemplate ItemsControl.ItemTemplate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Background" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush TemplatedControl.Background</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="BorderBrush" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush TemplatedControl.BorderBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="BorderThickness" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Thickness TemplatedControl.BorderThickness</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CornerRadius" type="text">
            <xs:annotation>
              <xs:documentation>Property:

CornerRadius TemplatedControl.CornerRadius</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FontFamily TemplatedControl.FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double TemplatedControl.FontSize</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FontStyle TemplatedControl.FontStyle

enum FontStyle = {Normal, Italic, Oblique}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FontWeight TemplatedControl.FontWeight

enum FontWeight = {Thin, ExtraLight, ExtraLight, Light, SemiLight, Normal, Normal, Medium, DemiBold, DemiBold, Bold, ExtraBold,  ...}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush TemplatedControl.Foreground</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Padding" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Thickness TemplatedControl.Padding</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Template" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IControlTemplate TemplatedControl.Template</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FocusAdorner" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ITemplate&amp;lt;IControl&amp;gt; Control.FocusAdorner</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextMenu" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ContextMenu Control.ContextMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextFlyout" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FlyoutBase Control.ContextFlyout</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Tag" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object Control.Tag</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Focusable" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.Focusable</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsEnabled</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Cursor" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Cursor InputElement.Cursor</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsHitTestVisible" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsHitTestVisible</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsTabStop" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsTabStop</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TabIndex" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int InputElement.TabIndex</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Width" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.Width</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Height" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.Height</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MinWidth" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MinWidth</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MaxWidth" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MaxWidth</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MinHeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MinHeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MaxHeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MaxHeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Margin" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Thickness Layoutable.Margin</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="HorizontalAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

HorizontalAlignment Layoutable.HorizontalAlignment

enum HorizontalAlignment = {Stretch, Left, Center, Right}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="VerticalAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

VerticalAlignment Layoutable.VerticalAlignment

enum VerticalAlignment = {Stretch, Top, Center, Bottom}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="UseLayoutRounding" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Layoutable.UseLayoutRounding</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ClipToBounds" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Visual.ClipToBounds</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Clip" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Geometry Visual.Clip</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsVisible" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Visual.IsVisible</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Opacity" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Visual.Opacity</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="OpacityMask" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush Visual.OpacityMask</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RenderTransform" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ITransform Visual.RenderTransform</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RenderTransformOrigin" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RelativePoint Visual.RenderTransformOrigin</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ZIndex" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int Visual.ZIndex</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Name" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string StyledElement.Name</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Classes" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Classes StyledElement.Classes</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataContext" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object StyledElement.DataContext</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Resources" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IResourceDictionary StyledElement.Resources</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Clock" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IClock Animatable.Clock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Transitions" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Transitions Animatable.Transitions</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MenuOpened" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; MenuBase.MenuOpened</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MenuClosed" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; MenuBase.MenuClosed</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SelectionChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;SelectionChangedEventArgs&amp;gt; SelectingItemsControl.SelectionChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplateApplied" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TemplateAppliedEventArgs&amp;gt; TemplatedControl.TemplateApplied</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextRequested" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;ContextRequestedEventArgs&amp;gt; Control.ContextRequested</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="GotFocus" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;GotFocusEventArgs&amp;gt; InputElement.GotFocus</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="LostFocus" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.LostFocus</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="KeyDown" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;KeyEventArgs&amp;gt; InputElement.KeyDown</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="KeyUp" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;KeyEventArgs&amp;gt; InputElement.KeyUp</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInput" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputEventArgs&amp;gt; InputElement.TextInput</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInputMethodClientRequested" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputMethodClientRequestedEventArgs&amp;gt; InputElement.TextInputMethodClientRequested</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInputOptionsQuery" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputOptionsQueryEventArgs&amp;gt; InputElement.TextInputOptionsQuery</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerEnter" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerEnter</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerLeave" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerLeave</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerMoved" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerMoved</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerPressed" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerPressedEventArgs&amp;gt; InputElement.PointerPressed</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerReleased" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerReleasedEventArgs&amp;gt; InputElement.PointerReleased</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerCaptureLost" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerCaptureLostEventArgs&amp;gt; InputElement.PointerCaptureLost</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerWheelChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerWheelEventArgs&amp;gt; InputElement.PointerWheelChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Tapped" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.Tapped</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DoubleTapped" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.DoubleTapped</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="EffectiveViewportChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;EffectiveViewportChangedEventArgs&amp;gt; Layoutable.EffectiveViewportChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="LayoutUpdated" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler Layoutable.LayoutUpdated</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AttachedToVisualTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;VisualTreeAttachmentEventArgs&amp;gt; Visual.AttachedToVisualTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DetachedFromVisualTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;VisualTreeAttachmentEventArgs&amp;gt; Visual.DetachedFromVisualTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AttachedToLogicalTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;LogicalTreeAttachmentEventArgs&amp;gt; StyledElement.AttachedToLogicalTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DetachedFromLogicalTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;LogicalTreeAttachmentEventArgs&amp;gt; StyledElement.DetachedFromLogicalTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataContextChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler StyledElement.DataContextChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Initialized" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler StyledElement.Initialized</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ResourcesChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;ResourcesChangedEventArgs&amp;gt; StyledElement.ResourcesChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="Menu" mixed="true" type="MenuType">
    <xs:annotation>
      <xs:documentation>Class: Menu

Namespace: Avalonia.Controls

Base: MenuBase, SelectingItemsControl, ItemsControl, TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: AutoScrollToSelectedItem, Background, BorderBrush, BorderThickness, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsTextSearchEnabled, IsVisible, Item, Items, ItemsPanel, ItemTemplate, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, SelectedIndex, SelectedItem, TabIndex, Tag, Template, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, MenuClosed, MenuOpened, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, SelectionChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="MenuItemType" mixed="true">
    <xs:complexContent>
      <xs:extension base="HeaderedSelectingItemsControlType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Command" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ICommand MenuItem.Command</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="HotKey" type="text">
            <xs:annotation>
              <xs:documentation>Property:

KeyGesture MenuItem.HotKey</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CommandParameter" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object MenuItem.CommandParameter</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Icon" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object MenuItem.Icon</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="InputGesture" type="text">
            <xs:annotation>
              <xs:documentation>Property:

KeyGesture MenuItem.InputGesture</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsSelected" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool MenuItem.IsSelected</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsSubMenuOpen" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool MenuItem.IsSubMenuOpen</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Click" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; MenuItem.Click</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerEnterItem" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; MenuItem.PointerEnterItem</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerLeaveItem" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; MenuItem.PointerLeaveItem</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SubmenuOpened" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; MenuItem.SubmenuOpened</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="MenuItem" mixed="true" type="MenuItemType">
    <xs:annotation>
      <xs:documentation>Class: MenuItem

Namespace: Avalonia.Controls

Base: HeaderedSelectingItemsControl, SelectingItemsControl, ItemsControl, TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: AutoScrollToSelectedItem, Background, BorderBrush, BorderThickness, Classes, Clip, ClipToBounds, Clock, Command, CommandParameter, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Header, Height, HorizontalAlignment, HotKey, Icon, InputGesture, IsEnabled, IsHitTestVisible, IsSelected, IsSubMenuOpen, IsTabStop, IsTextSearchEnabled, IsVisible, Item, Items, ItemsPanel, ItemTemplate, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, SelectedIndex, SelectedItem, TabIndex, Tag, Template, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, Click, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerEnterItem, PointerLeave, PointerLeaveItem, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, SelectionChanged, SubmenuOpened, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="MenuItemAccessKeyHandlerType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="MainMenu" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IMainMenu MenuItemAccessKeyHandler.MainMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="MenuItemAccessKeyHandler" mixed="true" type="MenuItemAccessKeyHandlerType">
    <xs:annotation>
      <xs:documentation>Class: MenuItemAccessKeyHandler

Namespace: Avalonia.Controls

Base: 

Properties: MainMenu

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="NativeControlHostType" mixed="true">
    <xs:complexContent>
      <xs:extension base="ControlType">
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="NativeControlHost" mixed="true" type="NativeControlHostType">
    <xs:annotation>
      <xs:documentation>Class: NativeControlHost

Namespace: Avalonia.Controls

Base: Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, Cursor, DataContext, Focusable, FocusAdorner, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="NativeMenuType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Parent" type="text">
            <xs:annotation>
              <xs:documentation>Property:

NativeMenuItem NativeMenu.Parent</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NeedsUpdate" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;EventArgs&amp;gt; NativeMenu.NeedsUpdate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Opening" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;EventArgs&amp;gt; NativeMenu.Opening</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Closed" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;EventArgs&amp;gt; NativeMenu.Closed</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="NativeMenu" mixed="true" type="NativeMenuType">
    <xs:annotation>
      <xs:documentation>Class: NativeMenu

Namespace: Avalonia.Controls

Base: AvaloniaObject

Properties: Item, Parent

Events: Closed, NeedsUpdate, Opening, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="NativeMenuBarType" mixed="true">
    <xs:complexContent>
      <xs:extension base="TemplatedControlType">
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="NativeMenuBar" mixed="true" type="NativeMenuBarType">
    <xs:annotation>
      <xs:documentation>Class: NativeMenuBar

Namespace: Avalonia.Controls

Base: TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, BorderBrush, BorderThickness, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Template, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="NativeMenuItemType" mixed="true">
    <xs:complexContent>
      <xs:extension base="NativeMenuItemBaseType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Menu" type="text">
            <xs:annotation>
              <xs:documentation>Property:

NativeMenu NativeMenuItem.Menu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Icon" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBitmap NativeMenuItem.Icon</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Header" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string NativeMenuItem.Header</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Gesture" type="text">
            <xs:annotation>
              <xs:documentation>Property:

KeyGesture NativeMenuItem.Gesture</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsChecked" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool NativeMenuItem.IsChecked</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToggleType" type="text">
            <xs:annotation>
              <xs:documentation>Property:

NativeMenuItemToggleType NativeMenuItem.ToggleType

enum NativeMenuItemToggleType = {None, CheckBox, Radio}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool NativeMenuItem.IsEnabled</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Command" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ICommand NativeMenuItem.Command</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CommandParameter" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object NativeMenuItem.CommandParameter</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Click" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler NativeMenuItem.Click</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Clicked" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler NativeMenuItem.Clicked</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="NativeMenuItem" mixed="true" type="NativeMenuItemType">
    <xs:annotation>
      <xs:documentation>Class: NativeMenuItem

Namespace: Avalonia.Controls

Base: NativeMenuItemBase, AvaloniaObject

Properties: Command, CommandParameter, Gesture, Header, Icon, IsChecked, IsEnabled, Item, Menu, Parent, ToggleType

Events: Click, Clicked, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="NativeMenuItemBaseType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Parent" type="text">
            <xs:annotation>
              <xs:documentation>Property:

NativeMenu NativeMenuItemBase.Parent</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="NativeMenuItemBase" mixed="true" type="NativeMenuItemBaseType">
    <xs:annotation>
      <xs:documentation>Class: NativeMenuItemBase

Namespace: Avalonia.Controls

Base: AvaloniaObject

Properties: Item, Parent

Events: PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="NativeMenuItemSeperatorType" mixed="true">
    <xs:complexContent>
      <xs:extension base="NativeMenuItemSeparatorType">
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="NativeMenuItemSeperator" mixed="true" type="NativeMenuItemSeperatorType">
    <xs:annotation>
      <xs:documentation>Class: NativeMenuItemSeperator

Namespace: Avalonia.Controls

Base: NativeMenuItemSeparator, NativeMenuItemBase, AvaloniaObject

Properties: Item, Parent

Events: PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="NativeMenuItemSeparatorType" mixed="true">
    <xs:complexContent>
      <xs:extension base="NativeMenuItemBaseType">
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="NativeMenuItemSeparator" mixed="true" type="NativeMenuItemSeparatorType">
    <xs:annotation>
      <xs:documentation>Class: NativeMenuItemSeparator

Namespace: Avalonia.Controls

Base: NativeMenuItemBase, AvaloniaObject

Properties: Item, Parent

Events: PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ReversibleStackPanelType" mixed="true">
    <xs:complexContent>
      <xs:extension base="StackPanelType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="ReverseOrder" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool ReversibleStackPanel.ReverseOrder</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ReversibleStackPanel" mixed="true" type="ReversibleStackPanelType">
    <xs:annotation>
      <xs:documentation>Class: ReversibleStackPanel

Namespace: Avalonia.Controls

Base: StackPanel, Panel, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, Cursor, DataContext, Focusable, FocusAdorner, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Orientation, RenderTransform, RenderTransformOrigin, Resources, ReverseOrder, Spacing, TabIndex, Tag, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="NumericUpDownType" mixed="true">
    <xs:complexContent>
      <xs:extension base="TemplatedControlType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="AllowSpin" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool NumericUpDown.AllowSpin</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ButtonSpinnerLocation" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Location NumericUpDown.ButtonSpinnerLocation

enum Location = {Left, Right}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ShowButtonSpinner" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool NumericUpDown.ShowButtonSpinner</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ClipValueToMinMax" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool NumericUpDown.ClipValueToMinMax</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CultureInfo" type="text">
            <xs:annotation>
              <xs:documentation>Property:

CultureInfo NumericUpDown.CultureInfo</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FormatString" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string NumericUpDown.FormatString</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Increment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double NumericUpDown.Increment</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsReadOnly" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool NumericUpDown.IsReadOnly</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Maximum" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double NumericUpDown.Maximum</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Minimum" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double NumericUpDown.Minimum</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ParsingNumberStyle" type="text">
            <xs:annotation>
              <xs:documentation>Property:

NumberStyles NumericUpDown.ParsingNumberStyle

enum NumberStyles = {None, AllowLeadingWhite, AllowTrailingWhite, AllowLeadingSign, Integer, AllowTrailingSign, AllowParentheses, AllowDecimalPoint, AllowThousands, Number, AllowExponent, Float,  ...}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Text" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string NumericUpDown.Text</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Value" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double NumericUpDown.Value</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Watermark" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string NumericUpDown.Watermark</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="HorizontalContentAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

HorizontalAlignment NumericUpDown.HorizontalContentAlignment

enum HorizontalAlignment = {Stretch, Left, Center, Right}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="VerticalContentAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

VerticalAlignment NumericUpDown.VerticalContentAlignment

enum VerticalAlignment = {Stretch, Top, Center, Bottom}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Spinned" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;SpinEventArgs&amp;gt; NumericUpDown.Spinned</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ValueChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;NumericUpDownValueChangedEventArgs&amp;gt; NumericUpDown.ValueChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="NumericUpDown" mixed="true" type="NumericUpDownType">
    <xs:annotation>
      <xs:documentation>Class: NumericUpDown

Namespace: Avalonia.Controls

Base: TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: AllowSpin, Background, BorderBrush, BorderThickness, ButtonSpinnerLocation, Classes, Clip, ClipToBounds, ClipValueToMinMax, Clock, ContextFlyout, ContextMenu, CornerRadius, CultureInfo, Cursor, DataContext, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, FormatString, Height, HorizontalAlignment, HorizontalContentAlignment, Increment, IsEnabled, IsHitTestVisible, IsReadOnly, IsTabStop, IsVisible, Item, Margin, MaxHeight, Maximum, MaxWidth, MinHeight, Minimum, MinWidth, Name, Opacity, OpacityMask, Padding, ParsingNumberStyle, RenderTransform, RenderTransformOrigin, Resources, ShowButtonSpinner, TabIndex, Tag, Template, Text, Transitions, UseLayoutRounding, Value, VerticalAlignment, VerticalContentAlignment, Watermark, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Spinned, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery, ValueChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="NumericUpDownValueChangedEventArgsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Handled" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool RoutedEventArgs.Handled</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RoutedEvent" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RoutedEvent RoutedEventArgs.RoutedEvent</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Route" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RoutingStrategies RoutedEventArgs.Route

enum RoutingStrategies = {Direct, Tunnel, Bubble}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Source" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IInteractive RoutedEventArgs.Source</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="NumericUpDownValueChangedEventArgs" mixed="true" type="NumericUpDownValueChangedEventArgsType">
    <xs:annotation>
      <xs:documentation>Class: NumericUpDownValueChangedEventArgs

Namespace: Avalonia.Controls

Base: RoutedEventArgs, EventArgs

Properties: Handled, Route, RoutedEvent, Source

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="PanelType" mixed="true">
    <xs:complexContent>
      <xs:extension base="ControlType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Background" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush Panel.Background</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="Panel" mixed="true" type="PanelType">
    <xs:annotation>
      <xs:documentation>Class: Panel

Namespace: Avalonia.Controls

Base: Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, Cursor, DataContext, Focusable, FocusAdorner, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="PathIconType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Data" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Geometry PathIcon.Data</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Background" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush TemplatedControl.Background</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="BorderBrush" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush TemplatedControl.BorderBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="BorderThickness" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Thickness TemplatedControl.BorderThickness</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CornerRadius" type="text">
            <xs:annotation>
              <xs:documentation>Property:

CornerRadius TemplatedControl.CornerRadius</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FontFamily TemplatedControl.FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double TemplatedControl.FontSize</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FontStyle TemplatedControl.FontStyle

enum FontStyle = {Normal, Italic, Oblique}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FontWeight TemplatedControl.FontWeight

enum FontWeight = {Thin, ExtraLight, ExtraLight, Light, SemiLight, Normal, Normal, Medium, DemiBold, DemiBold, Bold, ExtraBold,  ...}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush TemplatedControl.Foreground</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Padding" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Thickness TemplatedControl.Padding</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Template" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IControlTemplate TemplatedControl.Template</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FocusAdorner" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ITemplate&amp;lt;IControl&amp;gt; Control.FocusAdorner</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextMenu" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ContextMenu Control.ContextMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextFlyout" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FlyoutBase Control.ContextFlyout</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Tag" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object Control.Tag</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Focusable" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.Focusable</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsEnabled</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Cursor" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Cursor InputElement.Cursor</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsHitTestVisible" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsHitTestVisible</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsTabStop" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsTabStop</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TabIndex" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int InputElement.TabIndex</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Width" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.Width</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Height" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.Height</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MinWidth" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MinWidth</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MaxWidth" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MaxWidth</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MinHeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MinHeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MaxHeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MaxHeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Margin" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Thickness Layoutable.Margin</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="HorizontalAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

HorizontalAlignment Layoutable.HorizontalAlignment

enum HorizontalAlignment = {Stretch, Left, Center, Right}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="VerticalAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

VerticalAlignment Layoutable.VerticalAlignment

enum VerticalAlignment = {Stretch, Top, Center, Bottom}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="UseLayoutRounding" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Layoutable.UseLayoutRounding</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ClipToBounds" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Visual.ClipToBounds</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Clip" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Geometry Visual.Clip</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsVisible" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Visual.IsVisible</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Opacity" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Visual.Opacity</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="OpacityMask" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush Visual.OpacityMask</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RenderTransform" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ITransform Visual.RenderTransform</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RenderTransformOrigin" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RelativePoint Visual.RenderTransformOrigin</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ZIndex" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int Visual.ZIndex</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Name" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string StyledElement.Name</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Classes" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Classes StyledElement.Classes</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataContext" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object StyledElement.DataContext</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Resources" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IResourceDictionary StyledElement.Resources</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Clock" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IClock Animatable.Clock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Transitions" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Transitions Animatable.Transitions</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplateApplied" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TemplateAppliedEventArgs&amp;gt; TemplatedControl.TemplateApplied</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextRequested" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;ContextRequestedEventArgs&amp;gt; Control.ContextRequested</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="GotFocus" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;GotFocusEventArgs&amp;gt; InputElement.GotFocus</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="LostFocus" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.LostFocus</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="KeyDown" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;KeyEventArgs&amp;gt; InputElement.KeyDown</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="KeyUp" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;KeyEventArgs&amp;gt; InputElement.KeyUp</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInput" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputEventArgs&amp;gt; InputElement.TextInput</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInputMethodClientRequested" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputMethodClientRequestedEventArgs&amp;gt; InputElement.TextInputMethodClientRequested</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInputOptionsQuery" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputOptionsQueryEventArgs&amp;gt; InputElement.TextInputOptionsQuery</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerEnter" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerEnter</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerLeave" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerLeave</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerMoved" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerMoved</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerPressed" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerPressedEventArgs&amp;gt; InputElement.PointerPressed</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerReleased" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerReleasedEventArgs&amp;gt; InputElement.PointerReleased</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerCaptureLost" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerCaptureLostEventArgs&amp;gt; InputElement.PointerCaptureLost</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerWheelChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerWheelEventArgs&amp;gt; InputElement.PointerWheelChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Tapped" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.Tapped</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DoubleTapped" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.DoubleTapped</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="EffectiveViewportChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;EffectiveViewportChangedEventArgs&amp;gt; Layoutable.EffectiveViewportChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="LayoutUpdated" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler Layoutable.LayoutUpdated</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AttachedToVisualTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;VisualTreeAttachmentEventArgs&amp;gt; Visual.AttachedToVisualTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DetachedFromVisualTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;VisualTreeAttachmentEventArgs&amp;gt; Visual.DetachedFromVisualTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AttachedToLogicalTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;LogicalTreeAttachmentEventArgs&amp;gt; StyledElement.AttachedToLogicalTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DetachedFromLogicalTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;LogicalTreeAttachmentEventArgs&amp;gt; StyledElement.DetachedFromLogicalTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataContextChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler StyledElement.DataContextChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Initialized" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler StyledElement.Initialized</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ResourcesChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;ResourcesChangedEventArgs&amp;gt; StyledElement.ResourcesChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="PathIcon" mixed="true" type="PathIconType">
    <xs:annotation>
      <xs:documentation>Class: PathIcon

Namespace: Avalonia.Controls

Base: IconElement, TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, BorderBrush, BorderThickness, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, CornerRadius, Cursor, Data, DataContext, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Template, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="PixelPointEventArgsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="PixelPointEventArgs" mixed="true" type="PixelPointEventArgsType">
    <xs:annotation>
      <xs:documentation>Class: PixelPointEventArgs

Namespace: Avalonia.Controls

Base: EventArgs

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ProgressBarType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IndeterminateStartingOffset" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double ProgressBar.IndeterminateStartingOffset</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IndeterminateEndingOffset" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double ProgressBar.IndeterminateEndingOffset</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsIndeterminate" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool ProgressBar.IsIndeterminate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ShowProgressText" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool ProgressBar.ShowProgressText</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Orientation" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Orientation ProgressBar.Orientation

enum Orientation = {Horizontal, Vertical}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Minimum" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double RangeBase.Minimum</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Maximum" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double RangeBase.Maximum</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Value" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double RangeBase.Value</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SmallChange" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double RangeBase.SmallChange</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="LargeChange" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double RangeBase.LargeChange</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Background" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush TemplatedControl.Background</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="BorderBrush" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush TemplatedControl.BorderBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="BorderThickness" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Thickness TemplatedControl.BorderThickness</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CornerRadius" type="text">
            <xs:annotation>
              <xs:documentation>Property:

CornerRadius TemplatedControl.CornerRadius</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FontFamily TemplatedControl.FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double TemplatedControl.FontSize</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FontStyle TemplatedControl.FontStyle

enum FontStyle = {Normal, Italic, Oblique}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FontWeight TemplatedControl.FontWeight

enum FontWeight = {Thin, ExtraLight, ExtraLight, Light, SemiLight, Normal, Normal, Medium, DemiBold, DemiBold, Bold, ExtraBold,  ...}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush TemplatedControl.Foreground</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Padding" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Thickness TemplatedControl.Padding</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Template" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IControlTemplate TemplatedControl.Template</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FocusAdorner" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ITemplate&amp;lt;IControl&amp;gt; Control.FocusAdorner</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextMenu" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ContextMenu Control.ContextMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextFlyout" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FlyoutBase Control.ContextFlyout</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Tag" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object Control.Tag</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Focusable" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.Focusable</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsEnabled</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Cursor" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Cursor InputElement.Cursor</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsHitTestVisible" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsHitTestVisible</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsTabStop" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsTabStop</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TabIndex" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int InputElement.TabIndex</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Width" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.Width</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Height" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.Height</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MinWidth" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MinWidth</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MaxWidth" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MaxWidth</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MinHeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MinHeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MaxHeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MaxHeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Margin" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Thickness Layoutable.Margin</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="HorizontalAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

HorizontalAlignment Layoutable.HorizontalAlignment

enum HorizontalAlignment = {Stretch, Left, Center, Right}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="VerticalAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

VerticalAlignment Layoutable.VerticalAlignment

enum VerticalAlignment = {Stretch, Top, Center, Bottom}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="UseLayoutRounding" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Layoutable.UseLayoutRounding</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ClipToBounds" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Visual.ClipToBounds</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Clip" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Geometry Visual.Clip</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsVisible" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Visual.IsVisible</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Opacity" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Visual.Opacity</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="OpacityMask" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush Visual.OpacityMask</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RenderTransform" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ITransform Visual.RenderTransform</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RenderTransformOrigin" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RelativePoint Visual.RenderTransformOrigin</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ZIndex" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int Visual.ZIndex</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Name" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string StyledElement.Name</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Classes" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Classes StyledElement.Classes</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataContext" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object StyledElement.DataContext</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Resources" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IResourceDictionary StyledElement.Resources</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Clock" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IClock Animatable.Clock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Transitions" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Transitions Animatable.Transitions</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplateApplied" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TemplateAppliedEventArgs&amp;gt; TemplatedControl.TemplateApplied</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextRequested" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;ContextRequestedEventArgs&amp;gt; Control.ContextRequested</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="GotFocus" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;GotFocusEventArgs&amp;gt; InputElement.GotFocus</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="LostFocus" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.LostFocus</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="KeyDown" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;KeyEventArgs&amp;gt; InputElement.KeyDown</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="KeyUp" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;KeyEventArgs&amp;gt; InputElement.KeyUp</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInput" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputEventArgs&amp;gt; InputElement.TextInput</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInputMethodClientRequested" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputMethodClientRequestedEventArgs&amp;gt; InputElement.TextInputMethodClientRequested</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInputOptionsQuery" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputOptionsQueryEventArgs&amp;gt; InputElement.TextInputOptionsQuery</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerEnter" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerEnter</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerLeave" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerLeave</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerMoved" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerMoved</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerPressed" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerPressedEventArgs&amp;gt; InputElement.PointerPressed</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerReleased" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerReleasedEventArgs&amp;gt; InputElement.PointerReleased</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerCaptureLost" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerCaptureLostEventArgs&amp;gt; InputElement.PointerCaptureLost</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerWheelChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerWheelEventArgs&amp;gt; InputElement.PointerWheelChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Tapped" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.Tapped</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DoubleTapped" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.DoubleTapped</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="EffectiveViewportChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;EffectiveViewportChangedEventArgs&amp;gt; Layoutable.EffectiveViewportChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="LayoutUpdated" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler Layoutable.LayoutUpdated</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AttachedToVisualTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;VisualTreeAttachmentEventArgs&amp;gt; Visual.AttachedToVisualTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DetachedFromVisualTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;VisualTreeAttachmentEventArgs&amp;gt; Visual.DetachedFromVisualTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AttachedToLogicalTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;LogicalTreeAttachmentEventArgs&amp;gt; StyledElement.AttachedToLogicalTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DetachedFromLogicalTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;LogicalTreeAttachmentEventArgs&amp;gt; StyledElement.DetachedFromLogicalTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataContextChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler StyledElement.DataContextChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Initialized" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler StyledElement.Initialized</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ResourcesChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;ResourcesChangedEventArgs&amp;gt; StyledElement.ResourcesChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ProgressBar" mixed="true" type="ProgressBarType">
    <xs:annotation>
      <xs:documentation>Class: ProgressBar

Namespace: Avalonia.Controls

Base: RangeBase, TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, BorderBrush, BorderThickness, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HorizontalAlignment, IndeterminateEndingOffset, IndeterminateStartingOffset, IsEnabled, IsHitTestVisible, IsIndeterminate, IsTabStop, IsVisible, Item, LargeChange, Margin, MaxHeight, Maximum, MaxWidth, MinHeight, Minimum, MinWidth, Name, Opacity, OpacityMask, Orientation, Padding, RenderTransform, RenderTransformOrigin, Resources, ShowProgressText, SmallChange, TabIndex, Tag, Template, Transitions, UseLayoutRounding, Value, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="RadioButtonType" mixed="true">
    <xs:complexContent>
      <xs:extension base="ToggleButtonType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="GroupName" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string RadioButton.GroupName</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="RadioButton" mixed="true" type="RadioButtonType">
    <xs:annotation>
      <xs:documentation>Class: RadioButton

Namespace: Avalonia.Controls

Base: ToggleButton, Button, ContentControl, TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, BorderBrush, BorderThickness, Classes, ClickMode, Clip, ClipToBounds, Clock, Command, CommandParameter, Content, ContentTemplate, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Flyout, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, GroupName, Height, HorizontalAlignment, HorizontalContentAlignment, HotKey, IsCancel, IsChecked, IsDefault, IsEnabled, IsHitTestVisible, IsTabStop, IsThreeState, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Template, Transitions, UseLayoutRounding, VerticalAlignment, VerticalContentAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, Checked, Click, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Indeterminate, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery, Unchecked</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="RelativePanelType" mixed="true">
    <xs:complexContent>
      <xs:extension base="PanelType">
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="RelativePanel" mixed="true" type="RelativePanelType">
    <xs:annotation>
      <xs:documentation>Class: RelativePanel

Namespace: Avalonia.Controls

Base: Panel, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, Cursor, DataContext, Focusable, FocusAdorner, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="RepeatButtonType" mixed="true">
    <xs:complexContent>
      <xs:extension base="ButtonType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Interval" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int RepeatButton.Interval</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Delay" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int RepeatButton.Delay</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="RepeatButton" mixed="true" type="RepeatButtonType">
    <xs:annotation>
      <xs:documentation>Class: RepeatButton

Namespace: Avalonia.Controls

Base: Button, ContentControl, TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, BorderBrush, BorderThickness, Classes, ClickMode, Clip, ClipToBounds, Clock, Command, CommandParameter, Content, ContentTemplate, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Delay, Flyout, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HorizontalAlignment, HorizontalContentAlignment, HotKey, Interval, IsCancel, IsDefault, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Template, Transitions, UseLayoutRounding, VerticalAlignment, VerticalContentAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, Click, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ElementFactoryGetArgsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Data" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object ElementFactoryGetArgs.Data</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Parent" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IControl ElementFactoryGetArgs.Parent</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Index" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int ElementFactoryGetArgs.Index</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ElementFactoryGetArgs" mixed="true" type="ElementFactoryGetArgsType">
    <xs:annotation>
      <xs:documentation>Class: ElementFactoryGetArgs

Namespace: Avalonia.Controls

Base: 

Properties: Data, Index, Parent

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ElementFactoryRecycleArgsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Element" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IControl ElementFactoryRecycleArgs.Element</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Parent" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IControl ElementFactoryRecycleArgs.Parent</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ElementFactoryRecycleArgs" mixed="true" type="ElementFactoryRecycleArgsType">
    <xs:annotation>
      <xs:documentation>Class: ElementFactoryRecycleArgs

Namespace: Avalonia.Controls

Base: 

Properties: Element, Parent

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ItemsRepeaterType" mixed="true">
    <xs:complexContent>
      <xs:extension base="PanelType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Layout" type="text">
            <xs:annotation>
              <xs:documentation>Property:

AttachedLayout ItemsRepeater.Layout</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Items" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IEnumerable ItemsRepeater.Items</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ItemTemplate" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IDataTemplate ItemsRepeater.ItemTemplate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="HorizontalCacheLength" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double ItemsRepeater.HorizontalCacheLength</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="VerticalCacheLength" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double ItemsRepeater.VerticalCacheLength</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ElementClearing" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;ItemsRepeaterElementClearingEventArgs&amp;gt; ItemsRepeater.ElementClearing</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ElementIndexChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;ItemsRepeaterElementIndexChangedEventArgs&amp;gt; ItemsRepeater.ElementIndexChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ElementPrepared" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;ItemsRepeaterElementPreparedEventArgs&amp;gt; ItemsRepeater.ElementPrepared</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ItemsRepeater" mixed="true" type="ItemsRepeaterType">
    <xs:annotation>
      <xs:documentation>Class: ItemsRepeater

Namespace: Avalonia.Controls

Base: Panel, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, Cursor, DataContext, Focusable, FocusAdorner, Height, HorizontalAlignment, HorizontalCacheLength, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Items, ItemTemplate, Layout, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Transitions, UseLayoutRounding, VerticalAlignment, VerticalCacheLength, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, ElementClearing, ElementIndexChanged, ElementPrepared, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ItemsRepeaterElementClearingEventArgsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ItemsRepeaterElementClearingEventArgs" mixed="true" type="ItemsRepeaterElementClearingEventArgsType">
    <xs:annotation>
      <xs:documentation>Class: ItemsRepeaterElementClearingEventArgs

Namespace: Avalonia.Controls

Base: EventArgs

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ItemsRepeaterElementIndexChangedEventArgsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ItemsRepeaterElementIndexChangedEventArgs" mixed="true" type="ItemsRepeaterElementIndexChangedEventArgsType">
    <xs:annotation>
      <xs:documentation>Class: ItemsRepeaterElementIndexChangedEventArgs

Namespace: Avalonia.Controls

Base: EventArgs

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ItemsRepeaterElementPreparedEventArgsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ItemsRepeaterElementPreparedEventArgs" mixed="true" type="ItemsRepeaterElementPreparedEventArgsType">
    <xs:annotation>
      <xs:documentation>Class: ItemsRepeaterElementPreparedEventArgs

Namespace: Avalonia.Controls

Base: 

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="RecyclePoolType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="RecyclePool" mixed="true" type="RecyclePoolType">
    <xs:annotation>
      <xs:documentation>Class: RecyclePool

Namespace: Avalonia.Controls

Base: 

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="SelectTemplateEventArgsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="TemplateKey" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string SelectTemplateEventArgs.TemplateKey</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="SelectTemplateEventArgs" mixed="true" type="SelectTemplateEventArgsType">
    <xs:annotation>
      <xs:documentation>Class: SelectTemplateEventArgs

Namespace: Avalonia.Controls

Base: EventArgs

Properties: TemplateKey

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="RecyclingElementFactoryType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="RecyclePool" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RecyclePool RecyclingElementFactory.RecyclePool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Templates" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IDictionary&amp;lt;string, IDataTemplate&amp;gt; RecyclingElementFactory.Templates</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SelectTemplateKey" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;SelectTemplateEventArgs&amp;gt; RecyclingElementFactory.SelectTemplateKey</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="RecyclingElementFactory" mixed="true" type="RecyclingElementFactoryType">
    <xs:annotation>
      <xs:documentation>Class: RecyclingElementFactory

Namespace: Avalonia.Controls

Base: ElementFactory

Properties: RecyclePool, Templates

Events: SelectTemplateKey</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="RequestBringIntoViewEventArgsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="TargetObject" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IVisual RequestBringIntoViewEventArgs.TargetObject</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TargetRect" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Rect RequestBringIntoViewEventArgs.TargetRect</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Handled" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool RoutedEventArgs.Handled</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RoutedEvent" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RoutedEvent RoutedEventArgs.RoutedEvent</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Route" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RoutingStrategies RoutedEventArgs.Route

enum RoutingStrategies = {Direct, Tunnel, Bubble}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Source" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IInteractive RoutedEventArgs.Source</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="RequestBringIntoViewEventArgs" mixed="true" type="RequestBringIntoViewEventArgsType">
    <xs:annotation>
      <xs:documentation>Class: RequestBringIntoViewEventArgs

Namespace: Avalonia.Controls

Base: RoutedEventArgs, EventArgs

Properties: Handled, Route, RoutedEvent, Source, TargetObject, TargetRect

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ResolveByNameAttributeType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ResolveByNameAttribute" mixed="true" type="ResolveByNameAttributeType">
    <xs:annotation>
      <xs:documentation>Class: ResolveByNameAttribute

Namespace: Avalonia.Controls

Base: Attribute

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="RowDefinitionType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MaxHeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double RowDefinition.MaxHeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MinHeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double RowDefinition.MinHeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Height" type="text">
            <xs:annotation>
              <xs:documentation>Property:

GridLength RowDefinition.Height</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SharedSizeGroup" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string DefinitionBase.SharedSizeGroup</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="RowDefinition" mixed="true" type="RowDefinitionType">
    <xs:annotation>
      <xs:documentation>Class: RowDefinition

Namespace: Avalonia.Controls

Base: DefinitionBase, AvaloniaObject

Properties: Height, Item, MaxHeight, MinHeight, SharedSizeGroup

Events: PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="RowDefinitionsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="ResetBehavior" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ResetBehavior AvaloniaList&amp;lt;RowDefinition&amp;gt;.ResetBehavior

enum ResetBehavior = {Reset, Remove}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Validate" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Action&amp;lt;RowDefinition&amp;gt; AvaloniaList&amp;lt;RowDefinition&amp;gt;.Validate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RowDefinition AvaloniaList&amp;lt;RowDefinition&amp;gt;.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Capacity" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int AvaloniaList&amp;lt;RowDefinition&amp;gt;.Capacity</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CollectionChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

NotifyCollectionChangedEventHandler AvaloniaList&amp;lt;RowDefinition&amp;gt;.CollectionChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

PropertyChangedEventHandler AvaloniaList&amp;lt;RowDefinition&amp;gt;.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="RowDefinitions" mixed="true" type="RowDefinitionsType">
    <xs:annotation>
      <xs:documentation>Class: RowDefinitions

Namespace: Avalonia.Controls

Base: DefinitionList`1, AvaloniaList`1

Properties: Capacity, Item, ResetBehavior, Validate

Events: CollectionChanged, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ScreensType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="Screens" mixed="true" type="ScreensType">
    <xs:annotation>
      <xs:documentation>Class: Screens

Namespace: Avalonia.Controls

Base: 

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ScrollChangedEventArgsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Handled" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool RoutedEventArgs.Handled</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RoutedEvent" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RoutedEvent RoutedEventArgs.RoutedEvent</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Route" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RoutingStrategies RoutedEventArgs.Route

enum RoutingStrategies = {Direct, Tunnel, Bubble}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Source" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IInteractive RoutedEventArgs.Source</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ScrollChangedEventArgs" mixed="true" type="ScrollChangedEventArgsType">
    <xs:annotation>
      <xs:documentation>Class: ScrollChangedEventArgs

Namespace: Avalonia.Controls

Base: RoutedEventArgs, EventArgs

Properties: Handled, Route, RoutedEvent, Source

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ScrollViewerType" mixed="true">
    <xs:complexContent>
      <xs:extension base="ContentControlType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Offset" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Vector ScrollViewer.Offset</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ScrollBarVisibility ScrollViewer.HorizontalScrollBarVisibility

enum ScrollBarVisibility = {Disabled, Auto, Hidden, Visible}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ScrollBarVisibility ScrollViewer.VerticalScrollBarVisibility

enum ScrollBarVisibility = {Disabled, Auto, Hidden, Visible}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AllowAutoHide" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool ScrollViewer.AllowAutoHide</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;ScrollChangedEventArgs&amp;gt; ScrollViewer.ScrollChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ScrollViewer" mixed="true" type="ScrollViewerType">
    <xs:annotation>
      <xs:documentation>Class: ScrollViewer

Namespace: Avalonia.Controls

Base: ContentControl, TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: AllowAutoHide, Background, BorderBrush, BorderThickness, Classes, Clip, ClipToBounds, Clock, Content, ContentTemplate, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HorizontalAlignment, HorizontalContentAlignment, HorizontalScrollBarVisibility, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Offset, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Template, Transitions, UseLayoutRounding, VerticalAlignment, VerticalContentAlignment, VerticalScrollBarVisibility, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, ScrollChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="SelectionChangedEventArgsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Handled" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool RoutedEventArgs.Handled</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RoutedEvent" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RoutedEvent RoutedEventArgs.RoutedEvent</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Route" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RoutingStrategies RoutedEventArgs.Route

enum RoutingStrategies = {Direct, Tunnel, Bubble}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Source" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IInteractive RoutedEventArgs.Source</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="SelectionChangedEventArgs" mixed="true" type="SelectionChangedEventArgsType">
    <xs:annotation>
      <xs:documentation>Class: SelectionChangedEventArgs

Namespace: Avalonia.Controls

Base: RoutedEventArgs, EventArgs

Properties: Handled, Route, RoutedEvent, Source

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="SeparatorType" mixed="true">
    <xs:complexContent>
      <xs:extension base="TemplatedControlType">
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="Separator" mixed="true" type="SeparatorType">
    <xs:annotation>
      <xs:documentation>Class: Separator

Namespace: Avalonia.Controls

Base: TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, BorderBrush, BorderThickness, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Template, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="SliderType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Ticks" type="text">
            <xs:annotation>
              <xs:documentation>Property:

AvaloniaList&amp;lt;double&amp;gt; Slider.Ticks</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Orientation" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Orientation Slider.Orientation

enum Orientation = {Horizontal, Vertical}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsDirectionReversed" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Slider.IsDirectionReversed</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsSnapToTickEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Slider.IsSnapToTickEnabled</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TickFrequency" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Slider.TickFrequency</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TickPlacement" type="text">
            <xs:annotation>
              <xs:documentation>Property:

TickPlacement Slider.TickPlacement

enum TickPlacement = {None, TopLeft, BottomRight, Outside}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Minimum" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double RangeBase.Minimum</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Maximum" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double RangeBase.Maximum</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Value" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double RangeBase.Value</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SmallChange" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double RangeBase.SmallChange</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="LargeChange" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double RangeBase.LargeChange</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Background" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush TemplatedControl.Background</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="BorderBrush" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush TemplatedControl.BorderBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="BorderThickness" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Thickness TemplatedControl.BorderThickness</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CornerRadius" type="text">
            <xs:annotation>
              <xs:documentation>Property:

CornerRadius TemplatedControl.CornerRadius</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FontFamily TemplatedControl.FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double TemplatedControl.FontSize</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FontStyle TemplatedControl.FontStyle

enum FontStyle = {Normal, Italic, Oblique}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FontWeight TemplatedControl.FontWeight

enum FontWeight = {Thin, ExtraLight, ExtraLight, Light, SemiLight, Normal, Normal, Medium, DemiBold, DemiBold, Bold, ExtraBold,  ...}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush TemplatedControl.Foreground</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Padding" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Thickness TemplatedControl.Padding</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Template" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IControlTemplate TemplatedControl.Template</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FocusAdorner" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ITemplate&amp;lt;IControl&amp;gt; Control.FocusAdorner</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextMenu" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ContextMenu Control.ContextMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextFlyout" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FlyoutBase Control.ContextFlyout</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Tag" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object Control.Tag</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Focusable" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.Focusable</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsEnabled</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Cursor" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Cursor InputElement.Cursor</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsHitTestVisible" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsHitTestVisible</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsTabStop" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsTabStop</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TabIndex" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int InputElement.TabIndex</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Width" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.Width</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Height" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.Height</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MinWidth" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MinWidth</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MaxWidth" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MaxWidth</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MinHeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MinHeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MaxHeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MaxHeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Margin" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Thickness Layoutable.Margin</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="HorizontalAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

HorizontalAlignment Layoutable.HorizontalAlignment

enum HorizontalAlignment = {Stretch, Left, Center, Right}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="VerticalAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

VerticalAlignment Layoutable.VerticalAlignment

enum VerticalAlignment = {Stretch, Top, Center, Bottom}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="UseLayoutRounding" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Layoutable.UseLayoutRounding</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ClipToBounds" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Visual.ClipToBounds</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Clip" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Geometry Visual.Clip</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsVisible" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Visual.IsVisible</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Opacity" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Visual.Opacity</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="OpacityMask" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush Visual.OpacityMask</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RenderTransform" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ITransform Visual.RenderTransform</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RenderTransformOrigin" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RelativePoint Visual.RenderTransformOrigin</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ZIndex" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int Visual.ZIndex</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Name" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string StyledElement.Name</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Classes" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Classes StyledElement.Classes</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataContext" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object StyledElement.DataContext</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Resources" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IResourceDictionary StyledElement.Resources</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Clock" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IClock Animatable.Clock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Transitions" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Transitions Animatable.Transitions</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplateApplied" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TemplateAppliedEventArgs&amp;gt; TemplatedControl.TemplateApplied</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextRequested" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;ContextRequestedEventArgs&amp;gt; Control.ContextRequested</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="GotFocus" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;GotFocusEventArgs&amp;gt; InputElement.GotFocus</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="LostFocus" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.LostFocus</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="KeyDown" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;KeyEventArgs&amp;gt; InputElement.KeyDown</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="KeyUp" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;KeyEventArgs&amp;gt; InputElement.KeyUp</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInput" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputEventArgs&amp;gt; InputElement.TextInput</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInputMethodClientRequested" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputMethodClientRequestedEventArgs&amp;gt; InputElement.TextInputMethodClientRequested</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInputOptionsQuery" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputOptionsQueryEventArgs&amp;gt; InputElement.TextInputOptionsQuery</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerEnter" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerEnter</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerLeave" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerLeave</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerMoved" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerMoved</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerPressed" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerPressedEventArgs&amp;gt; InputElement.PointerPressed</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerReleased" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerReleasedEventArgs&amp;gt; InputElement.PointerReleased</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerCaptureLost" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerCaptureLostEventArgs&amp;gt; InputElement.PointerCaptureLost</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerWheelChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerWheelEventArgs&amp;gt; InputElement.PointerWheelChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Tapped" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.Tapped</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DoubleTapped" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.DoubleTapped</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="EffectiveViewportChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;EffectiveViewportChangedEventArgs&amp;gt; Layoutable.EffectiveViewportChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="LayoutUpdated" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler Layoutable.LayoutUpdated</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AttachedToVisualTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;VisualTreeAttachmentEventArgs&amp;gt; Visual.AttachedToVisualTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DetachedFromVisualTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;VisualTreeAttachmentEventArgs&amp;gt; Visual.DetachedFromVisualTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AttachedToLogicalTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;LogicalTreeAttachmentEventArgs&amp;gt; StyledElement.AttachedToLogicalTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DetachedFromLogicalTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;LogicalTreeAttachmentEventArgs&amp;gt; StyledElement.DetachedFromLogicalTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataContextChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler StyledElement.DataContextChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Initialized" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler StyledElement.Initialized</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ResourcesChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;ResourcesChangedEventArgs&amp;gt; StyledElement.ResourcesChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="Slider" mixed="true" type="SliderType">
    <xs:annotation>
      <xs:documentation>Class: Slider

Namespace: Avalonia.Controls

Base: RangeBase, TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, BorderBrush, BorderThickness, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HorizontalAlignment, IsDirectionReversed, IsEnabled, IsHitTestVisible, IsSnapToTickEnabled, IsTabStop, IsVisible, Item, LargeChange, Margin, MaxHeight, Maximum, MaxWidth, MinHeight, Minimum, MinWidth, Name, Opacity, OpacityMask, Orientation, Padding, RenderTransform, RenderTransformOrigin, Resources, SmallChange, TabIndex, Tag, Template, TickFrequency, TickPlacement, Ticks, Transitions, UseLayoutRounding, Value, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="SpinEventArgsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Handled" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool RoutedEventArgs.Handled</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RoutedEvent" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RoutedEvent RoutedEventArgs.RoutedEvent</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Route" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RoutingStrategies RoutedEventArgs.Route

enum RoutingStrategies = {Direct, Tunnel, Bubble}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Source" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IInteractive RoutedEventArgs.Source</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="SpinEventArgs" mixed="true" type="SpinEventArgsType">
    <xs:annotation>
      <xs:documentation>Class: SpinEventArgs

Namespace: Avalonia.Controls

Base: RoutedEventArgs, EventArgs

Properties: Handled, Route, RoutedEvent, Source

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="SplitViewTemplateSettingsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="SplitViewTemplateSettings" mixed="true" type="SplitViewTemplateSettingsType">
    <xs:annotation>
      <xs:documentation>Class: SplitViewTemplateSettings

Namespace: Avalonia.Controls

Base: AvaloniaObject

Properties: Item

Events: PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="SplitViewType" mixed="true">
    <xs:complexContent>
      <xs:extension base="ContentControlType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="CompactPaneLength" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double SplitView.CompactPaneLength</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DisplayMode" type="text">
            <xs:annotation>
              <xs:documentation>Property:

SplitViewDisplayMode SplitView.DisplayMode

enum SplitViewDisplayMode = {Inline, CompactInline, Overlay, CompactOverlay}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsPaneOpen" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool SplitView.IsPaneOpen</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="OpenPaneLength" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double SplitView.OpenPaneLength</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PaneBackground" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush SplitView.PaneBackground</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PanePlacement" type="text">
            <xs:annotation>
              <xs:documentation>Property:

SplitViewPanePlacement SplitView.PanePlacement

enum SplitViewPanePlacement = {Left, Right}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Pane" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object SplitView.Pane</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PaneTemplate" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IDataTemplate SplitView.PaneTemplate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="UseLightDismissOverlayMode" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool SplitView.UseLightDismissOverlayMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplateSettings" type="text">
            <xs:annotation>
              <xs:documentation>Property:

SplitViewTemplateSettings SplitView.TemplateSettings</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PaneClosed" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;EventArgs&amp;gt; SplitView.PaneClosed</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PaneClosing" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;SplitViewPaneClosingEventArgs&amp;gt; SplitView.PaneClosing</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PaneOpened" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;EventArgs&amp;gt; SplitView.PaneOpened</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PaneOpening" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;EventArgs&amp;gt; SplitView.PaneOpening</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="SplitView" mixed="true" type="SplitViewType">
    <xs:annotation>
      <xs:documentation>Class: SplitView

Namespace: Avalonia.Controls

Base: ContentControl, TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, BorderBrush, BorderThickness, Classes, Clip, ClipToBounds, Clock, CompactPaneLength, Content, ContentTemplate, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, DisplayMode, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HorizontalAlignment, HorizontalContentAlignment, IsEnabled, IsHitTestVisible, IsPaneOpen, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, OpenPaneLength, Padding, Pane, PaneBackground, PanePlacement, PaneTemplate, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Template, TemplateSettings, Transitions, UseLayoutRounding, UseLightDismissOverlayMode, VerticalAlignment, VerticalContentAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PaneClosed, PaneClosing, PaneOpened, PaneOpening, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="SplitViewPaneClosingEventArgsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Cancel" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool SplitViewPaneClosingEventArgs.Cancel</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="SplitViewPaneClosingEventArgs" mixed="true" type="SplitViewPaneClosingEventArgsType">
    <xs:annotation>
      <xs:documentation>Class: SplitViewPaneClosingEventArgs

Namespace: Avalonia.Controls

Base: EventArgs

Properties: Cancel

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="StackPanelType" mixed="true">
    <xs:complexContent>
      <xs:extension base="PanelType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Spacing" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double StackPanel.Spacing</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Orientation" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Orientation StackPanel.Orientation

enum Orientation = {Horizontal, Vertical}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="StackPanel" mixed="true" type="StackPanelType">
    <xs:annotation>
      <xs:documentation>Class: StackPanel

Namespace: Avalonia.Controls

Base: Panel, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, Cursor, DataContext, Focusable, FocusAdorner, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Orientation, RenderTransform, RenderTransformOrigin, Resources, Spacing, TabIndex, Tag, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="SaveFileDialogType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DefaultExtension" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string SaveFileDialog.DefaultExtension</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Filters" type="text">
            <xs:annotation>
              <xs:documentation>Property:

List&amp;lt;FileDialogFilter&amp;gt; FileDialog.Filters</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="InitialFileName" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string FileDialog.InitialFileName</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="InitialDirectory" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string FileSystemDialog.InitialDirectory</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Directory" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string FileSystemDialog.Directory</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Title" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string SystemDialog.Title</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="SaveFileDialog" mixed="true" type="SaveFileDialogType">
    <xs:annotation>
      <xs:documentation>Class: SaveFileDialog

Namespace: Avalonia.Controls

Base: FileDialog, FileSystemDialog, SystemDialog

Properties: DefaultExtension, Directory, Filters, InitialDirectory, InitialFileName, Title

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="OpenFileDialogType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="AllowMultiple" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool OpenFileDialog.AllowMultiple</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Filters" type="text">
            <xs:annotation>
              <xs:documentation>Property:

List&amp;lt;FileDialogFilter&amp;gt; FileDialog.Filters</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="InitialFileName" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string FileDialog.InitialFileName</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="InitialDirectory" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string FileSystemDialog.InitialDirectory</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Directory" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string FileSystemDialog.Directory</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Title" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string SystemDialog.Title</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="OpenFileDialog" mixed="true" type="OpenFileDialogType">
    <xs:annotation>
      <xs:documentation>Class: OpenFileDialog

Namespace: Avalonia.Controls

Base: FileDialog, FileSystemDialog, SystemDialog

Properties: AllowMultiple, Directory, Filters, InitialDirectory, InitialFileName, Title

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="OpenFolderDialogType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DefaultDirectory" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string OpenFolderDialog.DefaultDirectory</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="InitialDirectory" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string FileSystemDialog.InitialDirectory</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Directory" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string FileSystemDialog.Directory</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Title" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string SystemDialog.Title</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="OpenFolderDialog" mixed="true" type="OpenFolderDialogType">
    <xs:annotation>
      <xs:documentation>Class: OpenFolderDialog

Namespace: Avalonia.Controls

Base: FileSystemDialog, SystemDialog

Properties: DefaultDirectory, Directory, InitialDirectory, Title

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="FileDialogFilterType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Name" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string FileDialogFilter.Name</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Extensions" type="text">
            <xs:annotation>
              <xs:documentation>Property:

List&amp;lt;string&amp;gt; FileDialogFilter.Extensions</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="FileDialogFilter" mixed="true" type="FileDialogFilterType">
    <xs:annotation>
      <xs:documentation>Class: FileDialogFilter

Namespace: Avalonia.Controls

Base: 

Properties: Extensions, Name

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="TabControlType" mixed="true">
    <xs:complexContent>
      <xs:extension base="SelectingItemsControlType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="HorizontalContentAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

HorizontalAlignment TabControl.HorizontalContentAlignment

enum HorizontalAlignment = {Stretch, Left, Center, Right}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="VerticalContentAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

VerticalAlignment TabControl.VerticalContentAlignment

enum VerticalAlignment = {Stretch, Top, Center, Bottom}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TabStripPlacement" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Dock TabControl.TabStripPlacement

enum Dock = {Left, Bottom, Right, Top}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContentTemplate" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IDataTemplate TabControl.ContentTemplate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="TabControl" mixed="true" type="TabControlType">
    <xs:annotation>
      <xs:documentation>Class: TabControl

Namespace: Avalonia.Controls

Base: SelectingItemsControl, ItemsControl, TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: AutoScrollToSelectedItem, Background, BorderBrush, BorderThickness, Classes, Clip, ClipToBounds, Clock, ContentTemplate, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HorizontalAlignment, HorizontalContentAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsTextSearchEnabled, IsVisible, Item, Items, ItemsPanel, ItemTemplate, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, SelectedIndex, SelectedItem, TabIndex, TabStripPlacement, Tag, Template, Transitions, UseLayoutRounding, VerticalAlignment, VerticalContentAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, SelectionChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="TabItemType" mixed="true">
    <xs:complexContent>
      <xs:extension base="HeaderedContentControlType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="IsSelected" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool TabItem.IsSelected</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="TabItem" mixed="true" type="TabItemType">
    <xs:annotation>
      <xs:documentation>Class: TabItem

Namespace: Avalonia.Controls

Base: HeaderedContentControl, ContentControl, TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, BorderBrush, BorderThickness, Classes, Clip, ClipToBounds, Clock, Content, ContentTemplate, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Header, HeaderTemplate, Height, HorizontalAlignment, HorizontalContentAlignment, IsEnabled, IsHitTestVisible, IsSelected, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Template, Transitions, UseLayoutRounding, VerticalAlignment, VerticalContentAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="TextBlockType" mixed="true">
    <xs:complexContent>
      <xs:extension base="ControlType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Padding" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Thickness TextBlock.Padding</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Background" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush TextBlock.Background</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Text" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string TextBlock.Text</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FontFamily TextBlock.FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double TextBlock.FontSize</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FontStyle TextBlock.FontStyle

enum FontStyle = {Normal, Italic, Oblique}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FontWeight TextBlock.FontWeight

enum FontWeight = {Thin, ExtraLight, ExtraLight, Light, SemiLight, Normal, Normal, Medium, DemiBold, DemiBold, Bold, ExtraBold,  ...}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush TextBlock.Foreground</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="LineHeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double TextBlock.LineHeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MaxLines" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int TextBlock.MaxLines</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextWrapping" type="text">
            <xs:annotation>
              <xs:documentation>Property:

TextWrapping TextBlock.TextWrapping

enum TextWrapping = {NoWrap, Wrap, WrapWithOverflow}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextTrimming" type="text">
            <xs:annotation>
              <xs:documentation>Property:

TextTrimming TextBlock.TextTrimming

enum TextTrimming = {None, CharacterEllipsis, WordEllipsis}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

TextAlignment TextBlock.TextAlignment

enum TextAlignment = {Left, Center, Right}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextDecorations" type="text">
            <xs:annotation>
              <xs:documentation>Property:

TextDecorationCollection TextBlock.TextDecorations</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="TextBlock" mixed="true" type="TextBlockType">
    <xs:annotation>
      <xs:documentation>Class: TextBlock

Namespace: Avalonia.Controls

Base: Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, Cursor, DataContext, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, LineHeight, Margin, MaxHeight, MaxLines, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Text, TextAlignment, TextDecorations, TextTrimming, TextWrapping, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="TextBoxType" mixed="true">
    <xs:complexContent>
      <xs:extension base="TemplatedControlType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="AcceptsReturn" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool TextBox.AcceptsReturn</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AcceptsTab" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool TextBox.AcceptsTab</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CaretIndex" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int TextBox.CaretIndex</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsReadOnly" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool TextBox.IsReadOnly</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PasswordChar" type="text">
            <xs:annotation>
              <xs:documentation>Property:

char TextBox.PasswordChar</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SelectionBrush" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush TextBox.SelectionBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SelectionForegroundBrush" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush TextBox.SelectionForegroundBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CaretBrush" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush TextBox.CaretBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SelectionStart" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int TextBox.SelectionStart</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SelectionEnd" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int TextBox.SelectionEnd</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MaxLength" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int TextBox.MaxLength</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Text" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string TextBox.Text</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SelectedText" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string TextBox.SelectedText</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="HorizontalContentAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

HorizontalAlignment TextBox.HorizontalContentAlignment

enum HorizontalAlignment = {Stretch, Left, Center, Right}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="VerticalContentAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

VerticalAlignment TextBox.VerticalContentAlignment

enum VerticalAlignment = {Stretch, Top, Center, Bottom}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

TextAlignment TextBox.TextAlignment

enum TextAlignment = {Left, Center, Right}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Watermark" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string TextBox.Watermark</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="UseFloatingWatermark" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool TextBox.UseFloatingWatermark</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="InnerLeftContent" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object TextBox.InnerLeftContent</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="InnerRightContent" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object TextBox.InnerRightContent</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RevealPassword" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool TextBox.RevealPassword</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextWrapping" type="text">
            <xs:annotation>
              <xs:documentation>Property:

TextWrapping TextBox.TextWrapping

enum TextWrapping = {NoWrap, Wrap, WrapWithOverflow}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NewLine" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string TextBox.NewLine</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsUndoEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool TextBox.IsUndoEnabled</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="UndoLimit" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int TextBox.UndoLimit</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CopyingToClipboard" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; TextBox.CopyingToClipboard</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CuttingToClipboard" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; TextBox.CuttingToClipboard</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PastingFromClipboard" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; TextBox.PastingFromClipboard</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="TextBox" mixed="true" type="TextBoxType">
    <xs:annotation>
      <xs:documentation>Class: TextBox

Namespace: Avalonia.Controls

Base: TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: AcceptsReturn, AcceptsTab, Background, BorderBrush, BorderThickness, CaretBrush, CaretIndex, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HorizontalAlignment, HorizontalContentAlignment, InnerLeftContent, InnerRightContent, IsEnabled, IsHitTestVisible, IsReadOnly, IsTabStop, IsUndoEnabled, IsVisible, Item, Margin, MaxHeight, MaxLength, MaxWidth, MinHeight, MinWidth, Name, NewLine, Opacity, OpacityMask, Padding, PasswordChar, RenderTransform, RenderTransformOrigin, Resources, RevealPassword, SelectedText, SelectionBrush, SelectionEnd, SelectionForegroundBrush, SelectionStart, TabIndex, Tag, Template, Text, TextAlignment, TextWrapping, Transitions, UndoLimit, UseFloatingWatermark, UseLayoutRounding, VerticalAlignment, VerticalContentAlignment, Watermark, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, CopyingToClipboard, CuttingToClipboard, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PastingFromClipboard, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="TickBarType" mixed="true">
    <xs:complexContent>
      <xs:extension base="ControlType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Fill" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush TickBar.Fill</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Minimum" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double TickBar.Minimum</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Maximum" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double TickBar.Maximum</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TickFrequency" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double TickBar.TickFrequency</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Orientation" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Orientation TickBar.Orientation

enum Orientation = {Horizontal, Vertical}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Ticks" type="text">
            <xs:annotation>
              <xs:documentation>Property:

AvaloniaList&amp;lt;double&amp;gt; TickBar.Ticks</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsDirectionReversed" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool TickBar.IsDirectionReversed</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Placement" type="text">
            <xs:annotation>
              <xs:documentation>Property:

TickBarPlacement TickBar.Placement

enum TickBarPlacement = {Left, Top, Right, Bottom}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ReservedSpace" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Rect TickBar.ReservedSpace</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="TickBar" mixed="true" type="TickBarType">
    <xs:annotation>
      <xs:documentation>Class: TickBar

Namespace: Avalonia.Controls

Base: Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, Cursor, DataContext, Fill, Focusable, FocusAdorner, Height, HorizontalAlignment, IsDirectionReversed, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, Maximum, MaxWidth, MinHeight, Minimum, MinWidth, Name, Opacity, OpacityMask, Orientation, Placement, RenderTransform, RenderTransformOrigin, ReservedSpace, Resources, TabIndex, Tag, TickFrequency, Ticks, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ToggleSwitchType" mixed="true">
    <xs:complexContent>
      <xs:extension base="ToggleButtonType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="OnContent" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object ToggleSwitch.OnContent</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="OffContent" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object ToggleSwitch.OffContent</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="OffContentTemplate" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IDataTemplate ToggleSwitch.OffContentTemplate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="OnContentTemplate" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IDataTemplate ToggleSwitch.OnContentTemplate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ToggleSwitch" mixed="true" type="ToggleSwitchType">
    <xs:annotation>
      <xs:documentation>Class: ToggleSwitch

Namespace: Avalonia.Controls

Base: ToggleButton, Button, ContentControl, TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, BorderBrush, BorderThickness, Classes, ClickMode, Clip, ClipToBounds, Clock, Command, CommandParameter, Content, ContentTemplate, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Flyout, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HorizontalAlignment, HorizontalContentAlignment, HotKey, IsCancel, IsChecked, IsDefault, IsEnabled, IsHitTestVisible, IsTabStop, IsThreeState, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, OffContent, OffContentTemplate, OnContent, OnContentTemplate, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Template, Transitions, UseLayoutRounding, VerticalAlignment, VerticalContentAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, Checked, Click, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Indeterminate, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery, Unchecked</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ToolTipType" mixed="true">
    <xs:complexContent>
      <xs:extension base="ContentControlType">
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ToolTip" mixed="true" type="ToolTipType">
    <xs:annotation>
      <xs:documentation>Class: ToolTip

Namespace: Avalonia.Controls

Base: ContentControl, TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, BorderBrush, BorderThickness, Classes, Clip, ClipToBounds, Clock, Content, ContentTemplate, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HorizontalAlignment, HorizontalContentAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Template, Transitions, UseLayoutRounding, VerticalAlignment, VerticalContentAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="TransitioningContentControlType" mixed="true">
    <xs:complexContent>
      <xs:extension base="ContentControlType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="PageTransition" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IPageTransition TransitioningContentControl.PageTransition</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="TransitioningContentControl" mixed="true" type="TransitioningContentControlType">
    <xs:annotation>
      <xs:documentation>Class: TransitioningContentControl

Namespace: Avalonia.Controls

Base: ContentControl, TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, BorderBrush, BorderThickness, Classes, Clip, ClipToBounds, Clock, Content, ContentTemplate, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HorizontalAlignment, HorizontalContentAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, PageTransition, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Template, Transitions, UseLayoutRounding, VerticalAlignment, VerticalContentAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="TrayIconsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="ResetBehavior" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ResetBehavior AvaloniaList&amp;lt;TrayIcon&amp;gt;.ResetBehavior

enum ResetBehavior = {Reset, Remove}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Validate" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Action&amp;lt;TrayIcon&amp;gt; AvaloniaList&amp;lt;TrayIcon&amp;gt;.Validate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

TrayIcon AvaloniaList&amp;lt;TrayIcon&amp;gt;.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Capacity" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int AvaloniaList&amp;lt;TrayIcon&amp;gt;.Capacity</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CollectionChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

NotifyCollectionChangedEventHandler AvaloniaList&amp;lt;TrayIcon&amp;gt;.CollectionChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

PropertyChangedEventHandler AvaloniaList&amp;lt;TrayIcon&amp;gt;.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="TrayIcons" mixed="true" type="TrayIconsType">
    <xs:annotation>
      <xs:documentation>Class: TrayIcons

Namespace: Avalonia.Controls

Base: AvaloniaList`1

Properties: Capacity, Item, ResetBehavior, Validate

Events: CollectionChanged, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="TrayIconType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Command" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ICommand TrayIcon.Command</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CommandParameter" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object TrayIcon.CommandParameter</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Menu" type="text">
            <xs:annotation>
              <xs:documentation>Property:

NativeMenu TrayIcon.Menu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Icon" type="text">
            <xs:annotation>
              <xs:documentation>Property:

WindowIcon TrayIcon.Icon</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTipText" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string TrayIcon.ToolTipText</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsVisible" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool TrayIcon.IsVisible</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Clicked" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler TrayIcon.Clicked</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="TrayIcon" mixed="true" type="TrayIconType">
    <xs:annotation>
      <xs:documentation>Class: TrayIcon

Namespace: Avalonia.Controls

Base: AvaloniaObject

Properties: Command, CommandParameter, Icon, IsVisible, Item, Menu, ToolTipText

Events: Clicked, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="TreeViewType" mixed="true">
    <xs:complexContent>
      <xs:extension base="ItemsControlType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="AutoScrollToSelectedItem" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool TreeView.AutoScrollToSelectedItem</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SelectionMode" type="text">
            <xs:annotation>
              <xs:documentation>Property:

SelectionMode TreeView.SelectionMode

enum SelectionMode = {Single, Multiple, Toggle, AlwaysSelected}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SelectedItem" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object TreeView.SelectedItem</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SelectedItems" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IList TreeView.SelectedItems</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SelectionChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;SelectionChangedEventArgs&amp;gt; TreeView.SelectionChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="TreeView" mixed="true" type="TreeViewType">
    <xs:annotation>
      <xs:documentation>Class: TreeView

Namespace: Avalonia.Controls

Base: ItemsControl, TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: AutoScrollToSelectedItem, Background, BorderBrush, BorderThickness, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Items, ItemsPanel, ItemTemplate, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, SelectedItem, SelectedItems, SelectionMode, TabIndex, Tag, Template, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, SelectionChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="TreeViewItemType" mixed="true">
    <xs:complexContent>
      <xs:extension base="HeaderedItemsControlType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="IsExpanded" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool TreeViewItem.IsExpanded</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsSelected" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool TreeViewItem.IsSelected</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="TreeViewItem" mixed="true" type="TreeViewItemType">
    <xs:annotation>
      <xs:documentation>Class: TreeViewItem

Namespace: Avalonia.Controls

Base: HeaderedItemsControl, ItemsControl, TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, BorderBrush, BorderThickness, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Header, Height, HorizontalAlignment, IsEnabled, IsExpanded, IsHitTestVisible, IsSelected, IsTabStop, IsVisible, Item, Items, ItemsPanel, ItemTemplate, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Template, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="UserControlType" mixed="true">
    <xs:complexContent>
      <xs:extension base="ContentControlType">
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="UserControl" mixed="true" type="UserControlType">
    <xs:annotation>
      <xs:documentation>Class: UserControl

Namespace: Avalonia.Controls

Base: ContentControl, TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, BorderBrush, BorderThickness, Classes, Clip, ClipToBounds, Clock, Content, ContentTemplate, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HorizontalAlignment, HorizontalContentAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Template, Transitions, UseLayoutRounding, VerticalAlignment, VerticalContentAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ViewboxType" mixed="true">
    <xs:complexContent>
      <xs:extension base="DecoratorType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Stretch" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Stretch Viewbox.Stretch

enum Stretch = {None, Fill, Uniform, UniformToFill}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="StretchDirection" type="text">
            <xs:annotation>
              <xs:documentation>Property:

StretchDirection Viewbox.StretchDirection

enum StretchDirection = {UpOnly, DownOnly, Both}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="Viewbox" mixed="true" type="ViewboxType">
    <xs:annotation>
      <xs:documentation>Class: Viewbox

Namespace: Avalonia.Controls

Base: Decorator, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Child, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, Cursor, DataContext, Focusable, FocusAdorner, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, Stretch, StretchDirection, TabIndex, Tag, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="VirtualizingStackPanelType" mixed="true">
    <xs:complexContent>
      <xs:extension base="StackPanelType">
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="VirtualizingStackPanel" mixed="true" type="VirtualizingStackPanelType">
    <xs:annotation>
      <xs:documentation>Class: VirtualizingStackPanel

Namespace: Avalonia.Controls

Base: StackPanel, Panel, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, Cursor, DataContext, Focusable, FocusAdorner, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Orientation, RenderTransform, RenderTransformOrigin, Resources, Spacing, TabIndex, Tag, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="WindowType" mixed="true">
    <xs:complexContent>
      <xs:extension base="WindowBaseType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="SizeToContent" type="text">
            <xs:annotation>
              <xs:documentation>Property:

SizeToContent Window.SizeToContent

enum SizeToContent = {Manual, Width, Height, WidthAndHeight}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Title" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string Window.Title</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="HasSystemDecorations" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Window.HasSystemDecorations</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ExtendClientAreaToDecorationsHint" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Window.ExtendClientAreaToDecorationsHint</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ExtendClientAreaChromeHints" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ExtendClientAreaChromeHints Window.ExtendClientAreaChromeHints

enum ExtendClientAreaChromeHints = {NoChrome, SystemChrome, Default, Default, OSXThickTitleBar}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ExtendClientAreaTitleBarHeightHint" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Window.ExtendClientAreaTitleBarHeightHint</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SystemDecorations" type="text">
            <xs:annotation>
              <xs:documentation>Property:

SystemDecorations Window.SystemDecorations

enum SystemDecorations = {None, BorderOnly, Full}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ShowActivated" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Window.ShowActivated</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ShowInTaskbar" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Window.ShowInTaskbar</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="WindowState" type="text">
            <xs:annotation>
              <xs:documentation>Property:

WindowState Window.WindowState

enum WindowState = {Normal, Minimized, Maximized, FullScreen}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CanResize" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Window.CanResize</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Icon" type="text">
            <xs:annotation>
              <xs:documentation>Property:

WindowIcon Window.Icon</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="WindowStartupLocation" type="text">
            <xs:annotation>
              <xs:documentation>Property:

WindowStartupLocation Window.WindowStartupLocation

enum WindowStartupLocation = {Manual, CenterScreen, CenterOwner}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Position" type="text">
            <xs:annotation>
              <xs:documentation>Property:

PixelPoint Window.Position</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Closing" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;CancelEventArgs&amp;gt; Window.Closing</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="Window" mixed="true" type="WindowType">
    <xs:annotation>
      <xs:documentation>Class: Window

Namespace: Avalonia.Controls

Base: WindowBase, TopLevel, ContentControl, TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, BorderBrush, BorderThickness, CanResize, Classes, Clip, ClipToBounds, Clock, Content, ContentTemplate, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, ExtendClientAreaChromeHints, ExtendClientAreaTitleBarHeightHint, ExtendClientAreaToDecorationsHint, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, HasSystemDecorations, Height, HorizontalAlignment, HorizontalContentAlignment, Icon, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, Position, RenderTransform, RenderTransformOrigin, Resources, ShowActivated, ShowInTaskbar, SizeToContent, SystemDecorations, TabIndex, Tag, Template, Title, Topmost, Transitions, TransparencyBackgroundFallback, TransparencyLevelHint, UseLayoutRounding, VerticalAlignment, VerticalContentAlignment, Width, WindowStartupLocation, WindowState, ZIndex

Events: Activated, AttachedToLogicalTree, AttachedToVisualTree, Closed, Closing, ContextRequested, DataContextChanged, Deactivated, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, Opened, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PositionChanged, PropertyChanged, ResourcesChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="WindowBaseType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Topmost" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool WindowBase.Topmost</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TransparencyLevelHint" type="text">
            <xs:annotation>
              <xs:documentation>Property:

WindowTransparencyLevel TopLevel.TransparencyLevelHint

enum WindowTransparencyLevel = {None, Transparent, Blur, AcrylicBlur, ForceAcrylicBlur, Mica}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TransparencyBackgroundFallback" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush TopLevel.TransparencyBackgroundFallback</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Content" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object ContentControl.Content</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContentTemplate" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IDataTemplate ContentControl.ContentTemplate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="HorizontalContentAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

HorizontalAlignment ContentControl.HorizontalContentAlignment

enum HorizontalAlignment = {Stretch, Left, Center, Right}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="VerticalContentAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

VerticalAlignment ContentControl.VerticalContentAlignment

enum VerticalAlignment = {Stretch, Top, Center, Bottom}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Background" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush TemplatedControl.Background</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="BorderBrush" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush TemplatedControl.BorderBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="BorderThickness" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Thickness TemplatedControl.BorderThickness</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CornerRadius" type="text">
            <xs:annotation>
              <xs:documentation>Property:

CornerRadius TemplatedControl.CornerRadius</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FontFamily TemplatedControl.FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double TemplatedControl.FontSize</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FontStyle TemplatedControl.FontStyle

enum FontStyle = {Normal, Italic, Oblique}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FontWeight TemplatedControl.FontWeight

enum FontWeight = {Thin, ExtraLight, ExtraLight, Light, SemiLight, Normal, Normal, Medium, DemiBold, DemiBold, Bold, ExtraBold,  ...}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush TemplatedControl.Foreground</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Padding" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Thickness TemplatedControl.Padding</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Template" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IControlTemplate TemplatedControl.Template</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FocusAdorner" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ITemplate&amp;lt;IControl&amp;gt; Control.FocusAdorner</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextMenu" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ContextMenu Control.ContextMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextFlyout" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FlyoutBase Control.ContextFlyout</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Tag" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object Control.Tag</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Focusable" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.Focusable</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsEnabled</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Cursor" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Cursor InputElement.Cursor</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsHitTestVisible" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsHitTestVisible</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsTabStop" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsTabStop</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TabIndex" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int InputElement.TabIndex</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Width" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.Width</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Height" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.Height</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MinWidth" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MinWidth</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MaxWidth" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MaxWidth</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MinHeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MinHeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MaxHeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MaxHeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Margin" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Thickness Layoutable.Margin</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="HorizontalAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

HorizontalAlignment Layoutable.HorizontalAlignment

enum HorizontalAlignment = {Stretch, Left, Center, Right}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="VerticalAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

VerticalAlignment Layoutable.VerticalAlignment

enum VerticalAlignment = {Stretch, Top, Center, Bottom}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="UseLayoutRounding" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Layoutable.UseLayoutRounding</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ClipToBounds" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Visual.ClipToBounds</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Clip" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Geometry Visual.Clip</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsVisible" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Visual.IsVisible</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Opacity" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Visual.Opacity</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="OpacityMask" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush Visual.OpacityMask</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RenderTransform" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ITransform Visual.RenderTransform</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RenderTransformOrigin" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RelativePoint Visual.RenderTransformOrigin</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ZIndex" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int Visual.ZIndex</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Name" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string StyledElement.Name</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Classes" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Classes StyledElement.Classes</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataContext" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object StyledElement.DataContext</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Resources" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IResourceDictionary StyledElement.Resources</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Clock" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IClock Animatable.Clock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Transitions" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Transitions Animatable.Transitions</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Activated" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler WindowBase.Activated</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Deactivated" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler WindowBase.Deactivated</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PositionChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PixelPointEventArgs&amp;gt; WindowBase.PositionChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Opened" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler TopLevel.Opened</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Closed" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler TopLevel.Closed</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplateApplied" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TemplateAppliedEventArgs&amp;gt; TemplatedControl.TemplateApplied</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextRequested" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;ContextRequestedEventArgs&amp;gt; Control.ContextRequested</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="GotFocus" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;GotFocusEventArgs&amp;gt; InputElement.GotFocus</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="LostFocus" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.LostFocus</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="KeyDown" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;KeyEventArgs&amp;gt; InputElement.KeyDown</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="KeyUp" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;KeyEventArgs&amp;gt; InputElement.KeyUp</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInput" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputEventArgs&amp;gt; InputElement.TextInput</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInputMethodClientRequested" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputMethodClientRequestedEventArgs&amp;gt; InputElement.TextInputMethodClientRequested</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInputOptionsQuery" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputOptionsQueryEventArgs&amp;gt; InputElement.TextInputOptionsQuery</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerEnter" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerEnter</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerLeave" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerLeave</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerMoved" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerMoved</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerPressed" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerPressedEventArgs&amp;gt; InputElement.PointerPressed</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerReleased" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerReleasedEventArgs&amp;gt; InputElement.PointerReleased</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerCaptureLost" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerCaptureLostEventArgs&amp;gt; InputElement.PointerCaptureLost</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerWheelChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerWheelEventArgs&amp;gt; InputElement.PointerWheelChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Tapped" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.Tapped</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DoubleTapped" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.DoubleTapped</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="EffectiveViewportChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;EffectiveViewportChangedEventArgs&amp;gt; Layoutable.EffectiveViewportChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="LayoutUpdated" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler Layoutable.LayoutUpdated</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AttachedToVisualTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;VisualTreeAttachmentEventArgs&amp;gt; Visual.AttachedToVisualTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DetachedFromVisualTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;VisualTreeAttachmentEventArgs&amp;gt; Visual.DetachedFromVisualTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AttachedToLogicalTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;LogicalTreeAttachmentEventArgs&amp;gt; StyledElement.AttachedToLogicalTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DetachedFromLogicalTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;LogicalTreeAttachmentEventArgs&amp;gt; StyledElement.DetachedFromLogicalTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataContextChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler StyledElement.DataContextChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Initialized" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler StyledElement.Initialized</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ResourcesChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;ResourcesChangedEventArgs&amp;gt; StyledElement.ResourcesChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="WindowBase" mixed="true" type="WindowBaseType">
    <xs:annotation>
      <xs:documentation>Class: WindowBase

Namespace: Avalonia.Controls

Base: TopLevel, ContentControl, TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, BorderBrush, BorderThickness, Classes, Clip, ClipToBounds, Clock, Content, ContentTemplate, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HorizontalAlignment, HorizontalContentAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Template, Topmost, Transitions, TransparencyBackgroundFallback, TransparencyLevelHint, UseLayoutRounding, VerticalAlignment, VerticalContentAlignment, Width, ZIndex

Events: Activated, AttachedToLogicalTree, AttachedToVisualTree, Closed, ContextRequested, DataContextChanged, Deactivated, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, Opened, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PositionChanged, PropertyChanged, ResourcesChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="WindowIconType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="WindowIcon" mixed="true" type="WindowIconType">
    <xs:annotation>
      <xs:documentation>Class: WindowIcon

Namespace: Avalonia.Controls

Base: 

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="WrapPanelType" mixed="true">
    <xs:complexContent>
      <xs:extension base="PanelType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Orientation" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Orientation WrapPanel.Orientation

enum Orientation = {Horizontal, Vertical}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ItemWidth" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double WrapPanel.ItemWidth</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ItemHeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double WrapPanel.ItemHeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="WrapPanel" mixed="true" type="WrapPanelType">
    <xs:annotation>
      <xs:documentation>Class: WrapPanel

Namespace: Avalonia.Controls

Base: Panel, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, Cursor, DataContext, Focusable, FocusAdorner, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, ItemHeight, ItemWidth, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Orientation, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="DataTemplatesType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="ResetBehavior" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ResetBehavior AvaloniaList&amp;lt;IDataTemplate&amp;gt;.ResetBehavior

enum ResetBehavior = {Reset, Remove}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Validate" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Action&amp;lt;IDataTemplate&amp;gt; AvaloniaList&amp;lt;IDataTemplate&amp;gt;.Validate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IDataTemplate AvaloniaList&amp;lt;IDataTemplate&amp;gt;.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Capacity" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int AvaloniaList&amp;lt;IDataTemplate&amp;gt;.Capacity</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CollectionChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

NotifyCollectionChangedEventHandler AvaloniaList&amp;lt;IDataTemplate&amp;gt;.CollectionChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

PropertyChangedEventHandler AvaloniaList&amp;lt;IDataTemplate&amp;gt;.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="DataTemplates" mixed="true" type="DataTemplatesType">
    <xs:annotation>
      <xs:documentation>Class: DataTemplates

Namespace: Avalonia.Controls.Templates

Base: AvaloniaList`1

Properties: Capacity, Item, ResetBehavior, Validate

Events: CollectionChanged, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="FuncControlTemplateType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="FuncControlTemplate" mixed="true" type="FuncControlTemplateType">
    <xs:annotation>
      <xs:documentation>Class: FuncControlTemplate

Namespace: Avalonia.Controls.Templates

Base: FuncTemplate`2

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="FuncDataTemplateType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="FuncDataTemplate" mixed="true" type="FuncDataTemplateType">
    <xs:annotation>
      <xs:documentation>Class: FuncDataTemplate

Namespace: Avalonia.Controls.Templates

Base: FuncTemplate`2

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="FuncTreeDataTemplateType" mixed="true">
    <xs:complexContent>
      <xs:extension base="FuncDataTemplateType">
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="FuncTreeDataTemplate" mixed="true" type="FuncTreeDataTemplateType">
    <xs:annotation>
      <xs:documentation>Class: FuncTreeDataTemplate

Namespace: Avalonia.Controls.Templates

Base: FuncDataTemplate, FuncTemplate`2

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ControlTemplateResultType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ControlTemplateResult" mixed="true" type="ControlTemplateResultType">
    <xs:annotation>
      <xs:documentation>Class: ControlTemplateResult

Namespace: Avalonia.Controls.Templates

Base: TemplateResult`1

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ArcType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="StartAngle" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Arc.StartAngle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SweepAngle" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Arc.SweepAngle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Fill" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush Shape.Fill</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Stretch" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Stretch Shape.Stretch

enum Stretch = {None, Fill, Uniform, UniformToFill}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Stroke" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush Shape.Stroke</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="StrokeDashArray" type="text">
            <xs:annotation>
              <xs:documentation>Property:

AvaloniaList&amp;lt;double&amp;gt; Shape.StrokeDashArray</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="StrokeDashOffset" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Shape.StrokeDashOffset</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="StrokeThickness" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Shape.StrokeThickness</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="StrokeLineCap" type="text">
            <xs:annotation>
              <xs:documentation>Property:

PenLineCap Shape.StrokeLineCap

enum PenLineCap = {Flat, Round, Square}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="StrokeJoin" type="text">
            <xs:annotation>
              <xs:documentation>Property:

PenLineJoin Shape.StrokeJoin

enum PenLineJoin = {Bevel, Miter, Round}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FocusAdorner" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ITemplate&amp;lt;IControl&amp;gt; Control.FocusAdorner</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextMenu" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ContextMenu Control.ContextMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextFlyout" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FlyoutBase Control.ContextFlyout</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Tag" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object Control.Tag</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Focusable" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.Focusable</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsEnabled</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Cursor" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Cursor InputElement.Cursor</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsHitTestVisible" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsHitTestVisible</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsTabStop" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsTabStop</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TabIndex" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int InputElement.TabIndex</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Width" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.Width</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Height" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.Height</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MinWidth" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MinWidth</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MaxWidth" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MaxWidth</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MinHeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MinHeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MaxHeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MaxHeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Margin" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Thickness Layoutable.Margin</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="HorizontalAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

HorizontalAlignment Layoutable.HorizontalAlignment

enum HorizontalAlignment = {Stretch, Left, Center, Right}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="VerticalAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

VerticalAlignment Layoutable.VerticalAlignment

enum VerticalAlignment = {Stretch, Top, Center, Bottom}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="UseLayoutRounding" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Layoutable.UseLayoutRounding</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ClipToBounds" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Visual.ClipToBounds</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Clip" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Geometry Visual.Clip</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsVisible" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Visual.IsVisible</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Opacity" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Visual.Opacity</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="OpacityMask" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush Visual.OpacityMask</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RenderTransform" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ITransform Visual.RenderTransform</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RenderTransformOrigin" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RelativePoint Visual.RenderTransformOrigin</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ZIndex" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int Visual.ZIndex</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Name" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string StyledElement.Name</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Classes" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Classes StyledElement.Classes</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataContext" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object StyledElement.DataContext</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Resources" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IResourceDictionary StyledElement.Resources</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Clock" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IClock Animatable.Clock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Transitions" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Transitions Animatable.Transitions</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextRequested" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;ContextRequestedEventArgs&amp;gt; Control.ContextRequested</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="GotFocus" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;GotFocusEventArgs&amp;gt; InputElement.GotFocus</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="LostFocus" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.LostFocus</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="KeyDown" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;KeyEventArgs&amp;gt; InputElement.KeyDown</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="KeyUp" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;KeyEventArgs&amp;gt; InputElement.KeyUp</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInput" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputEventArgs&amp;gt; InputElement.TextInput</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInputMethodClientRequested" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputMethodClientRequestedEventArgs&amp;gt; InputElement.TextInputMethodClientRequested</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInputOptionsQuery" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputOptionsQueryEventArgs&amp;gt; InputElement.TextInputOptionsQuery</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerEnter" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerEnter</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerLeave" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerLeave</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerMoved" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerMoved</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerPressed" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerPressedEventArgs&amp;gt; InputElement.PointerPressed</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerReleased" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerReleasedEventArgs&amp;gt; InputElement.PointerReleased</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerCaptureLost" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerCaptureLostEventArgs&amp;gt; InputElement.PointerCaptureLost</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerWheelChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerWheelEventArgs&amp;gt; InputElement.PointerWheelChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Tapped" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.Tapped</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DoubleTapped" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.DoubleTapped</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="EffectiveViewportChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;EffectiveViewportChangedEventArgs&amp;gt; Layoutable.EffectiveViewportChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="LayoutUpdated" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler Layoutable.LayoutUpdated</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AttachedToVisualTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;VisualTreeAttachmentEventArgs&amp;gt; Visual.AttachedToVisualTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DetachedFromVisualTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;VisualTreeAttachmentEventArgs&amp;gt; Visual.DetachedFromVisualTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AttachedToLogicalTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;LogicalTreeAttachmentEventArgs&amp;gt; StyledElement.AttachedToLogicalTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DetachedFromLogicalTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;LogicalTreeAttachmentEventArgs&amp;gt; StyledElement.DetachedFromLogicalTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataContextChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler StyledElement.DataContextChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Initialized" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler StyledElement.Initialized</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ResourcesChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;ResourcesChangedEventArgs&amp;gt; StyledElement.ResourcesChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="Arc" mixed="true" type="ArcType">
    <xs:annotation>
      <xs:documentation>Class: Arc

Namespace: Avalonia.Controls.Shapes

Base: Shape, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, Cursor, DataContext, Fill, Focusable, FocusAdorner, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, RenderTransform, RenderTransformOrigin, Resources, StartAngle, Stretch, Stroke, StrokeDashArray, StrokeDashOffset, StrokeJoin, StrokeLineCap, StrokeThickness, SweepAngle, TabIndex, Tag, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="EllipseType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Fill" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush Shape.Fill</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Stretch" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Stretch Shape.Stretch

enum Stretch = {None, Fill, Uniform, UniformToFill}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Stroke" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush Shape.Stroke</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="StrokeDashArray" type="text">
            <xs:annotation>
              <xs:documentation>Property:

AvaloniaList&amp;lt;double&amp;gt; Shape.StrokeDashArray</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="StrokeDashOffset" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Shape.StrokeDashOffset</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="StrokeThickness" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Shape.StrokeThickness</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="StrokeLineCap" type="text">
            <xs:annotation>
              <xs:documentation>Property:

PenLineCap Shape.StrokeLineCap

enum PenLineCap = {Flat, Round, Square}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="StrokeJoin" type="text">
            <xs:annotation>
              <xs:documentation>Property:

PenLineJoin Shape.StrokeJoin

enum PenLineJoin = {Bevel, Miter, Round}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FocusAdorner" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ITemplate&amp;lt;IControl&amp;gt; Control.FocusAdorner</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextMenu" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ContextMenu Control.ContextMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextFlyout" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FlyoutBase Control.ContextFlyout</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Tag" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object Control.Tag</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Focusable" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.Focusable</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsEnabled</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Cursor" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Cursor InputElement.Cursor</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsHitTestVisible" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsHitTestVisible</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsTabStop" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsTabStop</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TabIndex" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int InputElement.TabIndex</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Width" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.Width</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Height" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.Height</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MinWidth" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MinWidth</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MaxWidth" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MaxWidth</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MinHeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MinHeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MaxHeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MaxHeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Margin" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Thickness Layoutable.Margin</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="HorizontalAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

HorizontalAlignment Layoutable.HorizontalAlignment

enum HorizontalAlignment = {Stretch, Left, Center, Right}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="VerticalAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

VerticalAlignment Layoutable.VerticalAlignment

enum VerticalAlignment = {Stretch, Top, Center, Bottom}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="UseLayoutRounding" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Layoutable.UseLayoutRounding</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ClipToBounds" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Visual.ClipToBounds</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Clip" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Geometry Visual.Clip</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsVisible" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Visual.IsVisible</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Opacity" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Visual.Opacity</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="OpacityMask" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush Visual.OpacityMask</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RenderTransform" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ITransform Visual.RenderTransform</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RenderTransformOrigin" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RelativePoint Visual.RenderTransformOrigin</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ZIndex" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int Visual.ZIndex</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Name" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string StyledElement.Name</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Classes" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Classes StyledElement.Classes</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataContext" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object StyledElement.DataContext</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Resources" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IResourceDictionary StyledElement.Resources</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Clock" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IClock Animatable.Clock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Transitions" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Transitions Animatable.Transitions</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextRequested" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;ContextRequestedEventArgs&amp;gt; Control.ContextRequested</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="GotFocus" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;GotFocusEventArgs&amp;gt; InputElement.GotFocus</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="LostFocus" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.LostFocus</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="KeyDown" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;KeyEventArgs&amp;gt; InputElement.KeyDown</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="KeyUp" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;KeyEventArgs&amp;gt; InputElement.KeyUp</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInput" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputEventArgs&amp;gt; InputElement.TextInput</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInputMethodClientRequested" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputMethodClientRequestedEventArgs&amp;gt; InputElement.TextInputMethodClientRequested</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInputOptionsQuery" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputOptionsQueryEventArgs&amp;gt; InputElement.TextInputOptionsQuery</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerEnter" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerEnter</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerLeave" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerLeave</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerMoved" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerMoved</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerPressed" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerPressedEventArgs&amp;gt; InputElement.PointerPressed</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerReleased" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerReleasedEventArgs&amp;gt; InputElement.PointerReleased</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerCaptureLost" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerCaptureLostEventArgs&amp;gt; InputElement.PointerCaptureLost</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerWheelChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerWheelEventArgs&amp;gt; InputElement.PointerWheelChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Tapped" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.Tapped</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DoubleTapped" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.DoubleTapped</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="EffectiveViewportChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;EffectiveViewportChangedEventArgs&amp;gt; Layoutable.EffectiveViewportChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="LayoutUpdated" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler Layoutable.LayoutUpdated</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AttachedToVisualTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;VisualTreeAttachmentEventArgs&amp;gt; Visual.AttachedToVisualTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DetachedFromVisualTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;VisualTreeAttachmentEventArgs&amp;gt; Visual.DetachedFromVisualTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AttachedToLogicalTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;LogicalTreeAttachmentEventArgs&amp;gt; StyledElement.AttachedToLogicalTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DetachedFromLogicalTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;LogicalTreeAttachmentEventArgs&amp;gt; StyledElement.DetachedFromLogicalTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataContextChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler StyledElement.DataContextChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Initialized" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler StyledElement.Initialized</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ResourcesChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;ResourcesChangedEventArgs&amp;gt; StyledElement.ResourcesChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="Ellipse" mixed="true" type="EllipseType">
    <xs:annotation>
      <xs:documentation>Class: Ellipse

Namespace: Avalonia.Controls.Shapes

Base: Shape, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, Cursor, DataContext, Fill, Focusable, FocusAdorner, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, RenderTransform, RenderTransformOrigin, Resources, Stretch, Stroke, StrokeDashArray, StrokeDashOffset, StrokeJoin, StrokeLineCap, StrokeThickness, TabIndex, Tag, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="LineType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="StartPoint" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Point Line.StartPoint</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="EndPoint" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Point Line.EndPoint</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Fill" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush Shape.Fill</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Stretch" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Stretch Shape.Stretch

enum Stretch = {None, Fill, Uniform, UniformToFill}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Stroke" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush Shape.Stroke</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="StrokeDashArray" type="text">
            <xs:annotation>
              <xs:documentation>Property:

AvaloniaList&amp;lt;double&amp;gt; Shape.StrokeDashArray</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="StrokeDashOffset" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Shape.StrokeDashOffset</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="StrokeThickness" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Shape.StrokeThickness</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="StrokeLineCap" type="text">
            <xs:annotation>
              <xs:documentation>Property:

PenLineCap Shape.StrokeLineCap

enum PenLineCap = {Flat, Round, Square}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="StrokeJoin" type="text">
            <xs:annotation>
              <xs:documentation>Property:

PenLineJoin Shape.StrokeJoin

enum PenLineJoin = {Bevel, Miter, Round}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FocusAdorner" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ITemplate&amp;lt;IControl&amp;gt; Control.FocusAdorner</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextMenu" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ContextMenu Control.ContextMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextFlyout" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FlyoutBase Control.ContextFlyout</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Tag" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object Control.Tag</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Focusable" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.Focusable</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsEnabled</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Cursor" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Cursor InputElement.Cursor</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsHitTestVisible" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsHitTestVisible</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsTabStop" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsTabStop</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TabIndex" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int InputElement.TabIndex</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Width" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.Width</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Height" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.Height</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MinWidth" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MinWidth</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MaxWidth" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MaxWidth</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MinHeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MinHeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MaxHeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MaxHeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Margin" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Thickness Layoutable.Margin</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="HorizontalAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

HorizontalAlignment Layoutable.HorizontalAlignment

enum HorizontalAlignment = {Stretch, Left, Center, Right}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="VerticalAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

VerticalAlignment Layoutable.VerticalAlignment

enum VerticalAlignment = {Stretch, Top, Center, Bottom}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="UseLayoutRounding" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Layoutable.UseLayoutRounding</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ClipToBounds" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Visual.ClipToBounds</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Clip" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Geometry Visual.Clip</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsVisible" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Visual.IsVisible</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Opacity" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Visual.Opacity</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="OpacityMask" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush Visual.OpacityMask</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RenderTransform" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ITransform Visual.RenderTransform</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RenderTransformOrigin" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RelativePoint Visual.RenderTransformOrigin</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ZIndex" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int Visual.ZIndex</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Name" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string StyledElement.Name</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Classes" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Classes StyledElement.Classes</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataContext" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object StyledElement.DataContext</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Resources" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IResourceDictionary StyledElement.Resources</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Clock" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IClock Animatable.Clock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Transitions" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Transitions Animatable.Transitions</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextRequested" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;ContextRequestedEventArgs&amp;gt; Control.ContextRequested</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="GotFocus" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;GotFocusEventArgs&amp;gt; InputElement.GotFocus</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="LostFocus" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.LostFocus</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="KeyDown" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;KeyEventArgs&amp;gt; InputElement.KeyDown</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="KeyUp" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;KeyEventArgs&amp;gt; InputElement.KeyUp</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInput" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputEventArgs&amp;gt; InputElement.TextInput</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInputMethodClientRequested" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputMethodClientRequestedEventArgs&amp;gt; InputElement.TextInputMethodClientRequested</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInputOptionsQuery" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputOptionsQueryEventArgs&amp;gt; InputElement.TextInputOptionsQuery</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerEnter" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerEnter</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerLeave" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerLeave</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerMoved" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerMoved</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerPressed" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerPressedEventArgs&amp;gt; InputElement.PointerPressed</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerReleased" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerReleasedEventArgs&amp;gt; InputElement.PointerReleased</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerCaptureLost" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerCaptureLostEventArgs&amp;gt; InputElement.PointerCaptureLost</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerWheelChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerWheelEventArgs&amp;gt; InputElement.PointerWheelChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Tapped" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.Tapped</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DoubleTapped" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.DoubleTapped</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="EffectiveViewportChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;EffectiveViewportChangedEventArgs&amp;gt; Layoutable.EffectiveViewportChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="LayoutUpdated" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler Layoutable.LayoutUpdated</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AttachedToVisualTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;VisualTreeAttachmentEventArgs&amp;gt; Visual.AttachedToVisualTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DetachedFromVisualTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;VisualTreeAttachmentEventArgs&amp;gt; Visual.DetachedFromVisualTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AttachedToLogicalTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;LogicalTreeAttachmentEventArgs&amp;gt; StyledElement.AttachedToLogicalTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DetachedFromLogicalTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;LogicalTreeAttachmentEventArgs&amp;gt; StyledElement.DetachedFromLogicalTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataContextChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler StyledElement.DataContextChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Initialized" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler StyledElement.Initialized</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ResourcesChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;ResourcesChangedEventArgs&amp;gt; StyledElement.ResourcesChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="Line" mixed="true" type="LineType">
    <xs:annotation>
      <xs:documentation>Class: Line

Namespace: Avalonia.Controls.Shapes

Base: Shape, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, Cursor, DataContext, EndPoint, Fill, Focusable, FocusAdorner, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, RenderTransform, RenderTransformOrigin, Resources, StartPoint, Stretch, Stroke, StrokeDashArray, StrokeDashOffset, StrokeJoin, StrokeLineCap, StrokeThickness, TabIndex, Tag, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="PathType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Data" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Geometry Path.Data</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Fill" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush Shape.Fill</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Stretch" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Stretch Shape.Stretch

enum Stretch = {None, Fill, Uniform, UniformToFill}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Stroke" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush Shape.Stroke</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="StrokeDashArray" type="text">
            <xs:annotation>
              <xs:documentation>Property:

AvaloniaList&amp;lt;double&amp;gt; Shape.StrokeDashArray</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="StrokeDashOffset" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Shape.StrokeDashOffset</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="StrokeThickness" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Shape.StrokeThickness</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="StrokeLineCap" type="text">
            <xs:annotation>
              <xs:documentation>Property:

PenLineCap Shape.StrokeLineCap

enum PenLineCap = {Flat, Round, Square}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="StrokeJoin" type="text">
            <xs:annotation>
              <xs:documentation>Property:

PenLineJoin Shape.StrokeJoin

enum PenLineJoin = {Bevel, Miter, Round}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FocusAdorner" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ITemplate&amp;lt;IControl&amp;gt; Control.FocusAdorner</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextMenu" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ContextMenu Control.ContextMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextFlyout" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FlyoutBase Control.ContextFlyout</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Tag" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object Control.Tag</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Focusable" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.Focusable</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsEnabled</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Cursor" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Cursor InputElement.Cursor</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsHitTestVisible" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsHitTestVisible</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsTabStop" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsTabStop</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TabIndex" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int InputElement.TabIndex</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Width" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.Width</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Height" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.Height</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MinWidth" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MinWidth</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MaxWidth" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MaxWidth</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MinHeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MinHeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MaxHeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MaxHeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Margin" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Thickness Layoutable.Margin</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="HorizontalAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

HorizontalAlignment Layoutable.HorizontalAlignment

enum HorizontalAlignment = {Stretch, Left, Center, Right}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="VerticalAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

VerticalAlignment Layoutable.VerticalAlignment

enum VerticalAlignment = {Stretch, Top, Center, Bottom}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="UseLayoutRounding" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Layoutable.UseLayoutRounding</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ClipToBounds" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Visual.ClipToBounds</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Clip" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Geometry Visual.Clip</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsVisible" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Visual.IsVisible</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Opacity" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Visual.Opacity</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="OpacityMask" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush Visual.OpacityMask</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RenderTransform" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ITransform Visual.RenderTransform</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RenderTransformOrigin" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RelativePoint Visual.RenderTransformOrigin</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ZIndex" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int Visual.ZIndex</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Name" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string StyledElement.Name</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Classes" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Classes StyledElement.Classes</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataContext" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object StyledElement.DataContext</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Resources" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IResourceDictionary StyledElement.Resources</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Clock" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IClock Animatable.Clock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Transitions" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Transitions Animatable.Transitions</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextRequested" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;ContextRequestedEventArgs&amp;gt; Control.ContextRequested</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="GotFocus" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;GotFocusEventArgs&amp;gt; InputElement.GotFocus</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="LostFocus" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.LostFocus</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="KeyDown" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;KeyEventArgs&amp;gt; InputElement.KeyDown</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="KeyUp" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;KeyEventArgs&amp;gt; InputElement.KeyUp</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInput" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputEventArgs&amp;gt; InputElement.TextInput</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInputMethodClientRequested" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputMethodClientRequestedEventArgs&amp;gt; InputElement.TextInputMethodClientRequested</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInputOptionsQuery" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputOptionsQueryEventArgs&amp;gt; InputElement.TextInputOptionsQuery</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerEnter" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerEnter</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerLeave" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerLeave</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerMoved" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerMoved</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerPressed" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerPressedEventArgs&amp;gt; InputElement.PointerPressed</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerReleased" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerReleasedEventArgs&amp;gt; InputElement.PointerReleased</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerCaptureLost" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerCaptureLostEventArgs&amp;gt; InputElement.PointerCaptureLost</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerWheelChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerWheelEventArgs&amp;gt; InputElement.PointerWheelChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Tapped" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.Tapped</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DoubleTapped" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.DoubleTapped</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="EffectiveViewportChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;EffectiveViewportChangedEventArgs&amp;gt; Layoutable.EffectiveViewportChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="LayoutUpdated" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler Layoutable.LayoutUpdated</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AttachedToVisualTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;VisualTreeAttachmentEventArgs&amp;gt; Visual.AttachedToVisualTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DetachedFromVisualTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;VisualTreeAttachmentEventArgs&amp;gt; Visual.DetachedFromVisualTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AttachedToLogicalTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;LogicalTreeAttachmentEventArgs&amp;gt; StyledElement.AttachedToLogicalTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DetachedFromLogicalTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;LogicalTreeAttachmentEventArgs&amp;gt; StyledElement.DetachedFromLogicalTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataContextChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler StyledElement.DataContextChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Initialized" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler StyledElement.Initialized</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ResourcesChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;ResourcesChangedEventArgs&amp;gt; StyledElement.ResourcesChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="Path" mixed="true" type="PathType">
    <xs:annotation>
      <xs:documentation>Class: Path

Namespace: Avalonia.Controls.Shapes

Base: Shape, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, Cursor, Data, DataContext, Fill, Focusable, FocusAdorner, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, RenderTransform, RenderTransformOrigin, Resources, Stretch, Stroke, StrokeDashArray, StrokeDashOffset, StrokeJoin, StrokeLineCap, StrokeThickness, TabIndex, Tag, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="PolygonType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Points" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IList&amp;lt;Point&amp;gt; Polygon.Points</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Fill" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush Shape.Fill</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Stretch" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Stretch Shape.Stretch

enum Stretch = {None, Fill, Uniform, UniformToFill}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Stroke" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush Shape.Stroke</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="StrokeDashArray" type="text">
            <xs:annotation>
              <xs:documentation>Property:

AvaloniaList&amp;lt;double&amp;gt; Shape.StrokeDashArray</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="StrokeDashOffset" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Shape.StrokeDashOffset</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="StrokeThickness" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Shape.StrokeThickness</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="StrokeLineCap" type="text">
            <xs:annotation>
              <xs:documentation>Property:

PenLineCap Shape.StrokeLineCap

enum PenLineCap = {Flat, Round, Square}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="StrokeJoin" type="text">
            <xs:annotation>
              <xs:documentation>Property:

PenLineJoin Shape.StrokeJoin

enum PenLineJoin = {Bevel, Miter, Round}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FocusAdorner" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ITemplate&amp;lt;IControl&amp;gt; Control.FocusAdorner</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextMenu" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ContextMenu Control.ContextMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextFlyout" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FlyoutBase Control.ContextFlyout</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Tag" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object Control.Tag</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Focusable" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.Focusable</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsEnabled</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Cursor" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Cursor InputElement.Cursor</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsHitTestVisible" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsHitTestVisible</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsTabStop" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsTabStop</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TabIndex" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int InputElement.TabIndex</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Width" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.Width</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Height" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.Height</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MinWidth" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MinWidth</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MaxWidth" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MaxWidth</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MinHeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MinHeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MaxHeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MaxHeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Margin" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Thickness Layoutable.Margin</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="HorizontalAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

HorizontalAlignment Layoutable.HorizontalAlignment

enum HorizontalAlignment = {Stretch, Left, Center, Right}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="VerticalAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

VerticalAlignment Layoutable.VerticalAlignment

enum VerticalAlignment = {Stretch, Top, Center, Bottom}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="UseLayoutRounding" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Layoutable.UseLayoutRounding</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ClipToBounds" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Visual.ClipToBounds</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Clip" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Geometry Visual.Clip</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsVisible" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Visual.IsVisible</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Opacity" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Visual.Opacity</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="OpacityMask" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush Visual.OpacityMask</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RenderTransform" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ITransform Visual.RenderTransform</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RenderTransformOrigin" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RelativePoint Visual.RenderTransformOrigin</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ZIndex" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int Visual.ZIndex</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Name" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string StyledElement.Name</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Classes" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Classes StyledElement.Classes</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataContext" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object StyledElement.DataContext</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Resources" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IResourceDictionary StyledElement.Resources</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Clock" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IClock Animatable.Clock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Transitions" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Transitions Animatable.Transitions</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextRequested" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;ContextRequestedEventArgs&amp;gt; Control.ContextRequested</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="GotFocus" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;GotFocusEventArgs&amp;gt; InputElement.GotFocus</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="LostFocus" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.LostFocus</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="KeyDown" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;KeyEventArgs&amp;gt; InputElement.KeyDown</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="KeyUp" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;KeyEventArgs&amp;gt; InputElement.KeyUp</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInput" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputEventArgs&amp;gt; InputElement.TextInput</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInputMethodClientRequested" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputMethodClientRequestedEventArgs&amp;gt; InputElement.TextInputMethodClientRequested</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInputOptionsQuery" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputOptionsQueryEventArgs&amp;gt; InputElement.TextInputOptionsQuery</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerEnter" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerEnter</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerLeave" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerLeave</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerMoved" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerMoved</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerPressed" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerPressedEventArgs&amp;gt; InputElement.PointerPressed</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerReleased" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerReleasedEventArgs&amp;gt; InputElement.PointerReleased</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerCaptureLost" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerCaptureLostEventArgs&amp;gt; InputElement.PointerCaptureLost</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerWheelChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerWheelEventArgs&amp;gt; InputElement.PointerWheelChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Tapped" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.Tapped</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DoubleTapped" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.DoubleTapped</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="EffectiveViewportChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;EffectiveViewportChangedEventArgs&amp;gt; Layoutable.EffectiveViewportChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="LayoutUpdated" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler Layoutable.LayoutUpdated</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AttachedToVisualTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;VisualTreeAttachmentEventArgs&amp;gt; Visual.AttachedToVisualTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DetachedFromVisualTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;VisualTreeAttachmentEventArgs&amp;gt; Visual.DetachedFromVisualTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AttachedToLogicalTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;LogicalTreeAttachmentEventArgs&amp;gt; StyledElement.AttachedToLogicalTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DetachedFromLogicalTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;LogicalTreeAttachmentEventArgs&amp;gt; StyledElement.DetachedFromLogicalTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataContextChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler StyledElement.DataContextChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Initialized" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler StyledElement.Initialized</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ResourcesChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;ResourcesChangedEventArgs&amp;gt; StyledElement.ResourcesChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="Polygon" mixed="true" type="PolygonType">
    <xs:annotation>
      <xs:documentation>Class: Polygon

Namespace: Avalonia.Controls.Shapes

Base: Shape, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, Cursor, DataContext, Fill, Focusable, FocusAdorner, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Points, RenderTransform, RenderTransformOrigin, Resources, Stretch, Stroke, StrokeDashArray, StrokeDashOffset, StrokeJoin, StrokeLineCap, StrokeThickness, TabIndex, Tag, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="PolylineType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Points" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IList&amp;lt;Point&amp;gt; Polyline.Points</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Fill" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush Shape.Fill</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Stretch" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Stretch Shape.Stretch

enum Stretch = {None, Fill, Uniform, UniformToFill}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Stroke" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush Shape.Stroke</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="StrokeDashArray" type="text">
            <xs:annotation>
              <xs:documentation>Property:

AvaloniaList&amp;lt;double&amp;gt; Shape.StrokeDashArray</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="StrokeDashOffset" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Shape.StrokeDashOffset</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="StrokeThickness" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Shape.StrokeThickness</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="StrokeLineCap" type="text">
            <xs:annotation>
              <xs:documentation>Property:

PenLineCap Shape.StrokeLineCap

enum PenLineCap = {Flat, Round, Square}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="StrokeJoin" type="text">
            <xs:annotation>
              <xs:documentation>Property:

PenLineJoin Shape.StrokeJoin

enum PenLineJoin = {Bevel, Miter, Round}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FocusAdorner" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ITemplate&amp;lt;IControl&amp;gt; Control.FocusAdorner</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextMenu" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ContextMenu Control.ContextMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextFlyout" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FlyoutBase Control.ContextFlyout</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Tag" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object Control.Tag</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Focusable" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.Focusable</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsEnabled</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Cursor" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Cursor InputElement.Cursor</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsHitTestVisible" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsHitTestVisible</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsTabStop" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsTabStop</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TabIndex" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int InputElement.TabIndex</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Width" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.Width</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Height" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.Height</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MinWidth" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MinWidth</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MaxWidth" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MaxWidth</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MinHeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MinHeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MaxHeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MaxHeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Margin" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Thickness Layoutable.Margin</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="HorizontalAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

HorizontalAlignment Layoutable.HorizontalAlignment

enum HorizontalAlignment = {Stretch, Left, Center, Right}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="VerticalAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

VerticalAlignment Layoutable.VerticalAlignment

enum VerticalAlignment = {Stretch, Top, Center, Bottom}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="UseLayoutRounding" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Layoutable.UseLayoutRounding</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ClipToBounds" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Visual.ClipToBounds</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Clip" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Geometry Visual.Clip</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsVisible" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Visual.IsVisible</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Opacity" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Visual.Opacity</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="OpacityMask" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush Visual.OpacityMask</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RenderTransform" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ITransform Visual.RenderTransform</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RenderTransformOrigin" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RelativePoint Visual.RenderTransformOrigin</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ZIndex" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int Visual.ZIndex</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Name" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string StyledElement.Name</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Classes" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Classes StyledElement.Classes</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataContext" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object StyledElement.DataContext</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Resources" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IResourceDictionary StyledElement.Resources</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Clock" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IClock Animatable.Clock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Transitions" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Transitions Animatable.Transitions</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextRequested" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;ContextRequestedEventArgs&amp;gt; Control.ContextRequested</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="GotFocus" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;GotFocusEventArgs&amp;gt; InputElement.GotFocus</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="LostFocus" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.LostFocus</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="KeyDown" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;KeyEventArgs&amp;gt; InputElement.KeyDown</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="KeyUp" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;KeyEventArgs&amp;gt; InputElement.KeyUp</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInput" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputEventArgs&amp;gt; InputElement.TextInput</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInputMethodClientRequested" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputMethodClientRequestedEventArgs&amp;gt; InputElement.TextInputMethodClientRequested</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInputOptionsQuery" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputOptionsQueryEventArgs&amp;gt; InputElement.TextInputOptionsQuery</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerEnter" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerEnter</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerLeave" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerLeave</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerMoved" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerMoved</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerPressed" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerPressedEventArgs&amp;gt; InputElement.PointerPressed</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerReleased" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerReleasedEventArgs&amp;gt; InputElement.PointerReleased</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerCaptureLost" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerCaptureLostEventArgs&amp;gt; InputElement.PointerCaptureLost</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerWheelChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerWheelEventArgs&amp;gt; InputElement.PointerWheelChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Tapped" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.Tapped</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DoubleTapped" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.DoubleTapped</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="EffectiveViewportChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;EffectiveViewportChangedEventArgs&amp;gt; Layoutable.EffectiveViewportChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="LayoutUpdated" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler Layoutable.LayoutUpdated</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AttachedToVisualTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;VisualTreeAttachmentEventArgs&amp;gt; Visual.AttachedToVisualTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DetachedFromVisualTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;VisualTreeAttachmentEventArgs&amp;gt; Visual.DetachedFromVisualTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AttachedToLogicalTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;LogicalTreeAttachmentEventArgs&amp;gt; StyledElement.AttachedToLogicalTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DetachedFromLogicalTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;LogicalTreeAttachmentEventArgs&amp;gt; StyledElement.DetachedFromLogicalTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataContextChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler StyledElement.DataContextChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Initialized" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler StyledElement.Initialized</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ResourcesChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;ResourcesChangedEventArgs&amp;gt; StyledElement.ResourcesChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="Polyline" mixed="true" type="PolylineType">
    <xs:annotation>
      <xs:documentation>Class: Polyline

Namespace: Avalonia.Controls.Shapes

Base: Shape, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, Cursor, DataContext, Fill, Focusable, FocusAdorner, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Points, RenderTransform, RenderTransformOrigin, Resources, Stretch, Stroke, StrokeDashArray, StrokeDashOffset, StrokeJoin, StrokeLineCap, StrokeThickness, TabIndex, Tag, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="RectangleType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Fill" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush Shape.Fill</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Stretch" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Stretch Shape.Stretch

enum Stretch = {None, Fill, Uniform, UniformToFill}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Stroke" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush Shape.Stroke</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="StrokeDashArray" type="text">
            <xs:annotation>
              <xs:documentation>Property:

AvaloniaList&amp;lt;double&amp;gt; Shape.StrokeDashArray</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="StrokeDashOffset" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Shape.StrokeDashOffset</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="StrokeThickness" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Shape.StrokeThickness</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="StrokeLineCap" type="text">
            <xs:annotation>
              <xs:documentation>Property:

PenLineCap Shape.StrokeLineCap

enum PenLineCap = {Flat, Round, Square}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="StrokeJoin" type="text">
            <xs:annotation>
              <xs:documentation>Property:

PenLineJoin Shape.StrokeJoin

enum PenLineJoin = {Bevel, Miter, Round}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FocusAdorner" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ITemplate&amp;lt;IControl&amp;gt; Control.FocusAdorner</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextMenu" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ContextMenu Control.ContextMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextFlyout" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FlyoutBase Control.ContextFlyout</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Tag" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object Control.Tag</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Focusable" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.Focusable</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsEnabled</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Cursor" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Cursor InputElement.Cursor</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsHitTestVisible" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsHitTestVisible</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsTabStop" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsTabStop</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TabIndex" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int InputElement.TabIndex</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Width" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.Width</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Height" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.Height</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MinWidth" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MinWidth</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MaxWidth" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MaxWidth</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MinHeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MinHeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MaxHeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MaxHeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Margin" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Thickness Layoutable.Margin</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="HorizontalAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

HorizontalAlignment Layoutable.HorizontalAlignment

enum HorizontalAlignment = {Stretch, Left, Center, Right}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="VerticalAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

VerticalAlignment Layoutable.VerticalAlignment

enum VerticalAlignment = {Stretch, Top, Center, Bottom}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="UseLayoutRounding" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Layoutable.UseLayoutRounding</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ClipToBounds" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Visual.ClipToBounds</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Clip" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Geometry Visual.Clip</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsVisible" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Visual.IsVisible</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Opacity" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Visual.Opacity</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="OpacityMask" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush Visual.OpacityMask</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RenderTransform" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ITransform Visual.RenderTransform</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RenderTransformOrigin" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RelativePoint Visual.RenderTransformOrigin</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ZIndex" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int Visual.ZIndex</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Name" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string StyledElement.Name</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Classes" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Classes StyledElement.Classes</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataContext" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object StyledElement.DataContext</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Resources" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IResourceDictionary StyledElement.Resources</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Clock" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IClock Animatable.Clock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Transitions" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Transitions Animatable.Transitions</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextRequested" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;ContextRequestedEventArgs&amp;gt; Control.ContextRequested</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="GotFocus" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;GotFocusEventArgs&amp;gt; InputElement.GotFocus</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="LostFocus" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.LostFocus</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="KeyDown" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;KeyEventArgs&amp;gt; InputElement.KeyDown</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="KeyUp" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;KeyEventArgs&amp;gt; InputElement.KeyUp</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInput" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputEventArgs&amp;gt; InputElement.TextInput</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInputMethodClientRequested" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputMethodClientRequestedEventArgs&amp;gt; InputElement.TextInputMethodClientRequested</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInputOptionsQuery" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputOptionsQueryEventArgs&amp;gt; InputElement.TextInputOptionsQuery</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerEnter" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerEnter</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerLeave" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerLeave</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerMoved" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerMoved</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerPressed" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerPressedEventArgs&amp;gt; InputElement.PointerPressed</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerReleased" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerReleasedEventArgs&amp;gt; InputElement.PointerReleased</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerCaptureLost" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerCaptureLostEventArgs&amp;gt; InputElement.PointerCaptureLost</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerWheelChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerWheelEventArgs&amp;gt; InputElement.PointerWheelChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Tapped" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.Tapped</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DoubleTapped" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.DoubleTapped</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="EffectiveViewportChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;EffectiveViewportChangedEventArgs&amp;gt; Layoutable.EffectiveViewportChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="LayoutUpdated" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler Layoutable.LayoutUpdated</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AttachedToVisualTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;VisualTreeAttachmentEventArgs&amp;gt; Visual.AttachedToVisualTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DetachedFromVisualTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;VisualTreeAttachmentEventArgs&amp;gt; Visual.DetachedFromVisualTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AttachedToLogicalTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;LogicalTreeAttachmentEventArgs&amp;gt; StyledElement.AttachedToLogicalTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DetachedFromLogicalTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;LogicalTreeAttachmentEventArgs&amp;gt; StyledElement.DetachedFromLogicalTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataContextChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler StyledElement.DataContextChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Initialized" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler StyledElement.Initialized</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ResourcesChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;ResourcesChangedEventArgs&amp;gt; StyledElement.ResourcesChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="Rectangle" mixed="true" type="RectangleType">
    <xs:annotation>
      <xs:documentation>Class: Rectangle

Namespace: Avalonia.Controls.Shapes

Base: Shape, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, Cursor, DataContext, Fill, Focusable, FocusAdorner, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, RenderTransform, RenderTransformOrigin, Resources, Stretch, Stroke, StrokeDashArray, StrokeDashOffset, StrokeJoin, StrokeLineCap, StrokeThickness, TabIndex, Tag, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="CarouselPresenterType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsVirtualized" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool CarouselPresenter.IsVirtualized</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SelectedIndex" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int CarouselPresenter.SelectedIndex</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PageTransition" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IPageTransition CarouselPresenter.PageTransition</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Items" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IEnumerable ItemsPresenterBase.Items</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ItemsPanel" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ITemplate&amp;lt;IPanel&amp;gt; ItemsPresenterBase.ItemsPanel</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ItemTemplate" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IDataTemplate ItemsPresenterBase.ItemTemplate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FocusAdorner" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ITemplate&amp;lt;IControl&amp;gt; Control.FocusAdorner</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextMenu" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ContextMenu Control.ContextMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextFlyout" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FlyoutBase Control.ContextFlyout</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Tag" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object Control.Tag</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Focusable" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.Focusable</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsEnabled</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Cursor" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Cursor InputElement.Cursor</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsHitTestVisible" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsHitTestVisible</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsTabStop" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsTabStop</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TabIndex" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int InputElement.TabIndex</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Width" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.Width</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Height" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.Height</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MinWidth" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MinWidth</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MaxWidth" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MaxWidth</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MinHeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MinHeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MaxHeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MaxHeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Margin" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Thickness Layoutable.Margin</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="HorizontalAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

HorizontalAlignment Layoutable.HorizontalAlignment

enum HorizontalAlignment = {Stretch, Left, Center, Right}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="VerticalAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

VerticalAlignment Layoutable.VerticalAlignment

enum VerticalAlignment = {Stretch, Top, Center, Bottom}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="UseLayoutRounding" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Layoutable.UseLayoutRounding</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ClipToBounds" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Visual.ClipToBounds</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Clip" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Geometry Visual.Clip</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsVisible" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Visual.IsVisible</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Opacity" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Visual.Opacity</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="OpacityMask" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush Visual.OpacityMask</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RenderTransform" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ITransform Visual.RenderTransform</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RenderTransformOrigin" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RelativePoint Visual.RenderTransformOrigin</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ZIndex" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int Visual.ZIndex</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Name" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string StyledElement.Name</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Classes" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Classes StyledElement.Classes</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataContext" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object StyledElement.DataContext</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Resources" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IResourceDictionary StyledElement.Resources</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Clock" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IClock Animatable.Clock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Transitions" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Transitions Animatable.Transitions</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextRequested" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;ContextRequestedEventArgs&amp;gt; Control.ContextRequested</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="GotFocus" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;GotFocusEventArgs&amp;gt; InputElement.GotFocus</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="LostFocus" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.LostFocus</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="KeyDown" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;KeyEventArgs&amp;gt; InputElement.KeyDown</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="KeyUp" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;KeyEventArgs&amp;gt; InputElement.KeyUp</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInput" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputEventArgs&amp;gt; InputElement.TextInput</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInputMethodClientRequested" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputMethodClientRequestedEventArgs&amp;gt; InputElement.TextInputMethodClientRequested</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInputOptionsQuery" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputOptionsQueryEventArgs&amp;gt; InputElement.TextInputOptionsQuery</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerEnter" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerEnter</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerLeave" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerLeave</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerMoved" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerMoved</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerPressed" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerPressedEventArgs&amp;gt; InputElement.PointerPressed</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerReleased" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerReleasedEventArgs&amp;gt; InputElement.PointerReleased</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerCaptureLost" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerCaptureLostEventArgs&amp;gt; InputElement.PointerCaptureLost</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerWheelChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerWheelEventArgs&amp;gt; InputElement.PointerWheelChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Tapped" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.Tapped</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DoubleTapped" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.DoubleTapped</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="EffectiveViewportChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;EffectiveViewportChangedEventArgs&amp;gt; Layoutable.EffectiveViewportChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="LayoutUpdated" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler Layoutable.LayoutUpdated</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AttachedToVisualTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;VisualTreeAttachmentEventArgs&amp;gt; Visual.AttachedToVisualTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DetachedFromVisualTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;VisualTreeAttachmentEventArgs&amp;gt; Visual.DetachedFromVisualTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AttachedToLogicalTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;LogicalTreeAttachmentEventArgs&amp;gt; StyledElement.AttachedToLogicalTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DetachedFromLogicalTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;LogicalTreeAttachmentEventArgs&amp;gt; StyledElement.DetachedFromLogicalTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataContextChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler StyledElement.DataContextChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Initialized" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler StyledElement.Initialized</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ResourcesChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;ResourcesChangedEventArgs&amp;gt; StyledElement.ResourcesChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="CarouselPresenter" mixed="true" type="CarouselPresenterType">
    <xs:annotation>
      <xs:documentation>Class: CarouselPresenter

Namespace: Avalonia.Controls.Presenters

Base: ItemsPresenterBase, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, Cursor, DataContext, Focusable, FocusAdorner, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVirtualized, IsVisible, Item, Items, ItemsPanel, ItemTemplate, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, PageTransition, RenderTransform, RenderTransformOrigin, Resources, SelectedIndex, TabIndex, Tag, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ContentPresenterType" mixed="true">
    <xs:complexContent>
      <xs:extension base="ControlType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Background" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush ContentPresenter.Background</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="BorderBrush" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush ContentPresenter.BorderBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="BorderThickness" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Thickness ContentPresenter.BorderThickness</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CornerRadius" type="text">
            <xs:annotation>
              <xs:documentation>Property:

CornerRadius ContentPresenter.CornerRadius</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="BoxShadow" type="text">
            <xs:annotation>
              <xs:documentation>Property:

BoxShadows ContentPresenter.BoxShadow</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Content" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object ContentPresenter.Content</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContentTemplate" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IDataTemplate ContentPresenter.ContentTemplate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="HorizontalContentAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

HorizontalAlignment ContentPresenter.HorizontalContentAlignment

enum HorizontalAlignment = {Stretch, Left, Center, Right}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="VerticalContentAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

VerticalAlignment ContentPresenter.VerticalContentAlignment

enum VerticalAlignment = {Stretch, Top, Center, Bottom}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Padding" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Thickness ContentPresenter.Padding</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RecognizesAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool ContentPresenter.RecognizesAccessKey</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ContentPresenter" mixed="true" type="ContentPresenterType">
    <xs:annotation>
      <xs:documentation>Class: ContentPresenter

Namespace: Avalonia.Controls.Presenters

Base: Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, BorderBrush, BorderThickness, BoxShadow, Classes, Clip, ClipToBounds, Clock, Content, ContentTemplate, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Focusable, FocusAdorner, Height, HorizontalAlignment, HorizontalContentAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, RecognizesAccessKey, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Transitions, UseLayoutRounding, VerticalAlignment, VerticalContentAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ItemsPresenterType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="VirtualizationMode" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ItemVirtualizationMode ItemsPresenter.VirtualizationMode

enum ItemVirtualizationMode = {None, Simple}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Items" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IEnumerable ItemsPresenterBase.Items</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ItemsPanel" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ITemplate&amp;lt;IPanel&amp;gt; ItemsPresenterBase.ItemsPanel</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ItemTemplate" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IDataTemplate ItemsPresenterBase.ItemTemplate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FocusAdorner" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ITemplate&amp;lt;IControl&amp;gt; Control.FocusAdorner</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextMenu" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ContextMenu Control.ContextMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextFlyout" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FlyoutBase Control.ContextFlyout</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Tag" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object Control.Tag</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Focusable" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.Focusable</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsEnabled</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Cursor" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Cursor InputElement.Cursor</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsHitTestVisible" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsHitTestVisible</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsTabStop" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsTabStop</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TabIndex" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int InputElement.TabIndex</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Width" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.Width</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Height" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.Height</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MinWidth" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MinWidth</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MaxWidth" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MaxWidth</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MinHeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MinHeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MaxHeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MaxHeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Margin" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Thickness Layoutable.Margin</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="HorizontalAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

HorizontalAlignment Layoutable.HorizontalAlignment

enum HorizontalAlignment = {Stretch, Left, Center, Right}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="VerticalAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

VerticalAlignment Layoutable.VerticalAlignment

enum VerticalAlignment = {Stretch, Top, Center, Bottom}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="UseLayoutRounding" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Layoutable.UseLayoutRounding</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ClipToBounds" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Visual.ClipToBounds</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Clip" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Geometry Visual.Clip</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsVisible" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Visual.IsVisible</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Opacity" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Visual.Opacity</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="OpacityMask" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush Visual.OpacityMask</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RenderTransform" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ITransform Visual.RenderTransform</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RenderTransformOrigin" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RelativePoint Visual.RenderTransformOrigin</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ZIndex" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int Visual.ZIndex</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Name" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string StyledElement.Name</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Classes" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Classes StyledElement.Classes</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataContext" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object StyledElement.DataContext</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Resources" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IResourceDictionary StyledElement.Resources</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Clock" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IClock Animatable.Clock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Transitions" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Transitions Animatable.Transitions</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextRequested" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;ContextRequestedEventArgs&amp;gt; Control.ContextRequested</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="GotFocus" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;GotFocusEventArgs&amp;gt; InputElement.GotFocus</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="LostFocus" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.LostFocus</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="KeyDown" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;KeyEventArgs&amp;gt; InputElement.KeyDown</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="KeyUp" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;KeyEventArgs&amp;gt; InputElement.KeyUp</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInput" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputEventArgs&amp;gt; InputElement.TextInput</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInputMethodClientRequested" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputMethodClientRequestedEventArgs&amp;gt; InputElement.TextInputMethodClientRequested</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInputOptionsQuery" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputOptionsQueryEventArgs&amp;gt; InputElement.TextInputOptionsQuery</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerEnter" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerEnter</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerLeave" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerLeave</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerMoved" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerMoved</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerPressed" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerPressedEventArgs&amp;gt; InputElement.PointerPressed</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerReleased" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerReleasedEventArgs&amp;gt; InputElement.PointerReleased</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerCaptureLost" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerCaptureLostEventArgs&amp;gt; InputElement.PointerCaptureLost</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerWheelChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerWheelEventArgs&amp;gt; InputElement.PointerWheelChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Tapped" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.Tapped</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DoubleTapped" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.DoubleTapped</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="EffectiveViewportChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;EffectiveViewportChangedEventArgs&amp;gt; Layoutable.EffectiveViewportChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="LayoutUpdated" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler Layoutable.LayoutUpdated</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AttachedToVisualTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;VisualTreeAttachmentEventArgs&amp;gt; Visual.AttachedToVisualTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DetachedFromVisualTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;VisualTreeAttachmentEventArgs&amp;gt; Visual.DetachedFromVisualTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AttachedToLogicalTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;LogicalTreeAttachmentEventArgs&amp;gt; StyledElement.AttachedToLogicalTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DetachedFromLogicalTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;LogicalTreeAttachmentEventArgs&amp;gt; StyledElement.DetachedFromLogicalTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataContextChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler StyledElement.DataContextChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Initialized" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler StyledElement.Initialized</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ResourcesChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;ResourcesChangedEventArgs&amp;gt; StyledElement.ResourcesChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ItemsPresenter" mixed="true" type="ItemsPresenterType">
    <xs:annotation>
      <xs:documentation>Class: ItemsPresenter

Namespace: Avalonia.Controls.Presenters

Base: ItemsPresenterBase, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, Cursor, DataContext, Focusable, FocusAdorner, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Items, ItemsPanel, ItemTemplate, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Transitions, UseLayoutRounding, VerticalAlignment, VirtualizationMode, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ScrollContentPresenterType" mixed="true">
    <xs:complexContent>
      <xs:extension base="ContentPresenterType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="CanHorizontallyScroll" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool ScrollContentPresenter.CanHorizontallyScroll</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CanVerticallyScroll" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool ScrollContentPresenter.CanVerticallyScroll</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Offset" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Vector ScrollContentPresenter.Offset</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ScrollContentPresenter" mixed="true" type="ScrollContentPresenterType">
    <xs:annotation>
      <xs:documentation>Class: ScrollContentPresenter

Namespace: Avalonia.Controls.Presenters

Base: ContentPresenter, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, BorderBrush, BorderThickness, BoxShadow, CanHorizontallyScroll, CanVerticallyScroll, Classes, Clip, ClipToBounds, Clock, Content, ContentTemplate, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Focusable, FocusAdorner, Height, HorizontalAlignment, HorizontalContentAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Offset, Opacity, OpacityMask, Padding, RecognizesAccessKey, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Transitions, UseLayoutRounding, VerticalAlignment, VerticalContentAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="TextPresenterType" mixed="true">
    <xs:complexContent>
      <xs:extension base="ControlType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Background" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush TextPresenter.Background</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Text" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string TextPresenter.Text</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FontFamily TextPresenter.FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double TextPresenter.FontSize</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FontStyle TextPresenter.FontStyle

enum FontStyle = {Normal, Italic, Oblique}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FontWeight TextPresenter.FontWeight

enum FontWeight = {Thin, ExtraLight, ExtraLight, Light, SemiLight, Normal, Normal, Medium, DemiBold, DemiBold, Bold, ExtraBold,  ...}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush TextPresenter.Foreground</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextWrapping" type="text">
            <xs:annotation>
              <xs:documentation>Property:

TextWrapping TextPresenter.TextWrapping

enum TextWrapping = {NoWrap, Wrap, WrapWithOverflow}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

TextAlignment TextPresenter.TextAlignment

enum TextAlignment = {Left, Center, Right}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CaretIndex" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int TextPresenter.CaretIndex</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PasswordChar" type="text">
            <xs:annotation>
              <xs:documentation>Property:

char TextPresenter.PasswordChar</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RevealPassword" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool TextPresenter.RevealPassword</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SelectionBrush" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush TextPresenter.SelectionBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SelectionForegroundBrush" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush TextPresenter.SelectionForegroundBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CaretBrush" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush TextPresenter.CaretBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SelectionStart" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int TextPresenter.SelectionStart</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SelectionEnd" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int TextPresenter.SelectionEnd</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="TextPresenter" mixed="true" type="TextPresenterType">
    <xs:annotation>
      <xs:documentation>Class: TextPresenter

Namespace: Avalonia.Controls.Presenters

Base: Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, CaretBrush, CaretIndex, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, Cursor, DataContext, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, PasswordChar, RenderTransform, RenderTransformOrigin, Resources, RevealPassword, SelectionBrush, SelectionEnd, SelectionForegroundBrush, SelectionStart, TabIndex, Tag, Text, TextAlignment, TextWrapping, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="NotificationType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="Notification" mixed="true" type="NotificationType">
    <xs:annotation>
      <xs:documentation>Class: Notification

Namespace: Avalonia.Controls.Notifications

Base: 

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="NotificationCardType" mixed="true">
    <xs:complexContent>
      <xs:extension base="ContentControlType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="IsClosed" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool NotificationCard.IsClosed</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationClosed" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; NotificationCard.NotificationClosed</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="NotificationCard" mixed="true" type="NotificationCardType">
    <xs:annotation>
      <xs:documentation>Class: NotificationCard

Namespace: Avalonia.Controls.Notifications

Base: ContentControl, TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, BorderBrush, BorderThickness, Classes, Clip, ClipToBounds, Clock, Content, ContentTemplate, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HorizontalAlignment, HorizontalContentAlignment, IsClosed, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Template, Transitions, UseLayoutRounding, VerticalAlignment, VerticalContentAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, NotificationClosed, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="WindowNotificationManagerType" mixed="true">
    <xs:complexContent>
      <xs:extension base="TemplatedControlType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Position" type="text">
            <xs:annotation>
              <xs:documentation>Property:

NotificationPosition WindowNotificationManager.Position

enum NotificationPosition = {TopLeft, TopRight, BottomLeft, BottomRight}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MaxItems" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int WindowNotificationManager.MaxItems</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="WindowNotificationManager" mixed="true" type="WindowNotificationManagerType">
    <xs:annotation>
      <xs:documentation>Class: WindowNotificationManager

Namespace: Avalonia.Controls.Notifications

Base: TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, BorderBrush, BorderThickness, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxItems, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, Position, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Template, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="EmbeddableControlRootType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TransparencyLevelHint" type="text">
            <xs:annotation>
              <xs:documentation>Property:

WindowTransparencyLevel TopLevel.TransparencyLevelHint

enum WindowTransparencyLevel = {None, Transparent, Blur, AcrylicBlur, ForceAcrylicBlur, Mica}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TransparencyBackgroundFallback" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush TopLevel.TransparencyBackgroundFallback</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Content" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object ContentControl.Content</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContentTemplate" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IDataTemplate ContentControl.ContentTemplate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="HorizontalContentAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

HorizontalAlignment ContentControl.HorizontalContentAlignment

enum HorizontalAlignment = {Stretch, Left, Center, Right}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="VerticalContentAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

VerticalAlignment ContentControl.VerticalContentAlignment

enum VerticalAlignment = {Stretch, Top, Center, Bottom}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Background" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush TemplatedControl.Background</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="BorderBrush" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush TemplatedControl.BorderBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="BorderThickness" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Thickness TemplatedControl.BorderThickness</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CornerRadius" type="text">
            <xs:annotation>
              <xs:documentation>Property:

CornerRadius TemplatedControl.CornerRadius</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FontFamily TemplatedControl.FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double TemplatedControl.FontSize</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FontStyle TemplatedControl.FontStyle

enum FontStyle = {Normal, Italic, Oblique}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FontWeight TemplatedControl.FontWeight

enum FontWeight = {Thin, ExtraLight, ExtraLight, Light, SemiLight, Normal, Normal, Medium, DemiBold, DemiBold, Bold, ExtraBold,  ...}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush TemplatedControl.Foreground</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Padding" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Thickness TemplatedControl.Padding</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Template" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IControlTemplate TemplatedControl.Template</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FocusAdorner" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ITemplate&amp;lt;IControl&amp;gt; Control.FocusAdorner</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextMenu" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ContextMenu Control.ContextMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextFlyout" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FlyoutBase Control.ContextFlyout</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Tag" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object Control.Tag</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Focusable" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.Focusable</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsEnabled</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Cursor" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Cursor InputElement.Cursor</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsHitTestVisible" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsHitTestVisible</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsTabStop" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsTabStop</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TabIndex" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int InputElement.TabIndex</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Width" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.Width</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Height" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.Height</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MinWidth" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MinWidth</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MaxWidth" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MaxWidth</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MinHeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MinHeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MaxHeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MaxHeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Margin" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Thickness Layoutable.Margin</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="HorizontalAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

HorizontalAlignment Layoutable.HorizontalAlignment

enum HorizontalAlignment = {Stretch, Left, Center, Right}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="VerticalAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

VerticalAlignment Layoutable.VerticalAlignment

enum VerticalAlignment = {Stretch, Top, Center, Bottom}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="UseLayoutRounding" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Layoutable.UseLayoutRounding</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ClipToBounds" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Visual.ClipToBounds</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Clip" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Geometry Visual.Clip</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsVisible" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Visual.IsVisible</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Opacity" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Visual.Opacity</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="OpacityMask" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush Visual.OpacityMask</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RenderTransform" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ITransform Visual.RenderTransform</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RenderTransformOrigin" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RelativePoint Visual.RenderTransformOrigin</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ZIndex" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int Visual.ZIndex</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Name" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string StyledElement.Name</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Classes" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Classes StyledElement.Classes</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataContext" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object StyledElement.DataContext</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Resources" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IResourceDictionary StyledElement.Resources</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Clock" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IClock Animatable.Clock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Transitions" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Transitions Animatable.Transitions</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Opened" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler TopLevel.Opened</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Closed" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler TopLevel.Closed</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplateApplied" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TemplateAppliedEventArgs&amp;gt; TemplatedControl.TemplateApplied</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextRequested" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;ContextRequestedEventArgs&amp;gt; Control.ContextRequested</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="GotFocus" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;GotFocusEventArgs&amp;gt; InputElement.GotFocus</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="LostFocus" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.LostFocus</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="KeyDown" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;KeyEventArgs&amp;gt; InputElement.KeyDown</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="KeyUp" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;KeyEventArgs&amp;gt; InputElement.KeyUp</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInput" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputEventArgs&amp;gt; InputElement.TextInput</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInputMethodClientRequested" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputMethodClientRequestedEventArgs&amp;gt; InputElement.TextInputMethodClientRequested</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInputOptionsQuery" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputOptionsQueryEventArgs&amp;gt; InputElement.TextInputOptionsQuery</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerEnter" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerEnter</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerLeave" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerLeave</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerMoved" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerMoved</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerPressed" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerPressedEventArgs&amp;gt; InputElement.PointerPressed</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerReleased" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerReleasedEventArgs&amp;gt; InputElement.PointerReleased</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerCaptureLost" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerCaptureLostEventArgs&amp;gt; InputElement.PointerCaptureLost</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerWheelChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerWheelEventArgs&amp;gt; InputElement.PointerWheelChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Tapped" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.Tapped</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DoubleTapped" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.DoubleTapped</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="EffectiveViewportChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;EffectiveViewportChangedEventArgs&amp;gt; Layoutable.EffectiveViewportChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="LayoutUpdated" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler Layoutable.LayoutUpdated</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AttachedToVisualTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;VisualTreeAttachmentEventArgs&amp;gt; Visual.AttachedToVisualTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DetachedFromVisualTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;VisualTreeAttachmentEventArgs&amp;gt; Visual.DetachedFromVisualTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AttachedToLogicalTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;LogicalTreeAttachmentEventArgs&amp;gt; StyledElement.AttachedToLogicalTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DetachedFromLogicalTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;LogicalTreeAttachmentEventArgs&amp;gt; StyledElement.DetachedFromLogicalTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataContextChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler StyledElement.DataContextChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Initialized" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler StyledElement.Initialized</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ResourcesChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;ResourcesChangedEventArgs&amp;gt; StyledElement.ResourcesChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="EmbeddableControlRoot" mixed="true" type="EmbeddableControlRootType">
    <xs:annotation>
      <xs:documentation>Class: EmbeddableControlRoot

Namespace: Avalonia.Controls.Embedding

Base: TopLevel, ContentControl, TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, BorderBrush, BorderThickness, Classes, Clip, ClipToBounds, Clock, Content, ContentTemplate, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HorizontalAlignment, HorizontalContentAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Template, Transitions, TransparencyBackgroundFallback, TransparencyLevelHint, UseLayoutRounding, VerticalAlignment, VerticalContentAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, Closed, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, Opened, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="CaptionButtonsType" mixed="true">
    <xs:complexContent>
      <xs:extension base="TemplatedControlType">
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="CaptionButtons" mixed="true" type="CaptionButtonsType">
    <xs:annotation>
      <xs:documentation>Class: CaptionButtons

Namespace: Avalonia.Controls.Chrome

Base: TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, BorderBrush, BorderThickness, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Template, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="TitleBarType" mixed="true">
    <xs:complexContent>
      <xs:extension base="TemplatedControlType">
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="TitleBar" mixed="true" type="TitleBarType">
    <xs:annotation>
      <xs:documentation>Class: TitleBar

Namespace: Avalonia.Controls.Chrome

Base: TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, BorderBrush, BorderThickness, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Template, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="CalendarBlackoutDatesCollectionType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

CalendarDateRange Collection&amp;lt;CalendarDateRange&amp;gt;.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CollectionChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

NotifyCollectionChangedEventHandler ObservableCollection&amp;lt;CalendarDateRange&amp;gt;.CollectionChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="CalendarBlackoutDatesCollection" mixed="true" type="CalendarBlackoutDatesCollectionType">
    <xs:annotation>
      <xs:documentation>Class: CalendarBlackoutDatesCollection

Namespace: Avalonia.Controls.Primitives

Base: ObservableCollection`1, Collection`1

Properties: Item

Events: CollectionChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="CalendarButtonType" mixed="true">
    <xs:complexContent>
      <xs:extension base="ButtonType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="CalendarLeftMouseButtonDown" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerPressedEventArgs&amp;gt; CalendarButton.CalendarLeftMouseButtonDown</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CalendarLeftMouseButtonUp" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerReleasedEventArgs&amp;gt; CalendarButton.CalendarLeftMouseButtonUp</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="CalendarButton" mixed="true" type="CalendarButtonType">
    <xs:annotation>
      <xs:documentation>Class: CalendarButton

Namespace: Avalonia.Controls.Primitives

Base: Button, ContentControl, TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, BorderBrush, BorderThickness, Classes, ClickMode, Clip, ClipToBounds, Clock, Command, CommandParameter, Content, ContentTemplate, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Flyout, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HorizontalAlignment, HorizontalContentAlignment, HotKey, IsCancel, IsDefault, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Template, Transitions, UseLayoutRounding, VerticalAlignment, VerticalContentAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, CalendarLeftMouseButtonDown, CalendarLeftMouseButtonUp, Click, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="CalendarDayButtonType" mixed="true">
    <xs:complexContent>
      <xs:extension base="ButtonType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="CalendarDayButtonMouseDown" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerPressedEventArgs&amp;gt; CalendarDayButton.CalendarDayButtonMouseDown</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CalendarDayButtonMouseUp" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerReleasedEventArgs&amp;gt; CalendarDayButton.CalendarDayButtonMouseUp</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="CalendarDayButton" mixed="true" type="CalendarDayButtonType">
    <xs:annotation>
      <xs:documentation>Class: CalendarDayButton

Namespace: Avalonia.Controls.Primitives

Base: Button, ContentControl, TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, BorderBrush, BorderThickness, Classes, ClickMode, Clip, ClipToBounds, Clock, Command, CommandParameter, Content, ContentTemplate, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Flyout, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HorizontalAlignment, HorizontalContentAlignment, HotKey, IsCancel, IsDefault, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Template, Transitions, UseLayoutRounding, VerticalAlignment, VerticalContentAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, CalendarDayButtonMouseDown, CalendarDayButtonMouseUp, Click, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="CalendarItemType" mixed="true">
    <xs:complexContent>
      <xs:extension base="TemplatedControlType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="HeaderBackground" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush CalendarItem.HeaderBackground</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DayTitleTemplate" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ITemplate&amp;lt;IControl&amp;gt; CalendarItem.DayTitleTemplate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="CalendarItem" mixed="true" type="CalendarItemType">
    <xs:annotation>
      <xs:documentation>Class: CalendarItem

Namespace: Avalonia.Controls.Primitives

Base: TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, BorderBrush, BorderThickness, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, DayTitleTemplate, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, HeaderBackground, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Template, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="SelectedDatesCollectionType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

DateTime Collection&amp;lt;DateTime&amp;gt;.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CollectionChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

NotifyCollectionChangedEventHandler ObservableCollection&amp;lt;DateTime&amp;gt;.CollectionChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="SelectedDatesCollection" mixed="true" type="SelectedDatesCollectionType">
    <xs:annotation>
      <xs:documentation>Class: SelectedDatesCollection

Namespace: Avalonia.Controls.Primitives

Base: ObservableCollection`1, Collection`1

Properties: Item

Events: CollectionChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="DateTimePickerPanelType" mixed="true">
    <xs:complexContent>
      <xs:extension base="PanelType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="PanelType" type="text">
            <xs:annotation>
              <xs:documentation>Property:

DateTimePickerPanelType DateTimePickerPanel.PanelType

enum DateTimePickerPanelType = {Year, Month, Day, Hour, Minute, TimePeriod}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ItemHeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double DateTimePickerPanel.ItemHeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ItemFormat" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string DateTimePickerPanel.ItemFormat</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ShouldLoop" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool DateTimePickerPanel.ShouldLoop</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MinimumValue" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int DateTimePickerPanel.MinimumValue</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MaximumValue" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int DateTimePickerPanel.MaximumValue</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SelectedValue" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int DateTimePickerPanel.SelectedValue</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Increment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int DateTimePickerPanel.Increment</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Offset" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Vector DateTimePickerPanel.Offset</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CanHorizontallyScroll" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool DateTimePickerPanel.CanHorizontallyScroll</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CanVerticallyScroll" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool DateTimePickerPanel.CanVerticallyScroll</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollInvalidated" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler DateTimePickerPanel.ScrollInvalidated</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SelectionChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler DateTimePickerPanel.SelectionChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="DateTimePickerPanel" mixed="true" type="DateTimePickerPanelType">
    <xs:annotation>
      <xs:documentation>Class: DateTimePickerPanel

Namespace: Avalonia.Controls.Primitives

Base: Panel, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, CanHorizontallyScroll, CanVerticallyScroll, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, Cursor, DataContext, Focusable, FocusAdorner, Height, HorizontalAlignment, Increment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, ItemFormat, ItemHeight, Margin, MaxHeight, MaximumValue, MaxWidth, MinHeight, MinimumValue, MinWidth, Name, Offset, Opacity, OpacityMask, PanelType, RenderTransform, RenderTransformOrigin, Resources, SelectedValue, ShouldLoop, TabIndex, Tag, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, ScrollInvalidated, SelectionChanged, Tapped, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="AccessTextType" mixed="true">
    <xs:complexContent>
      <xs:extension base="TextBlockType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool AccessText.ShowAccessKey</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="AccessText" mixed="true" type="AccessTextType">
    <xs:annotation>
      <xs:documentation>Class: AccessText

Namespace: Avalonia.Controls.Primitives

Base: TextBlock, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, Cursor, DataContext, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, LineHeight, Margin, MaxHeight, MaxLines, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, ShowAccessKey, TabIndex, Tag, Text, TextAlignment, TextDecorations, TextTrimming, TextWrapping, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="AdornerLayerType" mixed="true">
    <xs:complexContent>
      <xs:extension base="CanvasType">
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="AdornerLayer" mixed="true" type="AdornerLayerType">
    <xs:annotation>
      <xs:documentation>Class: AdornerLayer

Namespace: Avalonia.Controls.Primitives

Base: Canvas, Panel, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, Cursor, DataContext, Focusable, FocusAdorner, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ChromeOverlayLayerType" mixed="true">
    <xs:complexContent>
      <xs:extension base="PanelType">
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ChromeOverlayLayer" mixed="true" type="ChromeOverlayLayerType">
    <xs:annotation>
      <xs:documentation>Class: ChromeOverlayLayer

Namespace: Avalonia.Controls.Primitives

Base: Panel, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, Cursor, DataContext, Focusable, FocusAdorner, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="HeaderedContentControlType" mixed="true">
    <xs:complexContent>
      <xs:extension base="ContentControlType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Header" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object HeaderedContentControl.Header</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="HeaderTemplate" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IDataTemplate HeaderedContentControl.HeaderTemplate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="HeaderedContentControl" mixed="true" type="HeaderedContentControlType">
    <xs:annotation>
      <xs:documentation>Class: HeaderedContentControl

Namespace: Avalonia.Controls.Primitives

Base: ContentControl, TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, BorderBrush, BorderThickness, Classes, Clip, ClipToBounds, Clock, Content, ContentTemplate, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Header, HeaderTemplate, Height, HorizontalAlignment, HorizontalContentAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Template, Transitions, UseLayoutRounding, VerticalAlignment, VerticalContentAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="HeaderedItemsControlType" mixed="true">
    <xs:complexContent>
      <xs:extension base="ItemsControlType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Header" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object HeaderedItemsControl.Header</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="HeaderedItemsControl" mixed="true" type="HeaderedItemsControlType">
    <xs:annotation>
      <xs:documentation>Class: HeaderedItemsControl

Namespace: Avalonia.Controls.Primitives

Base: ItemsControl, TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, BorderBrush, BorderThickness, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Header, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Items, ItemsPanel, ItemTemplate, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Template, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="HeaderedSelectingItemsControlType" mixed="true">
    <xs:complexContent>
      <xs:extension base="SelectingItemsControlType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Header" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object HeaderedSelectingItemsControl.Header</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="HeaderedSelectingItemsControl" mixed="true" type="HeaderedSelectingItemsControlType">
    <xs:annotation>
      <xs:documentation>Class: HeaderedSelectingItemsControl

Namespace: Avalonia.Controls.Primitives

Base: SelectingItemsControl, ItemsControl, TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: AutoScrollToSelectedItem, Background, BorderBrush, BorderThickness, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Header, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsTextSearchEnabled, IsVisible, Item, Items, ItemsPanel, ItemTemplate, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, SelectedIndex, SelectedItem, TabIndex, Tag, Template, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, SelectionChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="LightDismissOverlayLayerType" mixed="true">
    <xs:complexContent>
      <xs:extension base="BorderType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="InputPassThroughElement" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IInputElement LightDismissOverlayLayer.InputPassThroughElement</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="LightDismissOverlayLayer" mixed="true" type="LightDismissOverlayLayerType">
    <xs:annotation>
      <xs:documentation>Class: LightDismissOverlayLayer

Namespace: Avalonia.Controls.Primitives

Base: Border, Decorator, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, BorderBrush, BorderDashArray, BorderDashOffset, BorderLineCap, BorderLineJoin, BorderThickness, BoxShadow, Child, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Focusable, FocusAdorner, Height, HorizontalAlignment, InputPassThroughElement, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="OverlayLayerType" mixed="true">
    <xs:complexContent>
      <xs:extension base="CanvasType">
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="OverlayLayer" mixed="true" type="OverlayLayerType">
    <xs:annotation>
      <xs:documentation>Class: OverlayLayer

Namespace: Avalonia.Controls.Primitives

Base: Canvas, Panel, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, Cursor, DataContext, Focusable, FocusAdorner, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="OverlayPopupHostType" mixed="true">
    <xs:complexContent>
      <xs:extension base="ContentControlType">
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="OverlayPopupHost" mixed="true" type="OverlayPopupHostType">
    <xs:annotation>
      <xs:documentation>Class: OverlayPopupHost

Namespace: Avalonia.Controls.Primitives

Base: ContentControl, TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, BorderBrush, BorderThickness, Classes, Clip, ClipToBounds, Clock, Content, ContentTemplate, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HorizontalAlignment, HorizontalContentAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Template, Transitions, UseLayoutRounding, VerticalAlignment, VerticalContentAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="PopupType" mixed="true">
    <xs:complexContent>
      <xs:extension base="ControlType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="WindowManagerAddShadowHint" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Popup.WindowManagerAddShadowHint</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Child" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Control Popup.Child</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DependencyResolver" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IAvaloniaDependencyResolver Popup.DependencyResolver</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsLightDismissEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Popup.IsLightDismissEnabled</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Popup.IsOpen</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PlacementAnchor" type="text">
            <xs:annotation>
              <xs:documentation>Property:

PopupAnchor Popup.PlacementAnchor

enum PopupAnchor = {None, Top, Bottom, VerticalMask, Left, TopLeft, BottomLeft, Right, TopRight, BottomRight, HorizontalMask, AllMask}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PlacementConstraintAdjustment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

PopupPositionerConstraintAdjustment Popup.PlacementConstraintAdjustment

enum PopupPositionerConstraintAdjustment = {None, SlideX, SlideY, FlipX, FlipY, ResizeY, ResizeY, All}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PlacementGravity" type="text">
            <xs:annotation>
              <xs:documentation>Property:

PopupGravity Popup.PlacementGravity

enum PopupGravity = {None, Top, Bottom, Left, TopLeft, BottomLeft, Right, TopRight, BottomRight}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PlacementMode" type="text">
            <xs:annotation>
              <xs:documentation>Property:

PlacementMode Popup.PlacementMode

enum PlacementMode = {Pointer, Bottom, Right, Left, Top, AnchorAndGravity}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PlacementRect" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Rect? Popup.PlacementRect</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PlacementTarget" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Control Popup.PlacementTarget</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ObeyScreenEdges" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Popup.ObeyScreenEdges</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="OverlayDismissEventPassThrough" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Popup.OverlayDismissEventPassThrough</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="OverlayInputPassThroughElement" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IInputElement Popup.OverlayInputPassThroughElement</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Popup.HorizontalOffset</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Popup.VerticalOffset</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="StaysOpen" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Popup.StaysOpen</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Topmost" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Popup.Topmost</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Closed" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;EventArgs&amp;gt; Popup.Closed</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Opened" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler Popup.Opened</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="Popup" mixed="true" type="PopupType">
    <xs:annotation>
      <xs:documentation>Class: Popup

Namespace: Avalonia.Controls.Primitives

Base: Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Child, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, Cursor, DataContext, DependencyResolver, Focusable, FocusAdorner, Height, HorizontalAlignment, HorizontalOffset, IsEnabled, IsHitTestVisible, IsLightDismissEnabled, IsOpen, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, ObeyScreenEdges, Opacity, OpacityMask, OverlayDismissEventPassThrough, OverlayInputPassThroughElement, PlacementAnchor, PlacementConstraintAdjustment, PlacementGravity, PlacementMode, PlacementRect, PlacementTarget, RenderTransform, RenderTransformOrigin, Resources, StaysOpen, TabIndex, Tag, Topmost, Transitions, UseLayoutRounding, VerticalAlignment, VerticalOffset, Width, WindowManagerAddShadowHint, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, Closed, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, Opened, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="PopupRootType" mixed="true">
    <xs:complexContent>
      <xs:extension base="WindowBaseType">
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="PopupRoot" mixed="true" type="PopupRootType">
    <xs:annotation>
      <xs:documentation>Class: PopupRoot

Namespace: Avalonia.Controls.Primitives

Base: WindowBase, TopLevel, ContentControl, TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, BorderBrush, BorderThickness, Classes, Clip, ClipToBounds, Clock, Content, ContentTemplate, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HorizontalAlignment, HorizontalContentAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Template, Topmost, Transitions, TransparencyBackgroundFallback, TransparencyLevelHint, UseLayoutRounding, VerticalAlignment, VerticalContentAlignment, Width, ZIndex

Events: Activated, AttachedToLogicalTree, AttachedToVisualTree, Closed, ContextRequested, DataContextChanged, Deactivated, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, Opened, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PositionChanged, PropertyChanged, ResourcesChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ScrollEventArgsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ScrollEventArgs" mixed="true" type="ScrollEventArgsType">
    <xs:annotation>
      <xs:documentation>Class: ScrollEventArgs

Namespace: Avalonia.Controls.Primitives

Base: EventArgs

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ScrollBarType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ViewportSize" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double ScrollBar.ViewportSize</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Visibility" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ScrollBarVisibility ScrollBar.Visibility

enum ScrollBarVisibility = {Disabled, Auto, Hidden, Visible}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Orientation" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Orientation ScrollBar.Orientation

enum Orientation = {Horizontal, Vertical}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AllowAutoHide" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool ScrollBar.AllowAutoHide</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="HideDelay" type="text">
            <xs:annotation>
              <xs:documentation>Property:

TimeSpan ScrollBar.HideDelay</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Property:

TimeSpan ScrollBar.ShowDelay</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Minimum" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double RangeBase.Minimum</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Maximum" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double RangeBase.Maximum</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Value" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double RangeBase.Value</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SmallChange" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double RangeBase.SmallChange</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="LargeChange" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double RangeBase.LargeChange</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Background" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush TemplatedControl.Background</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="BorderBrush" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush TemplatedControl.BorderBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="BorderThickness" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Thickness TemplatedControl.BorderThickness</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CornerRadius" type="text">
            <xs:annotation>
              <xs:documentation>Property:

CornerRadius TemplatedControl.CornerRadius</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FontFamily TemplatedControl.FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double TemplatedControl.FontSize</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FontStyle TemplatedControl.FontStyle

enum FontStyle = {Normal, Italic, Oblique}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FontWeight TemplatedControl.FontWeight

enum FontWeight = {Thin, ExtraLight, ExtraLight, Light, SemiLight, Normal, Normal, Medium, DemiBold, DemiBold, Bold, ExtraBold,  ...}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush TemplatedControl.Foreground</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Padding" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Thickness TemplatedControl.Padding</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Template" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IControlTemplate TemplatedControl.Template</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FocusAdorner" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ITemplate&amp;lt;IControl&amp;gt; Control.FocusAdorner</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextMenu" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ContextMenu Control.ContextMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextFlyout" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FlyoutBase Control.ContextFlyout</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Tag" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object Control.Tag</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Focusable" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.Focusable</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsEnabled</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Cursor" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Cursor InputElement.Cursor</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsHitTestVisible" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsHitTestVisible</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsTabStop" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsTabStop</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TabIndex" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int InputElement.TabIndex</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Width" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.Width</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Height" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.Height</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MinWidth" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MinWidth</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MaxWidth" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MaxWidth</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MinHeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MinHeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MaxHeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MaxHeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Margin" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Thickness Layoutable.Margin</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="HorizontalAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

HorizontalAlignment Layoutable.HorizontalAlignment

enum HorizontalAlignment = {Stretch, Left, Center, Right}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="VerticalAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

VerticalAlignment Layoutable.VerticalAlignment

enum VerticalAlignment = {Stretch, Top, Center, Bottom}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="UseLayoutRounding" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Layoutable.UseLayoutRounding</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ClipToBounds" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Visual.ClipToBounds</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Clip" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Geometry Visual.Clip</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsVisible" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Visual.IsVisible</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Opacity" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Visual.Opacity</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="OpacityMask" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush Visual.OpacityMask</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RenderTransform" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ITransform Visual.RenderTransform</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RenderTransformOrigin" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RelativePoint Visual.RenderTransformOrigin</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ZIndex" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int Visual.ZIndex</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Name" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string StyledElement.Name</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Classes" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Classes StyledElement.Classes</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataContext" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object StyledElement.DataContext</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Resources" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IResourceDictionary StyledElement.Resources</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Clock" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IClock Animatable.Clock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Transitions" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Transitions Animatable.Transitions</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Scroll" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;ScrollEventArgs&amp;gt; ScrollBar.Scroll</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplateApplied" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TemplateAppliedEventArgs&amp;gt; TemplatedControl.TemplateApplied</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContextRequested" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;ContextRequestedEventArgs&amp;gt; Control.ContextRequested</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="GotFocus" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;GotFocusEventArgs&amp;gt; InputElement.GotFocus</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="LostFocus" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.LostFocus</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="KeyDown" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;KeyEventArgs&amp;gt; InputElement.KeyDown</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="KeyUp" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;KeyEventArgs&amp;gt; InputElement.KeyUp</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInput" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputEventArgs&amp;gt; InputElement.TextInput</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInputMethodClientRequested" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputMethodClientRequestedEventArgs&amp;gt; InputElement.TextInputMethodClientRequested</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInputOptionsQuery" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputOptionsQueryEventArgs&amp;gt; InputElement.TextInputOptionsQuery</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerEnter" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerEnter</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerLeave" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerLeave</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerMoved" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerMoved</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerPressed" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerPressedEventArgs&amp;gt; InputElement.PointerPressed</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerReleased" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerReleasedEventArgs&amp;gt; InputElement.PointerReleased</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerCaptureLost" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerCaptureLostEventArgs&amp;gt; InputElement.PointerCaptureLost</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerWheelChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerWheelEventArgs&amp;gt; InputElement.PointerWheelChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Tapped" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.Tapped</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DoubleTapped" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.DoubleTapped</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="EffectiveViewportChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;EffectiveViewportChangedEventArgs&amp;gt; Layoutable.EffectiveViewportChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="LayoutUpdated" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler Layoutable.LayoutUpdated</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AttachedToVisualTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;VisualTreeAttachmentEventArgs&amp;gt; Visual.AttachedToVisualTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DetachedFromVisualTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;VisualTreeAttachmentEventArgs&amp;gt; Visual.DetachedFromVisualTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AttachedToLogicalTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;LogicalTreeAttachmentEventArgs&amp;gt; StyledElement.AttachedToLogicalTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DetachedFromLogicalTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;LogicalTreeAttachmentEventArgs&amp;gt; StyledElement.DetachedFromLogicalTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataContextChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler StyledElement.DataContextChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Initialized" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler StyledElement.Initialized</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ResourcesChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;ResourcesChangedEventArgs&amp;gt; StyledElement.ResourcesChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ScrollBar" mixed="true" type="ScrollBarType">
    <xs:annotation>
      <xs:documentation>Class: ScrollBar

Namespace: Avalonia.Controls.Primitives

Base: RangeBase, TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: AllowAutoHide, Background, BorderBrush, BorderThickness, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HideDelay, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, LargeChange, Margin, MaxHeight, Maximum, MaxWidth, MinHeight, Minimum, MinWidth, Name, Opacity, OpacityMask, Orientation, Padding, RenderTransform, RenderTransformOrigin, Resources, ShowDelay, SmallChange, TabIndex, Tag, Template, Transitions, UseLayoutRounding, Value, VerticalAlignment, ViewportSize, Visibility, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Scroll, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="SelectingItemsControlType" mixed="true">
    <xs:complexContent>
      <xs:extension base="ItemsControlType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="AutoScrollToSelectedItem" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool SelectingItemsControl.AutoScrollToSelectedItem</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SelectedIndex" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int SelectingItemsControl.SelectedIndex</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SelectedItem" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object SelectingItemsControl.SelectedItem</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsTextSearchEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool SelectingItemsControl.IsTextSearchEnabled</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SelectionChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;SelectionChangedEventArgs&amp;gt; SelectingItemsControl.SelectionChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="SelectingItemsControl" mixed="true" type="SelectingItemsControlType">
    <xs:annotation>
      <xs:documentation>Class: SelectingItemsControl

Namespace: Avalonia.Controls.Primitives

Base: ItemsControl, TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: AutoScrollToSelectedItem, Background, BorderBrush, BorderThickness, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsTextSearchEnabled, IsVisible, Item, Items, ItemsPanel, ItemTemplate, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, SelectedIndex, SelectedItem, TabIndex, Tag, Template, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, SelectionChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="TabStripType" mixed="true">
    <xs:complexContent>
      <xs:extension base="SelectingItemsControlType">
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="TabStrip" mixed="true" type="TabStripType">
    <xs:annotation>
      <xs:documentation>Class: TabStrip

Namespace: Avalonia.Controls.Primitives

Base: SelectingItemsControl, ItemsControl, TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: AutoScrollToSelectedItem, Background, BorderBrush, BorderThickness, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsTextSearchEnabled, IsVisible, Item, Items, ItemsPanel, ItemTemplate, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, SelectedIndex, SelectedItem, TabIndex, Tag, Template, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, SelectionChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="TabStripItemType" mixed="true">
    <xs:complexContent>
      <xs:extension base="ListBoxItemType">
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="TabStripItem" mixed="true" type="TabStripItemType">
    <xs:annotation>
      <xs:documentation>Class: TabStripItem

Namespace: Avalonia.Controls.Primitives

Base: ListBoxItem, ContentControl, TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, BorderBrush, BorderThickness, Classes, Clip, ClipToBounds, Clock, Content, ContentTemplate, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HorizontalAlignment, HorizontalContentAlignment, IsEnabled, IsHitTestVisible, IsSelected, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Template, Transitions, UseLayoutRounding, VerticalAlignment, VerticalContentAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="TemplateAppliedEventArgsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Handled" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool RoutedEventArgs.Handled</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RoutedEvent" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RoutedEvent RoutedEventArgs.RoutedEvent</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Route" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RoutingStrategies RoutedEventArgs.Route

enum RoutingStrategies = {Direct, Tunnel, Bubble}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Source" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IInteractive RoutedEventArgs.Source</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="TemplateAppliedEventArgs" mixed="true" type="TemplateAppliedEventArgsType">
    <xs:annotation>
      <xs:documentation>Class: TemplateAppliedEventArgs

Namespace: Avalonia.Controls.Primitives

Base: RoutedEventArgs, EventArgs

Properties: Handled, Route, RoutedEvent, Source

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="TemplatedControlType" mixed="true">
    <xs:complexContent>
      <xs:extension base="ControlType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Background" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush TemplatedControl.Background</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="BorderBrush" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush TemplatedControl.BorderBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="BorderThickness" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Thickness TemplatedControl.BorderThickness</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CornerRadius" type="text">
            <xs:annotation>
              <xs:documentation>Property:

CornerRadius TemplatedControl.CornerRadius</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FontFamily TemplatedControl.FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double TemplatedControl.FontSize</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FontStyle TemplatedControl.FontStyle

enum FontStyle = {Normal, Italic, Oblique}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FontWeight TemplatedControl.FontWeight

enum FontWeight = {Thin, ExtraLight, ExtraLight, Light, SemiLight, Normal, Normal, Medium, DemiBold, DemiBold, Bold, ExtraBold,  ...}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush TemplatedControl.Foreground</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Padding" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Thickness TemplatedControl.Padding</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Template" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IControlTemplate TemplatedControl.Template</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplateApplied" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TemplateAppliedEventArgs&amp;gt; TemplatedControl.TemplateApplied</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="TemplatedControl" mixed="true" type="TemplatedControlType">
    <xs:annotation>
      <xs:documentation>Class: TemplatedControl

Namespace: Avalonia.Controls.Primitives

Base: Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, BorderBrush, BorderThickness, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Template, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ThumbType" mixed="true">
    <xs:complexContent>
      <xs:extension base="TemplatedControlType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DragStarted" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;VectorEventArgs&amp;gt; Thumb.DragStarted</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DragDelta" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;VectorEventArgs&amp;gt; Thumb.DragDelta</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DragCompleted" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;VectorEventArgs&amp;gt; Thumb.DragCompleted</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="Thumb" mixed="true" type="ThumbType">
    <xs:annotation>
      <xs:documentation>Class: Thumb

Namespace: Avalonia.Controls.Primitives

Base: TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, BorderBrush, BorderThickness, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Template, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, DragCompleted, DragDelta, DragStarted, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ToggleButtonType" mixed="true">
    <xs:complexContent>
      <xs:extension base="ButtonType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="IsChecked" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool? ToggleButton.IsChecked</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsThreeState" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool ToggleButton.IsThreeState</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Checked" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; ToggleButton.Checked</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Unchecked" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; ToggleButton.Unchecked</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Indeterminate" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; ToggleButton.Indeterminate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ToggleButton" mixed="true" type="ToggleButtonType">
    <xs:annotation>
      <xs:documentation>Class: ToggleButton

Namespace: Avalonia.Controls.Primitives

Base: Button, ContentControl, TemplatedControl, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, BorderBrush, BorderThickness, Classes, ClickMode, Clip, ClipToBounds, Clock, Command, CommandParameter, Content, ContentTemplate, ContextFlyout, ContextMenu, CornerRadius, Cursor, DataContext, Flyout, Focusable, FocusAdorner, FontFamily, FontSize, FontStyle, FontWeight, Foreground, Height, HorizontalAlignment, HorizontalContentAlignment, HotKey, IsCancel, IsChecked, IsDefault, IsEnabled, IsHitTestVisible, IsTabStop, IsThreeState, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Template, Transitions, UseLayoutRounding, VerticalAlignment, VerticalContentAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, Checked, Click, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Indeterminate, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TemplateApplied, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery, Unchecked</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="TrackType" mixed="true">
    <xs:complexContent>
      <xs:extension base="ControlType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Minimum" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Track.Minimum</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Maximum" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Track.Maximum</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Value" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Track.Value</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ViewportSize" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Track.ViewportSize</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Orientation" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Orientation Track.Orientation

enum Orientation = {Horizontal, Vertical}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Thumb" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Thumb Track.Thumb</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IncreaseButton" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Button Track.IncreaseButton</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DecreaseButton" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Button Track.DecreaseButton</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsDirectionReversed" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Track.IsDirectionReversed</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsThumbDragHandled" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Track.IsThumbDragHandled</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="Track" mixed="true" type="TrackType">
    <xs:annotation>
      <xs:documentation>Class: Track

Namespace: Avalonia.Controls.Primitives

Base: Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, Cursor, DataContext, DecreaseButton, Focusable, FocusAdorner, Height, HorizontalAlignment, IncreaseButton, IsDirectionReversed, IsEnabled, IsHitTestVisible, IsTabStop, IsThumbDragHandled, IsVisible, Item, Margin, MaxHeight, Maximum, MaxWidth, MinHeight, Minimum, MinWidth, Name, Opacity, OpacityMask, Orientation, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Thumb, Transitions, UseLayoutRounding, Value, VerticalAlignment, ViewportSize, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="UniformGridType" mixed="true">
    <xs:complexContent>
      <xs:extension base="PanelType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Rows" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int UniformGrid.Rows</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Columns" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int UniformGrid.Columns</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FirstColumn" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int UniformGrid.FirstColumn</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="UniformGrid" mixed="true" type="UniformGridType">
    <xs:annotation>
      <xs:documentation>Class: UniformGrid

Namespace: Avalonia.Controls.Primitives

Base: Panel, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Background, Classes, Clip, ClipToBounds, Clock, Columns, ContextFlyout, ContextMenu, Cursor, DataContext, FirstColumn, Focusable, FocusAdorner, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, RenderTransform, RenderTransformOrigin, Resources, Rows, TabIndex, Tag, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="VisualLayerManagerType" mixed="true">
    <xs:complexContent>
      <xs:extension base="DecoratorType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="IsPopup" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool VisualLayerManager.IsPopup</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="VisualLayerManager" mixed="true" type="VisualLayerManagerType">
    <xs:annotation>
      <xs:documentation>Class: VisualLayerManager

Namespace: Avalonia.Controls.Primitives

Base: Decorator, Control, InputElement, Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Child, Classes, Clip, ClipToBounds, Clock, ContextFlyout, ContextMenu, Cursor, DataContext, Focusable, FocusAdorner, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsPopup, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, Padding, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Tag, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, ContextRequested, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ProgressBarTemplatePropertiesType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContainerAnimationStartPosition" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double ProgressBarTemplateProperties.ContainerAnimationStartPosition</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContainerAnimationEndPosition" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double ProgressBarTemplateProperties.ContainerAnimationEndPosition</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Container2AnimationStartPosition" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double ProgressBarTemplateProperties.Container2AnimationStartPosition</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Container2Width" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double ProgressBarTemplateProperties.Container2Width</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ContainerWidth" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double ProgressBarTemplateProperties.ContainerWidth</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Container2AnimationEndPosition" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double ProgressBarTemplateProperties.Container2AnimationEndPosition</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ProgressBarTemplateProperties" mixed="true" type="ProgressBarTemplatePropertiesType">
    <xs:annotation>
      <xs:documentation>Class: ProgressBarTemplateProperties

Namespace: Avalonia.Controls

Base: AvaloniaObject

Properties: Container2AnimationEndPosition, Container2AnimationStartPosition, Container2Width, ContainerAnimationEndPosition, ContainerAnimationStartPosition, ContainerWidth, Item

Events: PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="AccessKeyHandlerType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="MainMenu" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IMainMenu AccessKeyHandler.MainMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="AccessKeyHandler" mixed="true" type="AccessKeyHandlerType">
    <xs:annotation>
      <xs:documentation>Class: AccessKeyHandler

Namespace: Avalonia.Input

Base: 

Properties: MainMenu

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="CursorType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="Cursor" mixed="true" type="CursorType">
    <xs:annotation>
      <xs:documentation>Class: Cursor

Namespace: Avalonia.Input

Base: 

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="DataObjectType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="DataObject" mixed="true" type="DataObjectType">
    <xs:annotation>
      <xs:documentation>Class: DataObject

Namespace: Avalonia.Input

Base: 

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="DragDropDeviceType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="DragDropDevice" mixed="true" type="DragDropDeviceType">
    <xs:annotation>
      <xs:documentation>Class: DragDropDevice

Namespace: Avalonia.Input

Base: 

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="DragEventArgsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DragEffects" type="text">
            <xs:annotation>
              <xs:documentation>Property:

DragDropEffects DragEventArgs.DragEffects

enum DragDropEffects = {None, Copy, Move, Link}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Handled" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool RoutedEventArgs.Handled</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RoutedEvent" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RoutedEvent RoutedEventArgs.RoutedEvent</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Route" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RoutingStrategies RoutedEventArgs.Route

enum RoutingStrategies = {Direct, Tunnel, Bubble}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Source" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IInteractive RoutedEventArgs.Source</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="DragEventArgs" mixed="true" type="DragEventArgsType">
    <xs:annotation>
      <xs:documentation>Class: DragEventArgs

Namespace: Avalonia.Input

Base: RoutedEventArgs, EventArgs

Properties: DragEffects, Handled, Route, RoutedEvent, Source

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="FocusManagerType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="FocusManager" mixed="true" type="FocusManagerType">
    <xs:annotation>
      <xs:documentation>Class: FocusManager

Namespace: Avalonia.Input

Base: 

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="GotFocusEventArgsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="NavigationMethod" type="text">
            <xs:annotation>
              <xs:documentation>Property:

NavigationMethod GotFocusEventArgs.NavigationMethod

enum NavigationMethod = {Unspecified, Tab, Directional, Pointer}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="InputModifiers" type="text">
            <xs:annotation>
              <xs:documentation>Property:

InputModifiers GotFocusEventArgs.InputModifiers

enum InputModifiers = {None, Alt, Control, Shift, Windows, LeftMouseButton, RightMouseButton, MiddleMouseButton}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="KeyModifiers" type="text">
            <xs:annotation>
              <xs:documentation>Property:

KeyModifiers GotFocusEventArgs.KeyModifiers

enum KeyModifiers = {None, Alt, Control, Shift, Meta}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Handled" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool RoutedEventArgs.Handled</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RoutedEvent" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RoutedEvent RoutedEventArgs.RoutedEvent</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Route" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RoutingStrategies RoutedEventArgs.Route

enum RoutingStrategies = {Direct, Tunnel, Bubble}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Source" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IInteractive RoutedEventArgs.Source</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="GotFocusEventArgs" mixed="true" type="GotFocusEventArgsType">
    <xs:annotation>
      <xs:documentation>Class: GotFocusEventArgs

Namespace: Avalonia.Input

Base: RoutedEventArgs, EventArgs

Properties: Handled, InputModifiers, KeyModifiers, NavigationMethod, Route, RoutedEvent, Source

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="InputElementType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Focusable" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.Focusable</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsEnabled</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Cursor" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Cursor InputElement.Cursor</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsHitTestVisible" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsHitTestVisible</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsTabStop" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool InputElement.IsTabStop</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TabIndex" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int InputElement.TabIndex</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Width" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.Width</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Height" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.Height</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MinWidth" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MinWidth</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MaxWidth" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MaxWidth</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MinHeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MinHeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MaxHeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MaxHeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Margin" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Thickness Layoutable.Margin</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="HorizontalAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

HorizontalAlignment Layoutable.HorizontalAlignment

enum HorizontalAlignment = {Stretch, Left, Center, Right}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="VerticalAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

VerticalAlignment Layoutable.VerticalAlignment

enum VerticalAlignment = {Stretch, Top, Center, Bottom}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="UseLayoutRounding" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Layoutable.UseLayoutRounding</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ClipToBounds" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Visual.ClipToBounds</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Clip" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Geometry Visual.Clip</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsVisible" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Visual.IsVisible</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Opacity" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Visual.Opacity</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="OpacityMask" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush Visual.OpacityMask</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RenderTransform" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ITransform Visual.RenderTransform</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RenderTransformOrigin" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RelativePoint Visual.RenderTransformOrigin</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ZIndex" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int Visual.ZIndex</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Name" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string StyledElement.Name</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Classes" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Classes StyledElement.Classes</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataContext" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object StyledElement.DataContext</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Resources" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IResourceDictionary StyledElement.Resources</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Clock" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IClock Animatable.Clock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Transitions" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Transitions Animatable.Transitions</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="GotFocus" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;GotFocusEventArgs&amp;gt; InputElement.GotFocus</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="LostFocus" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.LostFocus</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="KeyDown" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;KeyEventArgs&amp;gt; InputElement.KeyDown</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="KeyUp" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;KeyEventArgs&amp;gt; InputElement.KeyUp</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInput" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputEventArgs&amp;gt; InputElement.TextInput</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInputMethodClientRequested" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputMethodClientRequestedEventArgs&amp;gt; InputElement.TextInputMethodClientRequested</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextInputOptionsQuery" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;TextInputOptionsQueryEventArgs&amp;gt; InputElement.TextInputOptionsQuery</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerEnter" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerEnter</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerLeave" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerLeave</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerMoved" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerEventArgs&amp;gt; InputElement.PointerMoved</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerPressed" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerPressedEventArgs&amp;gt; InputElement.PointerPressed</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerReleased" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerReleasedEventArgs&amp;gt; InputElement.PointerReleased</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerCaptureLost" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerCaptureLostEventArgs&amp;gt; InputElement.PointerCaptureLost</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PointerWheelChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;PointerWheelEventArgs&amp;gt; InputElement.PointerWheelChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Tapped" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.Tapped</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DoubleTapped" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;RoutedEventArgs&amp;gt; InputElement.DoubleTapped</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="EffectiveViewportChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;EffectiveViewportChangedEventArgs&amp;gt; Layoutable.EffectiveViewportChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="LayoutUpdated" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler Layoutable.LayoutUpdated</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AttachedToVisualTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;VisualTreeAttachmentEventArgs&amp;gt; Visual.AttachedToVisualTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DetachedFromVisualTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;VisualTreeAttachmentEventArgs&amp;gt; Visual.DetachedFromVisualTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AttachedToLogicalTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;LogicalTreeAttachmentEventArgs&amp;gt; StyledElement.AttachedToLogicalTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DetachedFromLogicalTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;LogicalTreeAttachmentEventArgs&amp;gt; StyledElement.DetachedFromLogicalTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataContextChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler StyledElement.DataContextChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Initialized" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler StyledElement.Initialized</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ResourcesChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;ResourcesChangedEventArgs&amp;gt; StyledElement.ResourcesChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="InputElement" mixed="true" type="InputElementType">
    <xs:annotation>
      <xs:documentation>Class: InputElement

Namespace: Avalonia.Input

Base: Interactive, Layoutable, Visual, StyledElement, Animatable, AvaloniaObject

Properties: Classes, Clip, ClipToBounds, Clock, Cursor, DataContext, Focusable, Height, HorizontalAlignment, IsEnabled, IsHitTestVisible, IsTabStop, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, RenderTransform, RenderTransformOrigin, Resources, TabIndex, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, DoubleTapped, EffectiveViewportChanged, GotFocus, Initialized, KeyDown, KeyUp, LayoutUpdated, LostFocus, PointerCaptureLost, PointerEnter, PointerLeave, PointerMoved, PointerPressed, PointerReleased, PointerWheelChanged, PropertyChanged, ResourcesChanged, Tapped, TextInput, TextInputMethodClientRequested, TextInputOptionsQuery</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="InputManagerType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="InputManager" mixed="true" type="InputManagerType">
    <xs:annotation>
      <xs:documentation>Class: InputManager

Namespace: Avalonia.Input

Base: 

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="InputMethodType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="InputMethod" mixed="true" type="InputMethodType">
    <xs:annotation>
      <xs:documentation>Class: InputMethod

Namespace: Avalonia.Input

Base: 

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="KeyBindingType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Command" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ICommand KeyBinding.Command</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CommandParameter" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object KeyBinding.CommandParameter</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Gesture" type="text">
            <xs:annotation>
              <xs:documentation>Property:

KeyGesture KeyBinding.Gesture</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="KeyBinding" mixed="true" type="KeyBindingType">
    <xs:annotation>
      <xs:documentation>Class: KeyBinding

Namespace: Avalonia.Input

Base: AvaloniaObject

Properties: Command, CommandParameter, Gesture, Item

Events: PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="KeyboardDeviceType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

PropertyChangedEventHandler KeyboardDevice.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="KeyboardDevice" mixed="true" type="KeyboardDeviceType">
    <xs:annotation>
      <xs:documentation>Class: KeyboardDevice

Namespace: Avalonia.Input

Base: 

Properties: {none}

Events: PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="KeyboardNavigationHandlerType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="KeyboardNavigationHandler" mixed="true" type="KeyboardNavigationHandlerType">
    <xs:annotation>
      <xs:documentation>Class: KeyboardNavigationHandler

Namespace: Avalonia.Input

Base: 

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="KeyEventArgsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Device" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IKeyboardDevice KeyEventArgs.Device</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Key" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Key KeyEventArgs.Key

enum Key = {None, Cancel, Back, Tab, LineFeed, Clear, Return, Return, Pause, CapsLock, CapsLock, HangulMode,  ...}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="KeyModifiers" type="text">
            <xs:annotation>
              <xs:documentation>Property:

KeyModifiers KeyEventArgs.KeyModifiers

enum KeyModifiers = {None, Alt, Control, Shift, Meta}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Handled" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool RoutedEventArgs.Handled</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RoutedEvent" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RoutedEvent RoutedEventArgs.RoutedEvent</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Route" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RoutingStrategies RoutedEventArgs.Route

enum RoutingStrategies = {Direct, Tunnel, Bubble}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Source" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IInteractive RoutedEventArgs.Source</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="KeyEventArgs" mixed="true" type="KeyEventArgsType">
    <xs:annotation>
      <xs:documentation>Class: KeyEventArgs

Namespace: Avalonia.Input

Base: RoutedEventArgs, EventArgs

Properties: Device, Handled, Key, KeyModifiers, Route, RoutedEvent, Source

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="KeyGestureType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="KeyGesture" mixed="true" type="KeyGestureType">
    <xs:annotation>
      <xs:documentation>Class: KeyGesture

Namespace: Avalonia.Input

Base: 

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="MouseDeviceType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="MouseDevice" mixed="true" type="MouseDeviceType">
    <xs:annotation>
      <xs:documentation>Class: MouseDevice

Namespace: Avalonia.Input

Base: 

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="PointerType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="Pointer" mixed="true" type="PointerType">
    <xs:annotation>
      <xs:documentation>Class: Pointer

Namespace: Avalonia.Input

Base: 

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="PointerEventArgsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Handled" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool RoutedEventArgs.Handled</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RoutedEvent" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RoutedEvent RoutedEventArgs.RoutedEvent</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Route" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RoutingStrategies RoutedEventArgs.Route

enum RoutingStrategies = {Direct, Tunnel, Bubble}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Source" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IInteractive RoutedEventArgs.Source</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="PointerEventArgs" mixed="true" type="PointerEventArgsType">
    <xs:annotation>
      <xs:documentation>Class: PointerEventArgs

Namespace: Avalonia.Input

Base: RoutedEventArgs, EventArgs

Properties: Handled, Route, RoutedEvent, Source

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="PointerPressedEventArgsType" mixed="true">
    <xs:complexContent>
      <xs:extension base="PointerEventArgsType">
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="PointerPressedEventArgs" mixed="true" type="PointerPressedEventArgsType">
    <xs:annotation>
      <xs:documentation>Class: PointerPressedEventArgs

Namespace: Avalonia.Input

Base: PointerEventArgs, RoutedEventArgs, EventArgs

Properties: Handled, Route, RoutedEvent, Source

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="PointerReleasedEventArgsType" mixed="true">
    <xs:complexContent>
      <xs:extension base="PointerEventArgsType">
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="PointerReleasedEventArgs" mixed="true" type="PointerReleasedEventArgsType">
    <xs:annotation>
      <xs:documentation>Class: PointerReleasedEventArgs

Namespace: Avalonia.Input

Base: PointerEventArgs, RoutedEventArgs, EventArgs

Properties: Handled, Route, RoutedEvent, Source

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="PointerCaptureLostEventArgsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Handled" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool RoutedEventArgs.Handled</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RoutedEvent" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RoutedEvent RoutedEventArgs.RoutedEvent</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Route" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RoutingStrategies RoutedEventArgs.Route

enum RoutingStrategies = {Direct, Tunnel, Bubble}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Source" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IInteractive RoutedEventArgs.Source</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="PointerCaptureLostEventArgs" mixed="true" type="PointerCaptureLostEventArgsType">
    <xs:annotation>
      <xs:documentation>Class: PointerCaptureLostEventArgs

Namespace: Avalonia.Input

Base: RoutedEventArgs, EventArgs

Properties: Handled, Route, RoutedEvent, Source

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="PointerPointType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="PointerPoint" mixed="true" type="PointerPointType">
    <xs:annotation>
      <xs:documentation>Class: PointerPoint

Namespace: Avalonia.Input

Base: 

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="PointerPointPropertiesType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="PointerPointProperties" mixed="true" type="PointerPointPropertiesType">
    <xs:annotation>
      <xs:documentation>Class: PointerPointProperties

Namespace: Avalonia.Input

Base: 

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="PointerWheelEventArgsType" mixed="true">
    <xs:complexContent>
      <xs:extension base="PointerEventArgsType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Delta" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Vector PointerWheelEventArgs.Delta</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="PointerWheelEventArgs" mixed="true" type="PointerWheelEventArgsType">
    <xs:annotation>
      <xs:documentation>Class: PointerWheelEventArgs

Namespace: Avalonia.Input

Base: PointerEventArgs, RoutedEventArgs, EventArgs

Properties: Delta, Handled, Route, RoutedEvent, Source

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ScrollGestureEventArgsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Handled" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool RoutedEventArgs.Handled</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RoutedEvent" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RoutedEvent RoutedEventArgs.RoutedEvent</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Route" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RoutingStrategies RoutedEventArgs.Route

enum RoutingStrategies = {Direct, Tunnel, Bubble}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Source" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IInteractive RoutedEventArgs.Source</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ScrollGestureEventArgs" mixed="true" type="ScrollGestureEventArgsType">
    <xs:annotation>
      <xs:documentation>Class: ScrollGestureEventArgs

Namespace: Avalonia.Input

Base: RoutedEventArgs, EventArgs

Properties: Handled, Route, RoutedEvent, Source

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ScrollGestureEndedEventArgsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Handled" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool RoutedEventArgs.Handled</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RoutedEvent" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RoutedEvent RoutedEventArgs.RoutedEvent</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Route" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RoutingStrategies RoutedEventArgs.Route

enum RoutingStrategies = {Direct, Tunnel, Bubble}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Source" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IInteractive RoutedEventArgs.Source</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ScrollGestureEndedEventArgs" mixed="true" type="ScrollGestureEndedEventArgsType">
    <xs:annotation>
      <xs:documentation>Class: ScrollGestureEndedEventArgs

Namespace: Avalonia.Input

Base: RoutedEventArgs, EventArgs

Properties: Handled, Route, RoutedEvent, Source

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="TappedEventArgsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Handled" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool RoutedEventArgs.Handled</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RoutedEvent" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RoutedEvent RoutedEventArgs.RoutedEvent</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Route" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RoutingStrategies RoutedEventArgs.Route

enum RoutingStrategies = {Direct, Tunnel, Bubble}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Source" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IInteractive RoutedEventArgs.Source</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="TappedEventArgs" mixed="true" type="TappedEventArgsType">
    <xs:annotation>
      <xs:documentation>Class: TappedEventArgs

Namespace: Avalonia.Input

Base: RoutedEventArgs, EventArgs

Properties: Handled, Route, RoutedEvent, Source

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="TextInputEventArgsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Device" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IKeyboardDevice TextInputEventArgs.Device</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Text" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string TextInputEventArgs.Text</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Handled" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool RoutedEventArgs.Handled</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RoutedEvent" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RoutedEvent RoutedEventArgs.RoutedEvent</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Route" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RoutingStrategies RoutedEventArgs.Route

enum RoutingStrategies = {Direct, Tunnel, Bubble}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Source" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IInteractive RoutedEventArgs.Source</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="TextInputEventArgs" mixed="true" type="TextInputEventArgsType">
    <xs:annotation>
      <xs:documentation>Class: TextInputEventArgs

Namespace: Avalonia.Input

Base: RoutedEventArgs, EventArgs

Properties: Device, Handled, Route, RoutedEvent, Source, Text

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="TouchDeviceType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="TouchDevice" mixed="true" type="TouchDeviceType">
    <xs:annotation>
      <xs:documentation>Class: TouchDevice

Namespace: Avalonia.Input

Base: 

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="VectorEventArgsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Vector" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Vector VectorEventArgs.Vector</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Handled" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool RoutedEventArgs.Handled</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RoutedEvent" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RoutedEvent RoutedEventArgs.RoutedEvent</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Route" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RoutingStrategies RoutedEventArgs.Route

enum RoutingStrategies = {Direct, Tunnel, Bubble}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Source" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IInteractive RoutedEventArgs.Source</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="VectorEventArgs" mixed="true" type="VectorEventArgsType">
    <xs:annotation>
      <xs:documentation>Class: VectorEventArgs

Namespace: Avalonia.Input

Base: RoutedEventArgs, EventArgs

Properties: Handled, Route, RoutedEvent, Source, Vector

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="GestureRecognizerCollectionType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="GestureRecognizerCollection" mixed="true" type="GestureRecognizerCollectionType">
    <xs:annotation>
      <xs:documentation>Class: GestureRecognizerCollection

Namespace: Avalonia.Input.GestureRecognizers

Base: 

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ScrollGestureRecognizerType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CanHorizontallyScroll" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool ScrollGestureRecognizer.CanHorizontallyScroll</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CanVerticallyScroll" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool ScrollGestureRecognizer.CanVerticallyScroll</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Name" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string StyledElement.Name</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Classes" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Classes StyledElement.Classes</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataContext" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object StyledElement.DataContext</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Resources" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IResourceDictionary StyledElement.Resources</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Clock" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IClock Animatable.Clock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Transitions" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Transitions Animatable.Transitions</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AttachedToLogicalTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;LogicalTreeAttachmentEventArgs&amp;gt; StyledElement.AttachedToLogicalTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DetachedFromLogicalTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;LogicalTreeAttachmentEventArgs&amp;gt; StyledElement.DetachedFromLogicalTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataContextChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler StyledElement.DataContextChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Initialized" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler StyledElement.Initialized</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ResourcesChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;ResourcesChangedEventArgs&amp;gt; StyledElement.ResourcesChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ScrollGestureRecognizer" mixed="true" type="ScrollGestureRecognizerType">
    <xs:annotation>
      <xs:documentation>Class: ScrollGestureRecognizer

Namespace: Avalonia.Input.GestureRecognizers

Base: StyledElement, Animatable, AvaloniaObject

Properties: CanHorizontallyScroll, CanVerticallyScroll, Classes, Clock, DataContext, Item, Name, Resources, Transitions

Events: AttachedToLogicalTree, DataContextChanged, DetachedFromLogicalTree, Initialized, PropertyChanged, ResourcesChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="EffectiveViewportChangedEventArgsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="EffectiveViewportChangedEventArgs" mixed="true" type="EffectiveViewportChangedEventArgsType">
    <xs:annotation>
      <xs:documentation>Class: EffectiveViewportChangedEventArgs

Namespace: Avalonia.Layout

Base: EventArgs

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="LayoutableType" mixed="true">
    <xs:complexContent>
      <xs:extension base="VisualType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Width" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.Width</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Height" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.Height</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MinWidth" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MinWidth</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MaxWidth" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MaxWidth</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MinHeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MinHeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MaxHeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Layoutable.MaxHeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Margin" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Thickness Layoutable.Margin</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="HorizontalAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

HorizontalAlignment Layoutable.HorizontalAlignment

enum HorizontalAlignment = {Stretch, Left, Center, Right}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="VerticalAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

VerticalAlignment Layoutable.VerticalAlignment

enum VerticalAlignment = {Stretch, Top, Center, Bottom}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="UseLayoutRounding" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Layoutable.UseLayoutRounding</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="EffectiveViewportChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;EffectiveViewportChangedEventArgs&amp;gt; Layoutable.EffectiveViewportChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="LayoutUpdated" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler Layoutable.LayoutUpdated</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="Layoutable" mixed="true" type="LayoutableType">
    <xs:annotation>
      <xs:documentation>Class: Layoutable

Namespace: Avalonia.Layout

Base: Visual, StyledElement, Animatable, AvaloniaObject

Properties: Classes, Clip, ClipToBounds, Clock, DataContext, Height, HorizontalAlignment, IsVisible, Item, Margin, MaxHeight, MaxWidth, MinHeight, MinWidth, Name, Opacity, OpacityMask, RenderTransform, RenderTransformOrigin, Resources, Transitions, UseLayoutRounding, VerticalAlignment, Width, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, EffectiveViewportChanged, Initialized, LayoutUpdated, PropertyChanged, ResourcesChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="LayoutContextType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="LayoutState" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object LayoutContext.LayoutState</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="LayoutContext" mixed="true" type="LayoutContextType">
    <xs:annotation>
      <xs:documentation>Class: LayoutContext

Namespace: Avalonia.Layout

Base: AvaloniaObject

Properties: Item, LayoutState

Events: PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="LayoutManagerType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="LayoutUpdated" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler LayoutManager.LayoutUpdated</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="LayoutManager" mixed="true" type="LayoutManagerType">
    <xs:annotation>
      <xs:documentation>Class: LayoutManager

Namespace: Avalonia.Layout

Base: 

Properties: {none}

Events: LayoutUpdated</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="NonVirtualizingStackLayoutType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Orientation" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Orientation NonVirtualizingStackLayout.Orientation

enum Orientation = {Horizontal, Vertical}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Spacing" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double NonVirtualizingStackLayout.Spacing</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="LayoutId" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string AttachedLayout.LayoutId</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MeasureInvalidated" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler AttachedLayout.MeasureInvalidated</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ArrangeInvalidated" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler AttachedLayout.ArrangeInvalidated</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="NonVirtualizingStackLayout" mixed="true" type="NonVirtualizingStackLayoutType">
    <xs:annotation>
      <xs:documentation>Class: NonVirtualizingStackLayout

Namespace: Avalonia.Layout

Base: NonVirtualizingLayout, AttachedLayout, AvaloniaObject

Properties: Item, LayoutId, Orientation, Spacing

Events: ArrangeInvalidated, MeasureInvalidated, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="StackLayoutType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DisableVirtualization" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool StackLayout.DisableVirtualization</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Orientation" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Orientation StackLayout.Orientation

enum Orientation = {Horizontal, Vertical}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Spacing" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double StackLayout.Spacing</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="LayoutId" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string AttachedLayout.LayoutId</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MeasureInvalidated" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler AttachedLayout.MeasureInvalidated</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ArrangeInvalidated" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler AttachedLayout.ArrangeInvalidated</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="StackLayout" mixed="true" type="StackLayoutType">
    <xs:annotation>
      <xs:documentation>Class: StackLayout

Namespace: Avalonia.Layout

Base: VirtualizingLayout, AttachedLayout, AvaloniaObject

Properties: DisableVirtualization, Item, LayoutId, Orientation, Spacing

Events: ArrangeInvalidated, MeasureInvalidated, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="StackLayoutStateType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="StackLayoutState" mixed="true" type="StackLayoutStateType">
    <xs:annotation>
      <xs:documentation>Class: StackLayoutState

Namespace: Avalonia.Layout

Base: 

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="UniformGridLayoutType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ItemsJustification" type="text">
            <xs:annotation>
              <xs:documentation>Property:

UniformGridLayoutItemsJustification UniformGridLayout.ItemsJustification

enum UniformGridLayoutItemsJustification = {Start, Center, End, SpaceAround, SpaceBetween, SpaceEvenly}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ItemsStretch" type="text">
            <xs:annotation>
              <xs:documentation>Property:

UniformGridLayoutItemsStretch UniformGridLayout.ItemsStretch

enum UniformGridLayoutItemsStretch = {None, Fill, Uniform}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MinColumnSpacing" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double UniformGridLayout.MinColumnSpacing</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MinItemHeight" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double UniformGridLayout.MinItemHeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MinItemWidth" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double UniformGridLayout.MinItemWidth</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MinRowSpacing" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double UniformGridLayout.MinRowSpacing</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MaximumRowsOrColumns" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int UniformGridLayout.MaximumRowsOrColumns</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Orientation" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Orientation UniformGridLayout.Orientation

enum Orientation = {Horizontal, Vertical}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="LayoutId" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string AttachedLayout.LayoutId</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MeasureInvalidated" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler AttachedLayout.MeasureInvalidated</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ArrangeInvalidated" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler AttachedLayout.ArrangeInvalidated</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="UniformGridLayout" mixed="true" type="UniformGridLayoutType">
    <xs:annotation>
      <xs:documentation>Class: UniformGridLayout

Namespace: Avalonia.Layout

Base: VirtualizingLayout, AttachedLayout, AvaloniaObject

Properties: Item, ItemsJustification, ItemsStretch, LayoutId, MaximumRowsOrColumns, MinColumnSpacing, MinItemHeight, MinItemWidth, MinRowSpacing, Orientation

Events: ArrangeInvalidated, MeasureInvalidated, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="UniformGridLayoutStateType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="UniformGridLayoutState" mixed="true" type="UniformGridLayoutStateType">
    <xs:annotation>
      <xs:documentation>Class: UniformGridLayoutState

Namespace: Avalonia.Layout

Base: 

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="VirtualLayoutContextAdapterType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="LayoutState" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object LayoutContext.LayoutState</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="VirtualLayoutContextAdapter" mixed="true" type="VirtualLayoutContextAdapterType">
    <xs:annotation>
      <xs:documentation>Class: VirtualLayoutContextAdapter

Namespace: Avalonia.Layout

Base: NonVirtualizingLayoutContext, LayoutContext, AvaloniaObject

Properties: Item, LayoutState

Events: PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="WrapLayoutType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="HorizontalSpacing" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double WrapLayout.HorizontalSpacing</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="VerticalSpacing" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double WrapLayout.VerticalSpacing</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Orientation" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Orientation WrapLayout.Orientation

enum Orientation = {Horizontal, Vertical}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="LayoutId" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string AttachedLayout.LayoutId</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MeasureInvalidated" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler AttachedLayout.MeasureInvalidated</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ArrangeInvalidated" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler AttachedLayout.ArrangeInvalidated</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="WrapLayout" mixed="true" type="WrapLayoutType">
    <xs:annotation>
      <xs:documentation>Class: WrapLayout

Namespace: Avalonia.Layout

Base: VirtualizingLayout, AttachedLayout, AvaloniaObject

Properties: HorizontalSpacing, Item, LayoutId, Orientation, VerticalSpacing

Events: ArrangeInvalidated, MeasureInvalidated, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="BindingType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="ElementName" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string Binding.ElementName</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativeSource" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RelativeSource Binding.RelativeSource</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Source" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object Binding.Source</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Path" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string Binding.Path</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TypeResolver" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Func&amp;lt;string, string, Type&amp;gt; Binding.TypeResolver</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Converter" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IValueConverter BindingBase.Converter</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ConverterParameter" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object BindingBase.ConverterParameter</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FallbackValue" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object BindingBase.FallbackValue</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TargetNullValue" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object BindingBase.TargetNullValue</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Mode" type="text">
            <xs:annotation>
              <xs:documentation>Property:

BindingMode BindingBase.Mode

enum BindingMode = {Default, OneWay, TwoWay, OneTime, OneWayToSource}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Priority" type="text">
            <xs:annotation>
              <xs:documentation>Property:

BindingPriority BindingBase.Priority

enum BindingPriority = {LocalValue, StyleTrigger, TemplatedParent, Style, Unset, Animation}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="StringFormat" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string BindingBase.StringFormat</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DefaultAnchor" type="text">
            <xs:annotation>
              <xs:documentation>Property:

WeakReference BindingBase.DefaultAnchor</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NameScope" type="text">
            <xs:annotation>
              <xs:documentation>Property:

WeakReference&amp;lt;INameScope&amp;gt; BindingBase.NameScope</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="Binding" mixed="true" type="BindingType">
    <xs:annotation>
      <xs:documentation>Class: Binding

Namespace: Avalonia.Data

Base: BindingBase

Properties: Converter, ConverterParameter, DefaultAnchor, ElementName, FallbackValue, Mode, NameScope, Path, Priority, RelativeSource, Source, StringFormat, TargetNullValue, TypeResolver

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="MultiBindingType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Bindings" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IList&amp;lt;IBinding&amp;gt; MultiBinding.Bindings</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Converter" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IMultiValueConverter MultiBinding.Converter</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ConverterParameter" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object MultiBinding.ConverterParameter</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FallbackValue" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object MultiBinding.FallbackValue</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TargetNullValue" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object MultiBinding.TargetNullValue</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Mode" type="text">
            <xs:annotation>
              <xs:documentation>Property:

BindingMode MultiBinding.Mode

enum BindingMode = {Default, OneWay, TwoWay, OneTime, OneWayToSource}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Priority" type="text">
            <xs:annotation>
              <xs:documentation>Property:

BindingPriority MultiBinding.Priority

enum BindingPriority = {LocalValue, StyleTrigger, TemplatedParent, Style, Unset, Animation}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativeSource" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RelativeSource MultiBinding.RelativeSource</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="StringFormat" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string MultiBinding.StringFormat</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="MultiBinding" mixed="true" type="MultiBindingType">
    <xs:annotation>
      <xs:documentation>Class: MultiBinding

Namespace: Avalonia.Data

Base: 

Properties: Bindings, Converter, ConverterParameter, FallbackValue, Mode, Priority, RelativeSource, StringFormat, TargetNullValue

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="RelativeSourceType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="AncestorLevel" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int RelativeSource.AncestorLevel</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AncestorType" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Type RelativeSource.AncestorType</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Mode" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RelativeSourceMode RelativeSource.Mode

enum RelativeSourceMode = {DataContext, TemplatedParent, Self, FindAncestor}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Tree" type="text">
            <xs:annotation>
              <xs:documentation>Property:

TreeType RelativeSource.Tree

enum TreeType = {Visual, Logical}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="RelativeSource" mixed="true" type="RelativeSourceType">
    <xs:annotation>
      <xs:documentation>Class: RelativeSource

Namespace: Avalonia.Data

Base: 

Properties: AncestorLevel, AncestorType, Mode, Tree

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="TemplateBindingType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Converter" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IValueConverter TemplateBinding.Converter</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ConverterParameter" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object TemplateBinding.ConverterParameter</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Mode" type="text">
            <xs:annotation>
              <xs:documentation>Property:

BindingMode TemplateBinding.Mode

enum BindingMode = {Default, OneWay, TwoWay, OneTime, OneWayToSource}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Property" type="text">
            <xs:annotation>
              <xs:documentation>Property:

AvaloniaProperty TemplateBinding.Property</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="TemplateBinding" mixed="true" type="TemplateBindingType">
    <xs:annotation>
      <xs:documentation>Class: TemplateBinding

Namespace: Avalonia.Data

Base: SingleSubscriberObservableBase`1

Properties: Converter, ConverterParameter, Mode, Property

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ControlTemplateType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Content" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object ControlTemplate.Content</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TargetType" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Type ControlTemplate.TargetType</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ControlTemplate" mixed="true" type="ControlTemplateType">
    <xs:annotation>
      <xs:documentation>Class: ControlTemplate

Namespace: Avalonia.Markup.Xaml.Templates

Base: 

Properties: Content, TargetType

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="DataTemplateType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataType" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Type DataTemplate.DataType</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Content" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object DataTemplate.Content</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="DataTemplate" mixed="true" type="DataTemplateType">
    <xs:annotation>
      <xs:documentation>Class: DataTemplate

Namespace: Avalonia.Markup.Xaml.Templates

Base: 

Properties: Content, DataType

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="FocusAdornerTemplateType" mixed="true">
    <xs:complexContent>
      <xs:extension base="TemplateType">
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="FocusAdornerTemplate" mixed="true" type="FocusAdornerTemplateType">
    <xs:annotation>
      <xs:documentation>Class: FocusAdornerTemplate

Namespace: Avalonia.Markup.Xaml.Templates

Base: Template

Properties: Content

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ItemsPanelTemplateType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Content" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object ItemsPanelTemplate.Content</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ItemsPanelTemplate" mixed="true" type="ItemsPanelTemplateType">
    <xs:annotation>
      <xs:documentation>Class: ItemsPanelTemplate

Namespace: Avalonia.Markup.Xaml.Templates

Base: 

Properties: Content

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="TemplateType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Content" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object Template.Content</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="Template" mixed="true" type="TemplateType">
    <xs:annotation>
      <xs:documentation>Class: Template

Namespace: Avalonia.Markup.Xaml.Templates

Base: 

Properties: Content

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="TreeDataTemplateType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataType" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Type TreeDataTemplate.DataType</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Content" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object TreeDataTemplate.Content</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ItemsSource" type="text">
            <xs:annotation>
              <xs:documentation>Property:

BindingBase TreeDataTemplate.ItemsSource</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="TreeDataTemplate" mixed="true" type="TreeDataTemplateType">
    <xs:annotation>
      <xs:documentation>Class: TreeDataTemplate

Namespace: Avalonia.Markup.Xaml.Templates

Base: 

Properties: Content, DataType, ItemsSource

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="StyleIncludeType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Source" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Uri StyleInclude.Source</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="OwnerChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler StyleInclude.OwnerChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="StyleInclude" mixed="true" type="StyleIncludeType">
    <xs:annotation>
      <xs:documentation>Class: StyleInclude

Namespace: Avalonia.Markup.Xaml.Styling

Base: 

Properties: Source

Events: OwnerChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="CompiledBindingExtensionType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Path" type="text">
            <xs:annotation>
              <xs:documentation>Property:

CompiledBindingPath CompiledBindingExtension.Path</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Source" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object CompiledBindingExtension.Source</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataType" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Type CompiledBindingExtension.DataType</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Converter" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IValueConverter BindingBase.Converter</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ConverterParameter" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object BindingBase.ConverterParameter</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FallbackValue" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object BindingBase.FallbackValue</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TargetNullValue" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object BindingBase.TargetNullValue</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Mode" type="text">
            <xs:annotation>
              <xs:documentation>Property:

BindingMode BindingBase.Mode

enum BindingMode = {Default, OneWay, TwoWay, OneTime, OneWayToSource}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Priority" type="text">
            <xs:annotation>
              <xs:documentation>Property:

BindingPriority BindingBase.Priority

enum BindingPriority = {LocalValue, StyleTrigger, TemplatedParent, Style, Unset, Animation}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="StringFormat" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string BindingBase.StringFormat</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DefaultAnchor" type="text">
            <xs:annotation>
              <xs:documentation>Property:

WeakReference BindingBase.DefaultAnchor</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NameScope" type="text">
            <xs:annotation>
              <xs:documentation>Property:

WeakReference&amp;lt;INameScope&amp;gt; BindingBase.NameScope</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="CompiledBindingExtension" mixed="true" type="CompiledBindingExtensionType">
    <xs:annotation>
      <xs:documentation>Class: CompiledBindingExtension

Namespace: Avalonia.Markup.Xaml.MarkupExtensions

Base: BindingBase

Properties: Converter, ConverterParameter, DataType, DefaultAnchor, FallbackValue, Mode, NameScope, Path, Priority, Source, StringFormat, TargetNullValue

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="DynamicResourceExtensionType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="ResourceKey" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object DynamicResourceExtension.ResourceKey</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="DynamicResourceExtension" mixed="true" type="DynamicResourceExtensionType">
    <xs:annotation>
      <xs:documentation>Class: DynamicResourceExtension

Namespace: Avalonia.Markup.Xaml.MarkupExtensions

Base: 

Properties: ResourceKey

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ResolveByNameExtensionType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ResolveByNameExtension" mixed="true" type="ResolveByNameExtensionType">
    <xs:annotation>
      <xs:documentation>Class: ResolveByNameExtension

Namespace: Avalonia.Markup.Xaml.MarkupExtensions

Base: 

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ResourceIncludeType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Source" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Uri ResourceInclude.Source</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="OwnerChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler ResourceInclude.OwnerChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ResourceInclude" mixed="true" type="ResourceIncludeType">
    <xs:annotation>
      <xs:documentation>Class: ResourceInclude

Namespace: Avalonia.Markup.Xaml.MarkupExtensions

Base: 

Properties: Source

Events: OwnerChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="StaticResourceExtensionType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="ResourceKey" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object StaticResourceExtension.ResourceKey</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="StaticResourceExtension" mixed="true" type="StaticResourceExtensionType">
    <xs:annotation>
      <xs:documentation>Class: StaticResourceExtension

Namespace: Avalonia.Markup.Xaml.MarkupExtensions

Base: 

Properties: ResourceKey

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="StyleIncludeExtensionType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Source" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Uri StyleIncludeExtension.Source</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="StyleIncludeExtension" mixed="true" type="StyleIncludeExtensionType">
    <xs:annotation>
      <xs:documentation>Class: StyleIncludeExtension

Namespace: Avalonia.Markup.Xaml.MarkupExtensions

Base: 

Properties: Source

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ReflectionBindingExtensionType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Converter" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IValueConverter ReflectionBindingExtension.Converter</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ConverterParameter" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object ReflectionBindingExtension.ConverterParameter</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ElementName" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string ReflectionBindingExtension.ElementName</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FallbackValue" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object ReflectionBindingExtension.FallbackValue</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Mode" type="text">
            <xs:annotation>
              <xs:documentation>Property:

BindingMode ReflectionBindingExtension.Mode

enum BindingMode = {Default, OneWay, TwoWay, OneTime, OneWayToSource}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Path" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string ReflectionBindingExtension.Path</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Priority" type="text">
            <xs:annotation>
              <xs:documentation>Property:

BindingPriority ReflectionBindingExtension.Priority

enum BindingPriority = {LocalValue, StyleTrigger, TemplatedParent, Style, Unset, Animation}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Source" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object ReflectionBindingExtension.Source</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="StringFormat" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string ReflectionBindingExtension.StringFormat</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativeSource" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RelativeSource ReflectionBindingExtension.RelativeSource</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TargetNullValue" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object ReflectionBindingExtension.TargetNullValue</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ReflectionBindingExtension" mixed="true" type="ReflectionBindingExtensionType">
    <xs:annotation>
      <xs:documentation>Class: ReflectionBindingExtension

Namespace: Avalonia.Markup.Xaml.MarkupExtensions

Base: 

Properties: Converter, ConverterParameter, ElementName, FallbackValue, Mode, Path, Priority, RelativeSource, Source, StringFormat, TargetNullValue

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="RelativeSourceExtensionType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Mode" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RelativeSourceMode RelativeSourceExtension.Mode

enum RelativeSourceMode = {DataContext, TemplatedParent, Self, FindAncestor}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AncestorType" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Type RelativeSourceExtension.AncestorType</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Tree" type="text">
            <xs:annotation>
              <xs:documentation>Property:

TreeType RelativeSourceExtension.Tree

enum TreeType = {Visual, Logical}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AncestorLevel" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int RelativeSourceExtension.AncestorLevel</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="RelativeSourceExtension" mixed="true" type="RelativeSourceExtensionType">
    <xs:annotation>
      <xs:documentation>Class: RelativeSourceExtension

Namespace: Avalonia.Markup.Xaml.MarkupExtensions

Base: 

Properties: AncestorLevel, AncestorType, Mode, Tree

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="NthChildSelectorType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="NthChildSelector" mixed="true" type="NthChildSelectorType">
    <xs:annotation>
      <xs:documentation>Class: NthChildSelector

Namespace: Avalonia.Styling

Base: Selector

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="NthLastChildSelectorType" mixed="true">
    <xs:complexContent>
      <xs:extension base="NthChildSelectorType">
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="NthLastChildSelector" mixed="true" type="NthLastChildSelectorType">
    <xs:annotation>
      <xs:documentation>Class: NthLastChildSelector

Namespace: Avalonia.Styling

Base: NthChildSelector, Selector

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="SetterType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Property" type="text">
            <xs:annotation>
              <xs:documentation>Property:

AvaloniaProperty Setter.Property</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Value" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object Setter.Value</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="Setter" mixed="true" type="SetterType">
    <xs:annotation>
      <xs:documentation>Class: Setter

Namespace: Avalonia.Styling

Base: 

Properties: Property, Value

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="StyleType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Resources" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IResourceDictionary Style.Resources</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Selector" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Selector Style.Selector</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="OwnerChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler Style.OwnerChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="Style" mixed="true" type="StyleType">
    <xs:annotation>
      <xs:documentation>Class: Style

Namespace: Avalonia.Styling

Base: AvaloniaObject

Properties: Item, Resources, Selector

Events: OwnerChanged, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="StylerType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="Styler" mixed="true" type="StylerType">
    <xs:annotation>
      <xs:documentation>Class: Styler

Namespace: Avalonia.Styling

Base: 

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="StylesType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Resources" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IResourceDictionary Styles.Resources</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IStyle Styles.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CollectionChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

NotifyCollectionChangedEventHandler Styles.CollectionChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="OwnerChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler Styles.OwnerChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="Styles" mixed="true" type="StylesType">
    <xs:annotation>
      <xs:documentation>Class: Styles

Namespace: Avalonia.Styling

Base: AvaloniaObject

Properties: Item, Resources

Events: CollectionChanged, OwnerChanged, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ChildIndexChangedEventArgsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ChildIndexChangedEventArgs" mixed="true" type="ChildIndexChangedEventArgsType">
    <xs:annotation>
      <xs:documentation>Class: ChildIndexChangedEventArgs

Namespace: Avalonia.LogicalTree

Base: EventArgs

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="LogicalTreeAttachmentEventArgsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="LogicalTreeAttachmentEventArgs" mixed="true" type="LogicalTreeAttachmentEventArgsType">
    <xs:annotation>
      <xs:documentation>Class: LogicalTreeAttachmentEventArgs

Namespace: Avalonia.LogicalTree

Base: EventArgs

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ChildNameScopeType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ChildNameScope" mixed="true" type="ChildNameScopeType">
    <xs:annotation>
      <xs:documentation>Class: ChildNameScope

Namespace: Avalonia.Controls

Base: 

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ClassesType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="ResetBehavior" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ResetBehavior AvaloniaList&amp;lt;string&amp;gt;.ResetBehavior

enum ResetBehavior = {Reset, Remove}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Validate" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Action&amp;lt;string&amp;gt; AvaloniaList&amp;lt;string&amp;gt;.Validate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string AvaloniaList&amp;lt;string&amp;gt;.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Capacity" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int AvaloniaList&amp;lt;string&amp;gt;.Capacity</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CollectionChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

NotifyCollectionChangedEventHandler AvaloniaList&amp;lt;string&amp;gt;.CollectionChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

PropertyChangedEventHandler AvaloniaList&amp;lt;string&amp;gt;.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="Classes" mixed="true" type="ClassesType">
    <xs:annotation>
      <xs:documentation>Class: Classes

Namespace: Avalonia.Controls

Base: AvaloniaList`1

Properties: Capacity, Item, ResetBehavior, Validate

Events: CollectionChanged, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="NameScopeType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="NameScope" mixed="true" type="NameScopeType">
    <xs:annotation>
      <xs:documentation>Class: NameScope

Namespace: Avalonia.Controls

Base: 

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="NameScopeEventArgsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="NameScopeEventArgs" mixed="true" type="NameScopeEventArgsType">
    <xs:annotation>
      <xs:documentation>Class: NameScopeEventArgs

Namespace: Avalonia.Controls

Base: EventArgs

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="NameScopeLocatorType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="NameScopeLocator" mixed="true" type="NameScopeLocatorType">
    <xs:annotation>
      <xs:documentation>Class: NameScopeLocator

Namespace: Avalonia.Controls

Base: 

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ResourceDictionaryType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaDictionary&amp;lt;object, object&amp;gt;.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="OwnerChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler ResourceDictionary.OwnerChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CollectionChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

NotifyCollectionChangedEventHandler AvaloniaDictionary&amp;lt;object, object&amp;gt;.CollectionChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

PropertyChangedEventHandler AvaloniaDictionary&amp;lt;object, object&amp;gt;.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ResourceDictionary" mixed="true" type="ResourceDictionaryType">
    <xs:annotation>
      <xs:documentation>Class: ResourceDictionary

Namespace: Avalonia.Controls

Base: AvaloniaDictionary`2

Properties: Item

Events: CollectionChanged, OwnerChanged, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ResourcesChangedEventArgsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ResourcesChangedEventArgs" mixed="true" type="ResourcesChangedEventArgsType">
    <xs:annotation>
      <xs:documentation>Class: ResourcesChangedEventArgs

Namespace: Avalonia.Controls

Base: EventArgs

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="FluentThemeType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Mode" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FluentThemeMode FluentTheme.Mode

enum FluentThemeMode = {Light, Dark}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DensityStyle" type="text">
            <xs:annotation>
              <xs:documentation>Property:

DensityStyle FluentTheme.DensityStyle

enum DensityStyle = {Normal, Compact}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="OwnerChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler FluentTheme.OwnerChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="FluentTheme" mixed="true" type="FluentThemeType">
    <xs:annotation>
      <xs:documentation>Class: FluentTheme

Namespace: Avalonia.Themes.Fluent

Base: AvaloniaObject

Properties: DensityStyle, Item, Mode

Events: OwnerChanged, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="PointsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="ResetBehavior" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ResetBehavior AvaloniaList&amp;lt;Point&amp;gt;.ResetBehavior

enum ResetBehavior = {Reset, Remove}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Validate" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Action&amp;lt;Point&amp;gt; AvaloniaList&amp;lt;Point&amp;gt;.Validate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Point AvaloniaList&amp;lt;Point&amp;gt;.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Capacity" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int AvaloniaList&amp;lt;Point&amp;gt;.Capacity</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CollectionChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

NotifyCollectionChangedEventHandler AvaloniaList&amp;lt;Point&amp;gt;.CollectionChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

PropertyChangedEventHandler AvaloniaList&amp;lt;Point&amp;gt;.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="Points" mixed="true" type="PointsType">
    <xs:annotation>
      <xs:documentation>Class: Points

Namespace: Avalonia

Base: AvaloniaList`1

Properties: Capacity, Item, ResetBehavior, Validate

Events: CollectionChanged, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="RenderTargetCorruptedExceptionType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="HelpLink" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string Exception.HelpLink</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Source" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string Exception.Source</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="HResult" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int Exception.HResult</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="RenderTargetCorruptedException" mixed="true" type="RenderTargetCorruptedExceptionType">
    <xs:annotation>
      <xs:documentation>Class: RenderTargetCorruptedException

Namespace: Avalonia

Base: Exception

Properties: HelpLink, HResult, Source

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="VisualType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ClipToBounds" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Visual.ClipToBounds</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Clip" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Geometry Visual.Clip</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsVisible" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool Visual.IsVisible</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Opacity" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Visual.Opacity</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="OpacityMask" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush Visual.OpacityMask</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RenderTransform" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ITransform Visual.RenderTransform</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RenderTransformOrigin" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RelativePoint Visual.RenderTransformOrigin</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ZIndex" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int Visual.ZIndex</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Name" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string StyledElement.Name</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Classes" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Classes StyledElement.Classes</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataContext" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object StyledElement.DataContext</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Resources" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IResourceDictionary StyledElement.Resources</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Clock" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IClock Animatable.Clock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Transitions" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Transitions Animatable.Transitions</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AttachedToVisualTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;VisualTreeAttachmentEventArgs&amp;gt; Visual.AttachedToVisualTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DetachedFromVisualTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;VisualTreeAttachmentEventArgs&amp;gt; Visual.DetachedFromVisualTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AttachedToLogicalTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;LogicalTreeAttachmentEventArgs&amp;gt; StyledElement.AttachedToLogicalTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DetachedFromLogicalTree" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;LogicalTreeAttachmentEventArgs&amp;gt; StyledElement.DetachedFromLogicalTree</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataContextChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler StyledElement.DataContextChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Initialized" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler StyledElement.Initialized</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ResourcesChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;ResourcesChangedEventArgs&amp;gt; StyledElement.ResourcesChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="Visual" mixed="true" type="VisualType">
    <xs:annotation>
      <xs:documentation>Class: Visual

Namespace: Avalonia

Base: StyledElement, Animatable, AvaloniaObject

Properties: Classes, Clip, ClipToBounds, Clock, DataContext, IsVisible, Item, Name, Opacity, OpacityMask, RenderTransform, RenderTransformOrigin, Resources, Transitions, ZIndex

Events: AttachedToLogicalTree, AttachedToVisualTree, DataContextChanged, DetachedFromLogicalTree, DetachedFromVisualTree, Initialized, PropertyChanged, ResourcesChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="VisualTreeAttachmentEventArgsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="VisualTreeAttachmentEventArgs" mixed="true" type="VisualTreeAttachmentEventArgsType">
    <xs:annotation>
      <xs:documentation>Class: VisualTreeAttachmentEventArgs

Namespace: Avalonia

Base: EventArgs

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ArcSegmentType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsLargeArc" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool ArcSegment.IsLargeArc</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Point" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Point ArcSegment.Point</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RotationAngle" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double ArcSegment.RotationAngle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Size" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Size ArcSegment.Size</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SweepDirection" type="text">
            <xs:annotation>
              <xs:documentation>Property:

SweepDirection ArcSegment.SweepDirection

enum SweepDirection = {CounterClockwise, Clockwise}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ArcSegment" mixed="true" type="ArcSegmentType">
    <xs:annotation>
      <xs:documentation>Class: ArcSegment

Namespace: Avalonia.Media

Base: PathSegment, AvaloniaObject

Properties: IsLargeArc, Item, Point, RotationAngle, Size, SweepDirection

Events: PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="BezierSegmentType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Point1" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Point BezierSegment.Point1</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Point2" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Point BezierSegment.Point2</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Point3" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Point BezierSegment.Point3</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="BezierSegment" mixed="true" type="BezierSegmentType">
    <xs:annotation>
      <xs:documentation>Class: BezierSegment

Namespace: Avalonia.Media

Base: PathSegment, AvaloniaObject

Properties: Item, Point1, Point2, Point3

Events: PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="BrushConverterType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="BrushConverter" mixed="true" type="BrushConverterType">
    <xs:annotation>
      <xs:documentation>Class: BrushConverter

Namespace: Avalonia.Media

Base: TypeConverter

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ColorsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="Colors" mixed="true" type="ColorsType">
    <xs:annotation>
      <xs:documentation>Class: Colors

Namespace: Avalonia.Media

Base: 

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="CombinedGeometryType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Geometry1" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Geometry CombinedGeometry.Geometry1</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Geometry2" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Geometry CombinedGeometry.Geometry2</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="GeometryCombineMode" type="text">
            <xs:annotation>
              <xs:documentation>Property:

GeometryCombineMode CombinedGeometry.GeometryCombineMode

enum GeometryCombineMode = {Union, Intersect, Xor, Exclude}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Transform" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Transform Geometry.Transform</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Changed" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler Geometry.Changed</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="CombinedGeometry" mixed="true" type="CombinedGeometryType">
    <xs:annotation>
      <xs:documentation>Class: CombinedGeometry

Namespace: Avalonia.Media

Base: Geometry, AvaloniaObject

Properties: Geometry1, Geometry2, GeometryCombineMode, Item, Transform

Events: Changed, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ConicGradientBrushType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Center" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RelativePoint ConicGradientBrush.Center</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Angle" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double ConicGradientBrush.Angle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SpreadMethod" type="text">
            <xs:annotation>
              <xs:documentation>Property:

GradientSpreadMethod GradientBrush.SpreadMethod

enum GradientSpreadMethod = {Pad, Reflect, Repeat}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="GradientStops" type="text">
            <xs:annotation>
              <xs:documentation>Property:

GradientStops GradientBrush.GradientStops</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Opacity" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Brush.Opacity</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Clock" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IClock Animatable.Clock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Transitions" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Transitions Animatable.Transitions</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Invalidated" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler Brush.Invalidated</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ConicGradientBrush" mixed="true" type="ConicGradientBrushType">
    <xs:annotation>
      <xs:documentation>Class: ConicGradientBrush

Namespace: Avalonia.Media

Base: GradientBrush, Brush, Animatable, AvaloniaObject

Properties: Angle, Center, Clock, GradientStops, Item, Opacity, SpreadMethod, Transitions

Events: Invalidated, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="DashStyleType" mixed="true">
    <xs:complexContent>
      <xs:extension base="AnimatableType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Dashes" type="text">
            <xs:annotation>
              <xs:documentation>Property:

AvaloniaList&amp;lt;double&amp;gt; DashStyle.Dashes</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Offset" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double DashStyle.Offset</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Invalidated" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler DashStyle.Invalidated</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="DashStyle" mixed="true" type="DashStyleType">
    <xs:annotation>
      <xs:documentation>Class: DashStyle

Namespace: Avalonia.Media

Base: Animatable, AvaloniaObject

Properties: Clock, Dashes, Item, Offset, Transitions

Events: Invalidated, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="DrawingContextType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="DrawingContext" mixed="true" type="DrawingContextType">
    <xs:annotation>
      <xs:documentation>Class: DrawingContext

Namespace: Avalonia.Media

Base: 

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="DrawingGroupType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Opacity" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double DrawingGroup.Opacity</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Transform" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Transform DrawingGroup.Transform</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ClipGeometry" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Geometry DrawingGroup.ClipGeometry</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="OpacityMask" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush DrawingGroup.OpacityMask</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="DrawingGroup" mixed="true" type="DrawingGroupType">
    <xs:annotation>
      <xs:documentation>Class: DrawingGroup

Namespace: Avalonia.Media

Base: Drawing, AvaloniaObject

Properties: ClipGeometry, Item, Opacity, OpacityMask, Transform

Events: PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="DrawingImageType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Drawing" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Drawing DrawingImage.Drawing</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Invalidated" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler DrawingImage.Invalidated</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="DrawingImage" mixed="true" type="DrawingImageType">
    <xs:annotation>
      <xs:documentation>Class: DrawingImage

Namespace: Avalonia.Media

Base: AvaloniaObject

Properties: Drawing, Item

Events: Invalidated, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="EllipseGeometryType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Rect" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Rect EllipseGeometry.Rect</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RadiusX" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double EllipseGeometry.RadiusX</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RadiusY" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double EllipseGeometry.RadiusY</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Center" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Point EllipseGeometry.Center</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Transform" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Transform Geometry.Transform</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Changed" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler Geometry.Changed</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="EllipseGeometry" mixed="true" type="EllipseGeometryType">
    <xs:annotation>
      <xs:documentation>Class: EllipseGeometry

Namespace: Avalonia.Media

Base: Geometry, AvaloniaObject

Properties: Center, Item, RadiusX, RadiusY, Rect, Transform

Events: Changed, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ExperimentalAcrylicMaterialType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="BackgroundSource" type="text">
            <xs:annotation>
              <xs:documentation>Property:

AcrylicBackgroundSource ExperimentalAcrylicMaterial.BackgroundSource

enum AcrylicBackgroundSource = {None, Digger}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TintColor" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Color ExperimentalAcrylicMaterial.TintColor</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TintOpacity" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double ExperimentalAcrylicMaterial.TintOpacity</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FallbackColor" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Color ExperimentalAcrylicMaterial.FallbackColor</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MaterialOpacity" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double ExperimentalAcrylicMaterial.MaterialOpacity</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PlatformTransparencyCompensationLevel" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double ExperimentalAcrylicMaterial.PlatformTransparencyCompensationLevel</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Invalidated" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler ExperimentalAcrylicMaterial.Invalidated</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ExperimentalAcrylicMaterial" mixed="true" type="ExperimentalAcrylicMaterialType">
    <xs:annotation>
      <xs:documentation>Class: ExperimentalAcrylicMaterial

Namespace: Avalonia.Media

Base: AvaloniaObject

Properties: BackgroundSource, FallbackColor, Item, MaterialOpacity, PlatformTransparencyCompensationLevel, TintColor, TintOpacity

Events: Invalidated, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="FontFallbackType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FontFamily FontFallback.FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="UnicodeRange" type="text">
            <xs:annotation>
              <xs:documentation>Property:

UnicodeRange FontFallback.UnicodeRange</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="FontFallback" mixed="true" type="FontFallbackType">
    <xs:annotation>
      <xs:documentation>Class: FontFallback

Namespace: Avalonia.Media

Base: 

Properties: FontFamily, UnicodeRange

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="FontFamilyType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="FontFamily" mixed="true" type="FontFamilyType">
    <xs:annotation>
      <xs:documentation>Class: FontFamily

Namespace: Avalonia.Media

Base: 

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="FontManagerType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="FontManager" mixed="true" type="FontManagerType">
    <xs:annotation>
      <xs:documentation>Class: FontManager

Namespace: Avalonia.Media

Base: 

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="FontManagerOptionsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DefaultFamilyName" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string FontManagerOptions.DefaultFamilyName</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontFallbacks" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IReadOnlyList&amp;lt;FontFallback&amp;gt; FontManagerOptions.FontFallbacks</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="FontManagerOptions" mixed="true" type="FontManagerOptionsType">
    <xs:annotation>
      <xs:documentation>Class: FontManagerOptions

Namespace: Avalonia.Media

Base: 

Properties: DefaultFamilyName, FontFallbacks

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="FormattedTextType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Constraint" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Size FormattedText.Constraint</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Typeface" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Typeface FormattedText.Typeface</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double FormattedText.FontSize</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Spans" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IReadOnlyList&amp;lt;FormattedTextStyleSpan&amp;gt; FormattedText.Spans</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Text" type="text">
            <xs:annotation>
              <xs:documentation>Property:

string FormattedText.Text</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextAlignment" type="text">
            <xs:annotation>
              <xs:documentation>Property:

TextAlignment FormattedText.TextAlignment

enum TextAlignment = {Left, Center, Right}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextWrapping" type="text">
            <xs:annotation>
              <xs:documentation>Property:

TextWrapping FormattedText.TextWrapping

enum TextWrapping = {NoWrap, Wrap, WrapWithOverflow}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="FormattedText" mixed="true" type="FormattedTextType">
    <xs:annotation>
      <xs:documentation>Class: FormattedText

Namespace: Avalonia.Media

Base: 

Properties: Constraint, FontSize, Spans, Text, TextAlignment, TextWrapping, Typeface

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="FormattedTextLineType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="FormattedTextLine" mixed="true" type="FormattedTextLineType">
    <xs:annotation>
      <xs:documentation>Class: FormattedTextLine

Namespace: Avalonia.Media

Base: 

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="FormattedTextStyleSpanType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="FormattedTextStyleSpan" mixed="true" type="FormattedTextStyleSpanType">
    <xs:annotation>
      <xs:documentation>Class: FormattedTextStyleSpan

Namespace: Avalonia.Media

Base: 

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="GeometryCollectionType" mixed="true">
    <xs:complexContent>
      <xs:extension base="AnimatableType">
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="GeometryCollection" mixed="true" type="GeometryCollectionType">
    <xs:annotation>
      <xs:documentation>Class: GeometryCollection

Namespace: Avalonia.Media

Base: Animatable, AvaloniaObject

Properties: Clock, Item, Transitions

Events: PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="GeometryDrawingType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Geometry" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Geometry GeometryDrawing.Geometry</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Brush" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush GeometryDrawing.Brush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Pen" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IPen GeometryDrawing.Pen</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="GeometryDrawing" mixed="true" type="GeometryDrawingType">
    <xs:annotation>
      <xs:documentation>Class: GeometryDrawing

Namespace: Avalonia.Media

Base: Drawing, AvaloniaObject

Properties: Brush, Geometry, Item, Pen

Events: PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="GeometryGroupType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Children" type="text">
            <xs:annotation>
              <xs:documentation>Property:

GeometryCollection GeometryGroup.Children</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FillRule" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FillRule GeometryGroup.FillRule

enum FillRule = {EvenOdd, NonZero}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Transform" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Transform Geometry.Transform</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Changed" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler Geometry.Changed</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="GeometryGroup" mixed="true" type="GeometryGroupType">
    <xs:annotation>
      <xs:documentation>Class: GeometryGroup

Namespace: Avalonia.Media

Base: Geometry, AvaloniaObject

Properties: Children, FillRule, Item, Transform

Events: Changed, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="GlyphRunType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="GlyphTypeface" type="text">
            <xs:annotation>
              <xs:documentation>Property:

GlyphTypeface GlyphRun.GlyphTypeface</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FontRenderingEmSize" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double GlyphRun.FontRenderingEmSize</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="BaselineOrigin" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Point GlyphRun.BaselineOrigin</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="GlyphIndices" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ReadOnlySlice&amp;lt;ushort&amp;gt; GlyphRun.GlyphIndices</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="GlyphAdvances" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ReadOnlySlice&amp;lt;double&amp;gt; GlyphRun.GlyphAdvances</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="GlyphOffsets" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ReadOnlySlice&amp;lt;Vector&amp;gt; GlyphRun.GlyphOffsets</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Characters" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ReadOnlySlice&amp;lt;char&amp;gt; GlyphRun.Characters</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="GlyphClusters" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ReadOnlySlice&amp;lt;ushort&amp;gt; GlyphRun.GlyphClusters</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="BiDiLevel" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int GlyphRun.BiDiLevel</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="GlyphRun" mixed="true" type="GlyphRunType">
    <xs:annotation>
      <xs:documentation>Class: GlyphRun

Namespace: Avalonia.Media

Base: 

Properties: BaselineOrigin, BiDiLevel, Characters, FontRenderingEmSize, GlyphAdvances, GlyphClusters, GlyphIndices, GlyphOffsets, GlyphTypeface

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="GlyphRunDrawingType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush GlyphRunDrawing.Foreground</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="GlyphRun" type="text">
            <xs:annotation>
              <xs:documentation>Property:

GlyphRun GlyphRunDrawing.GlyphRun</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="GlyphRunDrawing" mixed="true" type="GlyphRunDrawingType">
    <xs:annotation>
      <xs:documentation>Class: GlyphRunDrawing

Namespace: Avalonia.Media

Base: Drawing, AvaloniaObject

Properties: Foreground, GlyphRun, Item

Events: PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="GlyphTypefaceType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="GlyphTypeface" mixed="true" type="GlyphTypefaceType">
    <xs:annotation>
      <xs:documentation>Class: GlyphTypeface

Namespace: Avalonia.Media

Base: 

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="GradientStopType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Offset" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double GradientStop.Offset</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Color" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Color GradientStop.Color</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="GradientStop" mixed="true" type="GradientStopType">
    <xs:annotation>
      <xs:documentation>Class: GradientStop

Namespace: Avalonia.Media

Base: AvaloniaObject

Properties: Color, Item, Offset

Events: PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="GradientStopsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="ResetBehavior" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ResetBehavior AvaloniaList&amp;lt;GradientStop&amp;gt;.ResetBehavior

enum ResetBehavior = {Reset, Remove}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Validate" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Action&amp;lt;GradientStop&amp;gt; AvaloniaList&amp;lt;GradientStop&amp;gt;.Validate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

GradientStop AvaloniaList&amp;lt;GradientStop&amp;gt;.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Capacity" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int AvaloniaList&amp;lt;GradientStop&amp;gt;.Capacity</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CollectionChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

NotifyCollectionChangedEventHandler AvaloniaList&amp;lt;GradientStop&amp;gt;.CollectionChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

PropertyChangedEventHandler AvaloniaList&amp;lt;GradientStop&amp;gt;.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="GradientStops" mixed="true" type="GradientStopsType">
    <xs:annotation>
      <xs:documentation>Class: GradientStops

Namespace: Avalonia.Media

Base: AvaloniaList`1

Properties: Capacity, Item, ResetBehavior, Validate

Events: CollectionChanged, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ImageBrushType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Source" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBitmap ImageBrush.Source</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AlignmentX" type="text">
            <xs:annotation>
              <xs:documentation>Property:

AlignmentX TileBrush.AlignmentX

enum AlignmentX = {Left, Center, Right}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AlignmentY" type="text">
            <xs:annotation>
              <xs:documentation>Property:

AlignmentY TileBrush.AlignmentY

enum AlignmentY = {Top, Center, Bottom}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DestinationRect" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RelativeRect TileBrush.DestinationRect</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SourceRect" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RelativeRect TileBrush.SourceRect</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Stretch" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Stretch TileBrush.Stretch

enum Stretch = {None, Fill, Uniform, UniformToFill}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TileMode" type="text">
            <xs:annotation>
              <xs:documentation>Property:

TileMode TileBrush.TileMode

enum TileMode = {None, FlipX, FlipY, FlipXY, Tile}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="BitmapInterpolationMode" type="text">
            <xs:annotation>
              <xs:documentation>Property:

BitmapInterpolationMode TileBrush.BitmapInterpolationMode

enum BitmapInterpolationMode = {Default, LowQuality, MediumQuality, HighQuality}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Opacity" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Brush.Opacity</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Clock" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IClock Animatable.Clock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Transitions" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Transitions Animatable.Transitions</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Invalidated" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler Brush.Invalidated</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ImageBrush" mixed="true" type="ImageBrushType">
    <xs:annotation>
      <xs:documentation>Class: ImageBrush

Namespace: Avalonia.Media

Base: TileBrush, Brush, Animatable, AvaloniaObject

Properties: AlignmentX, AlignmentY, BitmapInterpolationMode, Clock, DestinationRect, Item, Opacity, Source, SourceRect, Stretch, TileMode, Transitions

Events: Invalidated, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ImageDrawingType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ImageSource" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IImage ImageDrawing.ImageSource</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Rect" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Rect ImageDrawing.Rect</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ImageDrawing" mixed="true" type="ImageDrawingType">
    <xs:annotation>
      <xs:documentation>Class: ImageDrawing

Namespace: Avalonia.Media

Base: Drawing, AvaloniaObject

Properties: ImageSource, Item, Rect

Events: PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="LinearGradientBrushType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="StartPoint" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RelativePoint LinearGradientBrush.StartPoint</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="EndPoint" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RelativePoint LinearGradientBrush.EndPoint</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SpreadMethod" type="text">
            <xs:annotation>
              <xs:documentation>Property:

GradientSpreadMethod GradientBrush.SpreadMethod

enum GradientSpreadMethod = {Pad, Reflect, Repeat}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="GradientStops" type="text">
            <xs:annotation>
              <xs:documentation>Property:

GradientStops GradientBrush.GradientStops</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Opacity" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Brush.Opacity</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Clock" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IClock Animatable.Clock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Transitions" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Transitions Animatable.Transitions</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Invalidated" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler Brush.Invalidated</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="LinearGradientBrush" mixed="true" type="LinearGradientBrushType">
    <xs:annotation>
      <xs:documentation>Class: LinearGradientBrush

Namespace: Avalonia.Media

Base: GradientBrush, Brush, Animatable, AvaloniaObject

Properties: Clock, EndPoint, GradientStops, Item, Opacity, SpreadMethod, StartPoint, Transitions

Events: Invalidated, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="LineGeometryType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="StartPoint" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Point LineGeometry.StartPoint</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="EndPoint" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Point LineGeometry.EndPoint</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Transform" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Transform Geometry.Transform</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Changed" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler Geometry.Changed</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="LineGeometry" mixed="true" type="LineGeometryType">
    <xs:annotation>
      <xs:documentation>Class: LineGeometry

Namespace: Avalonia.Media

Base: Geometry, AvaloniaObject

Properties: EndPoint, Item, StartPoint, Transform

Events: Changed, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="LineSegmentType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Point" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Point LineSegment.Point</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="LineSegment" mixed="true" type="LineSegmentType">
    <xs:annotation>
      <xs:documentation>Class: LineSegment

Namespace: Avalonia.Media

Base: PathSegment, AvaloniaObject

Properties: Item, Point

Events: PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="MatrixTransformType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Matrix" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Matrix MatrixTransform.Matrix</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Clock" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IClock Animatable.Clock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Transitions" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Transitions Animatable.Transitions</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Changed" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler Transform.Changed</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="MatrixTransform" mixed="true" type="MatrixTransformType">
    <xs:annotation>
      <xs:documentation>Class: MatrixTransform

Namespace: Avalonia.Media

Base: Transform, Animatable, AvaloniaObject

Properties: Clock, Item, Matrix, Transitions

Events: Changed, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="PathFigureType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsClosed" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool PathFigure.IsClosed</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsFilled" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool PathFigure.IsFilled</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Segments" type="text">
            <xs:annotation>
              <xs:documentation>Property:

PathSegments PathFigure.Segments</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="StartPoint" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Point PathFigure.StartPoint</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="PathFigure" mixed="true" type="PathFigureType">
    <xs:annotation>
      <xs:documentation>Class: PathFigure

Namespace: Avalonia.Media

Base: AvaloniaObject

Properties: IsClosed, IsFilled, Item, Segments, StartPoint

Events: PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="PathGeometryType" mixed="true">
    <xs:complexContent>
      <xs:extension base="StreamGeometryType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Figures" type="text">
            <xs:annotation>
              <xs:documentation>Property:

PathFigures PathGeometry.Figures</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FillRule" type="text">
            <xs:annotation>
              <xs:documentation>Property:

FillRule PathGeometry.FillRule

enum FillRule = {EvenOdd, NonZero}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="PathGeometry" mixed="true" type="PathGeometryType">
    <xs:annotation>
      <xs:documentation>Class: PathGeometry

Namespace: Avalonia.Media

Base: StreamGeometry, Geometry, AvaloniaObject

Properties: Figures, FillRule, Item, Transform

Events: Changed, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="PathFiguresType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="ResetBehavior" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ResetBehavior AvaloniaList&amp;lt;PathFigure&amp;gt;.ResetBehavior

enum ResetBehavior = {Reset, Remove}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Validate" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Action&amp;lt;PathFigure&amp;gt; AvaloniaList&amp;lt;PathFigure&amp;gt;.Validate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

PathFigure AvaloniaList&amp;lt;PathFigure&amp;gt;.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Capacity" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int AvaloniaList&amp;lt;PathFigure&amp;gt;.Capacity</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CollectionChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

NotifyCollectionChangedEventHandler AvaloniaList&amp;lt;PathFigure&amp;gt;.CollectionChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

PropertyChangedEventHandler AvaloniaList&amp;lt;PathFigure&amp;gt;.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="PathFigures" mixed="true" type="PathFiguresType">
    <xs:annotation>
      <xs:documentation>Class: PathFigures

Namespace: Avalonia.Media

Base: AvaloniaList`1

Properties: Capacity, Item, ResetBehavior, Validate

Events: CollectionChanged, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="PathSegmentsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="ResetBehavior" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ResetBehavior AvaloniaList&amp;lt;PathSegment&amp;gt;.ResetBehavior

enum ResetBehavior = {Reset, Remove}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Validate" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Action&amp;lt;PathSegment&amp;gt; AvaloniaList&amp;lt;PathSegment&amp;gt;.Validate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

PathSegment AvaloniaList&amp;lt;PathSegment&amp;gt;.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Capacity" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int AvaloniaList&amp;lt;PathSegment&amp;gt;.Capacity</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CollectionChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

NotifyCollectionChangedEventHandler AvaloniaList&amp;lt;PathSegment&amp;gt;.CollectionChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

PropertyChangedEventHandler AvaloniaList&amp;lt;PathSegment&amp;gt;.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="PathSegments" mixed="true" type="PathSegmentsType">
    <xs:annotation>
      <xs:documentation>Class: PathSegments

Namespace: Avalonia.Media

Base: AvaloniaList`1

Properties: Capacity, Item, ResetBehavior, Validate

Events: CollectionChanged, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="PathMarkupParserType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="PathMarkupParser" mixed="true" type="PathMarkupParserType">
    <xs:annotation>
      <xs:documentation>Class: PathMarkupParser

Namespace: Avalonia.Media

Base: 

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="PenType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Brush" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush Pen.Brush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Thickness" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Pen.Thickness</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DashStyle" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IDashStyle Pen.DashStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="LineCap" type="text">
            <xs:annotation>
              <xs:documentation>Property:

PenLineCap Pen.LineCap

enum PenLineCap = {Flat, Round, Square}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="LineJoin" type="text">
            <xs:annotation>
              <xs:documentation>Property:

PenLineJoin Pen.LineJoin

enum PenLineJoin = {Bevel, Miter, Round}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="MiterLimit" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Pen.MiterLimit</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Invalidated" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler Pen.Invalidated</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="Pen" mixed="true" type="PenType">
    <xs:annotation>
      <xs:documentation>Class: Pen

Namespace: Avalonia.Media

Base: AvaloniaObject

Properties: Brush, DashStyle, Item, LineCap, LineJoin, MiterLimit, Thickness

Events: Invalidated, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="PolylineGeometryType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Points" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Points PolylineGeometry.Points</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsFilled" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool PolylineGeometry.IsFilled</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Transform" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Transform Geometry.Transform</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Changed" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler Geometry.Changed</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="PolylineGeometry" mixed="true" type="PolylineGeometryType">
    <xs:annotation>
      <xs:documentation>Class: PolylineGeometry

Namespace: Avalonia.Media

Base: Geometry, AvaloniaObject

Properties: IsFilled, Item, Points, Transform

Events: Changed, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="PolyLineSegmentType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Points" type="text">
            <xs:annotation>
              <xs:documentation>Property:

AvaloniaList&amp;lt;Point&amp;gt; PolyLineSegment.Points</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="PolyLineSegment" mixed="true" type="PolyLineSegmentType">
    <xs:annotation>
      <xs:documentation>Class: PolyLineSegment

Namespace: Avalonia.Media

Base: PathSegment, AvaloniaObject

Properties: Item, Points

Events: PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="QuadraticBezierSegmentType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Point1" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Point QuadraticBezierSegment.Point1</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Point2" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Point QuadraticBezierSegment.Point2</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="QuadraticBezierSegment" mixed="true" type="QuadraticBezierSegmentType">
    <xs:annotation>
      <xs:documentation>Class: QuadraticBezierSegment

Namespace: Avalonia.Media

Base: PathSegment, AvaloniaObject

Properties: Item, Point1, Point2

Events: PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="RadialGradientBrushType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Center" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RelativePoint RadialGradientBrush.Center</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="GradientOrigin" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RelativePoint RadialGradientBrush.GradientOrigin</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Radius" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double RadialGradientBrush.Radius</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SpreadMethod" type="text">
            <xs:annotation>
              <xs:documentation>Property:

GradientSpreadMethod GradientBrush.SpreadMethod

enum GradientSpreadMethod = {Pad, Reflect, Repeat}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="GradientStops" type="text">
            <xs:annotation>
              <xs:documentation>Property:

GradientStops GradientBrush.GradientStops</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Opacity" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Brush.Opacity</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Clock" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IClock Animatable.Clock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Transitions" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Transitions Animatable.Transitions</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Invalidated" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler Brush.Invalidated</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="RadialGradientBrush" mixed="true" type="RadialGradientBrushType">
    <xs:annotation>
      <xs:documentation>Class: RadialGradientBrush

Namespace: Avalonia.Media

Base: GradientBrush, Brush, Animatable, AvaloniaObject

Properties: Center, Clock, GradientOrigin, GradientStops, Item, Opacity, Radius, SpreadMethod, Transitions

Events: Invalidated, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="RectangleGeometryType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Rect" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Rect RectangleGeometry.Rect</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Transform" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Transform Geometry.Transform</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Changed" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler Geometry.Changed</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="RectangleGeometry" mixed="true" type="RectangleGeometryType">
    <xs:annotation>
      <xs:documentation>Class: RectangleGeometry

Namespace: Avalonia.Media

Base: Geometry, AvaloniaObject

Properties: Item, Rect, Transform

Events: Changed, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="RenderOptionsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="RenderOptions" mixed="true" type="RenderOptionsType">
    <xs:annotation>
      <xs:documentation>Class: RenderOptions

Namespace: Avalonia.Media

Base: 

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="RotateTransformType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Angle" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double RotateTransform.Angle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CenterX" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double RotateTransform.CenterX</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CenterY" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double RotateTransform.CenterY</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Clock" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IClock Animatable.Clock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Transitions" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Transitions Animatable.Transitions</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Changed" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler Transform.Changed</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="RotateTransform" mixed="true" type="RotateTransformType">
    <xs:annotation>
      <xs:documentation>Class: RotateTransform

Namespace: Avalonia.Media

Base: Transform, Animatable, AvaloniaObject

Properties: Angle, CenterX, CenterY, Clock, Item, Transitions

Events: Changed, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ScaleTransformType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScaleX" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double ScaleTransform.ScaleX</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScaleY" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double ScaleTransform.ScaleY</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Clock" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IClock Animatable.Clock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Transitions" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Transitions Animatable.Transitions</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Changed" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler Transform.Changed</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ScaleTransform" mixed="true" type="ScaleTransformType">
    <xs:annotation>
      <xs:documentation>Class: ScaleTransform

Namespace: Avalonia.Media

Base: Transform, Animatable, AvaloniaObject

Properties: Clock, Item, ScaleX, ScaleY, Transitions

Events: Changed, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="SkewTransformType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AngleX" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double SkewTransform.AngleX</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AngleY" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double SkewTransform.AngleY</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Clock" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IClock Animatable.Clock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Transitions" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Transitions Animatable.Transitions</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Changed" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler Transform.Changed</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="SkewTransform" mixed="true" type="SkewTransformType">
    <xs:annotation>
      <xs:documentation>Class: SkewTransform

Namespace: Avalonia.Media

Base: Transform, Animatable, AvaloniaObject

Properties: AngleX, AngleY, Clock, Item, Transitions

Events: Changed, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="SolidColorBrushType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Color" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Color SolidColorBrush.Color</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Opacity" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Brush.Opacity</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Clock" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IClock Animatable.Clock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Transitions" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Transitions Animatable.Transitions</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Invalidated" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler Brush.Invalidated</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="SolidColorBrush" mixed="true" type="SolidColorBrushType">
    <xs:annotation>
      <xs:documentation>Class: SolidColorBrush

Namespace: Avalonia.Media

Base: Brush, Animatable, AvaloniaObject

Properties: Clock, Color, Item, Opacity, Transitions

Events: Invalidated, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="StreamGeometryType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Transform" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Transform Geometry.Transform</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Changed" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler Geometry.Changed</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="StreamGeometry" mixed="true" type="StreamGeometryType">
    <xs:annotation>
      <xs:documentation>Class: StreamGeometry

Namespace: Avalonia.Media

Base: Geometry, AvaloniaObject

Properties: Item, Transform

Events: Changed, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="StreamGeometryContextType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="StreamGeometryContext" mixed="true" type="StreamGeometryContextType">
    <xs:annotation>
      <xs:documentation>Class: StreamGeometryContext

Namespace: Avalonia.Media

Base: 

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="TextDecorationType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Location" type="text">
            <xs:annotation>
              <xs:documentation>Property:

TextDecorationLocation TextDecoration.Location

enum TextDecorationLocation = {Underline, Overline, Strikethrough, Baseline}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Stroke" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IBrush TextDecoration.Stroke</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="StrokeThicknessUnit" type="text">
            <xs:annotation>
              <xs:documentation>Property:

TextDecorationUnit TextDecoration.StrokeThicknessUnit

enum TextDecorationUnit = {FontRecommended, FontRenderingEmSize, Pixel}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="StrokeDashArray" type="text">
            <xs:annotation>
              <xs:documentation>Property:

AvaloniaList&amp;lt;double&amp;gt; TextDecoration.StrokeDashArray</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="StrokeDashOffset" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double TextDecoration.StrokeDashOffset</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="StrokeThickness" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double TextDecoration.StrokeThickness</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="StrokeLineCap" type="text">
            <xs:annotation>
              <xs:documentation>Property:

PenLineCap TextDecoration.StrokeLineCap

enum PenLineCap = {Flat, Round, Square}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="StrokeOffset" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double TextDecoration.StrokeOffset</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="StrokeOffsetUnit" type="text">
            <xs:annotation>
              <xs:documentation>Property:

TextDecorationUnit TextDecoration.StrokeOffsetUnit

enum TextDecorationUnit = {FontRecommended, FontRenderingEmSize, Pixel}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="TextDecoration" mixed="true" type="TextDecorationType">
    <xs:annotation>
      <xs:documentation>Class: TextDecoration

Namespace: Avalonia.Media

Base: AvaloniaObject

Properties: Item, Location, Stroke, StrokeDashArray, StrokeDashOffset, StrokeLineCap, StrokeOffset, StrokeOffsetUnit, StrokeThickness, StrokeThicknessUnit

Events: PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="TextDecorationCollectionType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="ResetBehavior" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ResetBehavior AvaloniaList&amp;lt;TextDecoration&amp;gt;.ResetBehavior

enum ResetBehavior = {Reset, Remove}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Validate" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Action&amp;lt;TextDecoration&amp;gt; AvaloniaList&amp;lt;TextDecoration&amp;gt;.Validate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

TextDecoration AvaloniaList&amp;lt;TextDecoration&amp;gt;.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Capacity" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int AvaloniaList&amp;lt;TextDecoration&amp;gt;.Capacity</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CollectionChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

NotifyCollectionChangedEventHandler AvaloniaList&amp;lt;TextDecoration&amp;gt;.CollectionChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

PropertyChangedEventHandler AvaloniaList&amp;lt;TextDecoration&amp;gt;.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="TextDecorationCollection" mixed="true" type="TextDecorationCollectionType">
    <xs:annotation>
      <xs:documentation>Class: TextDecorationCollection

Namespace: Avalonia.Media

Base: AvaloniaList`1

Properties: Capacity, Item, ResetBehavior, Validate

Events: CollectionChanged, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="TextHitTestResultType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="IsInside" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool TextHitTestResult.IsInside</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextPosition" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int TextHitTestResult.TextPosition</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="IsTrailing" type="text">
            <xs:annotation>
              <xs:documentation>Property:

bool TextHitTestResult.IsTrailing</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="TextHitTestResult" mixed="true" type="TextHitTestResultType">
    <xs:annotation>
      <xs:documentation>Class: TextHitTestResult

Namespace: Avalonia.Media

Base: 

Properties: IsInside, IsTrailing, TextPosition

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="TransformConverterType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="TransformConverter" mixed="true" type="TransformConverterType">
    <xs:annotation>
      <xs:documentation>Class: TransformConverter

Namespace: Avalonia.Media

Base: TypeConverter

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="TransformGroupType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Children" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Transforms TransformGroup.Children</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Clock" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IClock Animatable.Clock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Transitions" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Transitions Animatable.Transitions</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Changed" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler Transform.Changed</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="TransformGroup" mixed="true" type="TransformGroupType">
    <xs:annotation>
      <xs:documentation>Class: TransformGroup

Namespace: Avalonia.Media

Base: Transform, Animatable, AvaloniaObject

Properties: Children, Clock, Item, Transitions

Events: Changed, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="TransformsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="ResetBehavior" type="text">
            <xs:annotation>
              <xs:documentation>Property:

ResetBehavior AvaloniaList&amp;lt;Transform&amp;gt;.ResetBehavior

enum ResetBehavior = {Reset, Remove}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Validate" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Action&amp;lt;Transform&amp;gt; AvaloniaList&amp;lt;Transform&amp;gt;.Validate</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Transform AvaloniaList&amp;lt;Transform&amp;gt;.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Capacity" type="text">
            <xs:annotation>
              <xs:documentation>Property:

int AvaloniaList&amp;lt;Transform&amp;gt;.Capacity</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="CollectionChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

NotifyCollectionChangedEventHandler AvaloniaList&amp;lt;Transform&amp;gt;.CollectionChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

PropertyChangedEventHandler AvaloniaList&amp;lt;Transform&amp;gt;.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="Transforms" mixed="true" type="TransformsType">
    <xs:annotation>
      <xs:documentation>Class: Transforms

Namespace: Avalonia.Media

Base: AvaloniaList`1

Properties: Capacity, Item, ResetBehavior, Validate

Events: CollectionChanged, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="TranslateTransformType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="X" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double TranslateTransform.X</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Y" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double TranslateTransform.Y</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Clock" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IClock Animatable.Clock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Transitions" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Transitions Animatable.Transitions</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Changed" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler Transform.Changed</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="TranslateTransform" mixed="true" type="TranslateTransformType">
    <xs:annotation>
      <xs:documentation>Class: TranslateTransform

Namespace: Avalonia.Media

Base: Transform, Animatable, AvaloniaObject

Properties: Clock, Item, Transitions, X, Y

Events: Changed, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="VisualBrushType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Visual" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IVisual VisualBrush.Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AlignmentX" type="text">
            <xs:annotation>
              <xs:documentation>Property:

AlignmentX TileBrush.AlignmentX

enum AlignmentX = {Left, Center, Right}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AlignmentY" type="text">
            <xs:annotation>
              <xs:documentation>Property:

AlignmentY TileBrush.AlignmentY

enum AlignmentY = {Top, Center, Bottom}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DestinationRect" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RelativeRect TileBrush.DestinationRect</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SourceRect" type="text">
            <xs:annotation>
              <xs:documentation>Property:

RelativeRect TileBrush.SourceRect</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Stretch" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Stretch TileBrush.Stretch

enum Stretch = {None, Fill, Uniform, UniformToFill}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TileMode" type="text">
            <xs:annotation>
              <xs:documentation>Property:

TileMode TileBrush.TileMode

enum TileMode = {None, FlipX, FlipY, FlipXY, Tile}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="BitmapInterpolationMode" type="text">
            <xs:annotation>
              <xs:documentation>Property:

BitmapInterpolationMode TileBrush.BitmapInterpolationMode

enum BitmapInterpolationMode = {Default, LowQuality, MediumQuality, HighQuality}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Opacity" type="text">
            <xs:annotation>
              <xs:documentation>Property:

double Brush.Opacity</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Clock" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IClock Animatable.Clock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Transitions" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Transitions Animatable.Transitions</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Invalidated" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler Brush.Invalidated</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="VisualBrush" mixed="true" type="VisualBrushType">
    <xs:annotation>
      <xs:documentation>Class: VisualBrush

Namespace: Avalonia.Media

Base: TileBrush, Brush, Animatable, AvaloniaObject

Properties: AlignmentX, AlignmentY, BitmapInterpolationMode, Clock, DestinationRect, Item, Opacity, SourceRect, Stretch, TileMode, Transitions, Visual

Events: Invalidated, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="TransformOperationsType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="TransformOperations" mixed="true" type="TransformOperationsType">
    <xs:annotation>
      <xs:documentation>Class: TransformOperations

Namespace: Avalonia.Media.Transformation

Base: 

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="BitmapType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="Bitmap" mixed="true" type="BitmapType">
    <xs:annotation>
      <xs:documentation>Class: Bitmap

Namespace: Avalonia.Media.Imaging

Base: 

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="CroppedBitmapType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Source" type="text">
            <xs:annotation>
              <xs:documentation>Property:

IImage CroppedBitmap.Source</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SourceRect" type="text">
            <xs:annotation>
              <xs:documentation>Property:

PixelRect CroppedBitmap.SourceRect</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Invalidated" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler CroppedBitmap.Invalidated</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="CroppedBitmap" mixed="true" type="CroppedBitmapType">
    <xs:annotation>
      <xs:documentation>Class: CroppedBitmap

Namespace: Avalonia.Media.Imaging

Base: AvaloniaObject

Properties: Item, Source, SourceRect

Events: Invalidated, PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="RenderTargetBitmapType" mixed="true">
    <xs:complexContent>
      <xs:extension base="BitmapType">
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="RenderTargetBitmap" mixed="true" type="RenderTargetBitmapType">
    <xs:annotation>
      <xs:documentation>Class: RenderTargetBitmap

Namespace: Avalonia.Media.Imaging

Base: Bitmap

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="WriteableBitmapType" mixed="true">
    <xs:complexContent>
      <xs:extension base="BitmapType">
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="WriteableBitmap" mixed="true" type="WriteableBitmapType">
    <xs:annotation>
      <xs:documentation>Class: WriteableBitmap

Namespace: Avalonia.Media.Imaging

Base: Bitmap

Properties: {none}

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="CompositePageTransitionType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="PageTransitions" type="text">
            <xs:annotation>
              <xs:documentation>Property:

List&amp;lt;IPageTransition&amp;gt; CompositePageTransition.PageTransitions</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="CompositePageTransition" mixed="true" type="CompositePageTransitionType">
    <xs:annotation>
      <xs:documentation>Class: CompositePageTransition

Namespace: Avalonia.Animation

Base: 

Properties: PageTransitions

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="CrossFadeType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Duration" type="text">
            <xs:annotation>
              <xs:documentation>Property:

TimeSpan CrossFade.Duration</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FadeInEasing" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Easing CrossFade.FadeInEasing</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="FadeOutEasing" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Easing CrossFade.FadeOutEasing</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="CrossFade" mixed="true" type="CrossFadeType">
    <xs:annotation>
      <xs:documentation>Class: CrossFade

Namespace: Avalonia.Animation

Base: 

Properties: Duration, FadeInEasing, FadeOutEasing

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="PageSlideType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="Duration" type="text">
            <xs:annotation>
              <xs:documentation>Property:

TimeSpan PageSlide.Duration</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Orientation" type="text">
            <xs:annotation>
              <xs:documentation>Property:

SlideAxis PageSlide.Orientation

enum SlideAxis = {Horizontal, Vertical}</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SlideInEasing" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Easing PageSlide.SlideInEasing</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="SlideOutEasing" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Easing PageSlide.SlideOutEasing</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="PageSlide" mixed="true" type="PageSlideType">
    <xs:annotation>
      <xs:documentation>Class: PageSlide

Namespace: Avalonia.Animation

Base: 

Properties: Duration, Orientation, SlideInEasing, SlideOutEasing

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="RenderLoopClockType" mixed="true">
    <xs:complexContent>
      <xs:extension base="ClockBaseType">
        <xs:choice minOccurs="0" maxOccurs="unbounded" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="RenderLoopClock" mixed="true" type="RenderLoopClockType">
    <xs:annotation>
      <xs:documentation>Class: RenderLoopClock

Namespace: Avalonia.Animation

Base: ClockBase

Properties: PlayState

Events: {none}</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="BoxShadowsTransitionType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Duration" type="text">
            <xs:annotation>
              <xs:documentation>Property:

TimeSpan Transition&amp;lt;BoxShadows&amp;gt;.Duration</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Delay" type="text">
            <xs:annotation>
              <xs:documentation>Property:

TimeSpan Transition&amp;lt;BoxShadows&amp;gt;.Delay</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Easing" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Easing Transition&amp;lt;BoxShadows&amp;gt;.Easing</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Property" type="text">
            <xs:annotation>
              <xs:documentation>Property:

AvaloniaProperty Transition&amp;lt;BoxShadows&amp;gt;.Property</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="BoxShadowsTransition" mixed="true" type="BoxShadowsTransitionType">
    <xs:annotation>
      <xs:documentation>Class: BoxShadowsTransition

Namespace: Avalonia.Animation

Base: AnimatorDrivenTransition`2, Transition`1, AvaloniaObject

Properties: Delay, Duration, Easing, Item, Property

Events: PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="BrushTransitionType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Duration" type="text">
            <xs:annotation>
              <xs:documentation>Property:

TimeSpan Transition&amp;lt;IBrush&amp;gt;.Duration</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Delay" type="text">
            <xs:annotation>
              <xs:documentation>Property:

TimeSpan Transition&amp;lt;IBrush&amp;gt;.Delay</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Easing" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Easing Transition&amp;lt;IBrush&amp;gt;.Easing</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Property" type="text">
            <xs:annotation>
              <xs:documentation>Property:

AvaloniaProperty Transition&amp;lt;IBrush&amp;gt;.Property</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="BrushTransition" mixed="true" type="BrushTransitionType">
    <xs:annotation>
      <xs:documentation>Class: BrushTransition

Namespace: Avalonia.Animation

Base: Transition`1, AvaloniaObject

Properties: Delay, Duration, Easing, Item, Property

Events: PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ColorTransitionType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Duration" type="text">
            <xs:annotation>
              <xs:documentation>Property:

TimeSpan Transition&amp;lt;Color&amp;gt;.Duration</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Delay" type="text">
            <xs:annotation>
              <xs:documentation>Property:

TimeSpan Transition&amp;lt;Color&amp;gt;.Delay</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Easing" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Easing Transition&amp;lt;Color&amp;gt;.Easing</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Property" type="text">
            <xs:annotation>
              <xs:documentation>Property:

AvaloniaProperty Transition&amp;lt;Color&amp;gt;.Property</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ColorTransition" mixed="true" type="ColorTransitionType">
    <xs:annotation>
      <xs:documentation>Class: ColorTransition

Namespace: Avalonia.Animation

Base: AnimatorDrivenTransition`2, Transition`1, AvaloniaObject

Properties: Delay, Duration, Easing, Item, Property

Events: PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="CornerRadiusTransitionType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Duration" type="text">
            <xs:annotation>
              <xs:documentation>Property:

TimeSpan Transition&amp;lt;CornerRadius&amp;gt;.Duration</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Delay" type="text">
            <xs:annotation>
              <xs:documentation>Property:

TimeSpan Transition&amp;lt;CornerRadius&amp;gt;.Delay</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Easing" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Easing Transition&amp;lt;CornerRadius&amp;gt;.Easing</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Property" type="text">
            <xs:annotation>
              <xs:documentation>Property:

AvaloniaProperty Transition&amp;lt;CornerRadius&amp;gt;.Property</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="CornerRadiusTransition" mixed="true" type="CornerRadiusTransitionType">
    <xs:annotation>
      <xs:documentation>Class: CornerRadiusTransition

Namespace: Avalonia.Animation

Base: AnimatorDrivenTransition`2, Transition`1, AvaloniaObject

Properties: Delay, Duration, Easing, Item, Property

Events: PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="PointTransitionType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Duration" type="text">
            <xs:annotation>
              <xs:documentation>Property:

TimeSpan Transition&amp;lt;Point&amp;gt;.Duration</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Delay" type="text">
            <xs:annotation>
              <xs:documentation>Property:

TimeSpan Transition&amp;lt;Point&amp;gt;.Delay</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Easing" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Easing Transition&amp;lt;Point&amp;gt;.Easing</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Property" type="text">
            <xs:annotation>
              <xs:documentation>Property:

AvaloniaProperty Transition&amp;lt;Point&amp;gt;.Property</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="PointTransition" mixed="true" type="PointTransitionType">
    <xs:annotation>
      <xs:documentation>Class: PointTransition

Namespace: Avalonia.Animation

Base: AnimatorDrivenTransition`2, Transition`1, AvaloniaObject

Properties: Delay, Duration, Easing, Item, Property

Events: PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="RelativePointTransitionType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Duration" type="text">
            <xs:annotation>
              <xs:documentation>Property:

TimeSpan Transition&amp;lt;RelativePoint&amp;gt;.Duration</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Delay" type="text">
            <xs:annotation>
              <xs:documentation>Property:

TimeSpan Transition&amp;lt;RelativePoint&amp;gt;.Delay</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Easing" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Easing Transition&amp;lt;RelativePoint&amp;gt;.Easing</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Property" type="text">
            <xs:annotation>
              <xs:documentation>Property:

AvaloniaProperty Transition&amp;lt;RelativePoint&amp;gt;.Property</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="RelativePointTransition" mixed="true" type="RelativePointTransitionType">
    <xs:annotation>
      <xs:documentation>Class: RelativePointTransition

Namespace: Avalonia.Animation

Base: AnimatorDrivenTransition`2, Transition`1, AvaloniaObject

Properties: Delay, Duration, Easing, Item, Property

Events: PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="SizeTransitionType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Duration" type="text">
            <xs:annotation>
              <xs:documentation>Property:

TimeSpan Transition&amp;lt;Size&amp;gt;.Duration</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Delay" type="text">
            <xs:annotation>
              <xs:documentation>Property:

TimeSpan Transition&amp;lt;Size&amp;gt;.Delay</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Easing" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Easing Transition&amp;lt;Size&amp;gt;.Easing</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Property" type="text">
            <xs:annotation>
              <xs:documentation>Property:

AvaloniaProperty Transition&amp;lt;Size&amp;gt;.Property</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="SizeTransition" mixed="true" type="SizeTransitionType">
    <xs:annotation>
      <xs:documentation>Class: SizeTransition

Namespace: Avalonia.Animation

Base: AnimatorDrivenTransition`2, Transition`1, AvaloniaObject

Properties: Delay, Duration, Easing, Item, Property

Events: PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ThicknessTransitionType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Duration" type="text">
            <xs:annotation>
              <xs:documentation>Property:

TimeSpan Transition&amp;lt;Thickness&amp;gt;.Duration</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Delay" type="text">
            <xs:annotation>
              <xs:documentation>Property:

TimeSpan Transition&amp;lt;Thickness&amp;gt;.Delay</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Easing" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Easing Transition&amp;lt;Thickness&amp;gt;.Easing</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Property" type="text">
            <xs:annotation>
              <xs:documentation>Property:

AvaloniaProperty Transition&amp;lt;Thickness&amp;gt;.Property</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="ThicknessTransition" mixed="true" type="ThicknessTransitionType">
    <xs:annotation>
      <xs:documentation>Class: ThicknessTransition

Namespace: Avalonia.Animation

Base: AnimatorDrivenTransition`2, Transition`1, AvaloniaObject

Properties: Delay, Duration, Easing, Item, Property

Events: PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="TransformOperationsTransitionType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Duration" type="text">
            <xs:annotation>
              <xs:documentation>Property:

TimeSpan Transition&amp;lt;ITransform&amp;gt;.Duration</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Delay" type="text">
            <xs:annotation>
              <xs:documentation>Property:

TimeSpan Transition&amp;lt;ITransform&amp;gt;.Delay</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Easing" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Easing Transition&amp;lt;ITransform&amp;gt;.Easing</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Property" type="text">
            <xs:annotation>
              <xs:documentation>Property:

AvaloniaProperty Transition&amp;lt;ITransform&amp;gt;.Property</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="TransformOperationsTransition" mixed="true" type="TransformOperationsTransitionType">
    <xs:annotation>
      <xs:documentation>Class: TransformOperationsTransition

Namespace: Avalonia.Animation

Base: Transition`1, AvaloniaObject

Properties: Delay, Duration, Easing, Item, Property

Events: PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="VectorTransitionType" mixed="true">
    <xs:complexContent>
      <xs:extension>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:attribute name="DataGridTextColumn.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataGridTextColumn.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Left" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Top" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Right" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Canvas.Bottom" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.Errors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IEnumerable&amp;lt;object&amp;gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DataValidationErrors.HasErrors" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="DockPanel.Dock" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Dock</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Column" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.Row" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.ColumnSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.RowSpan" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Grid.IsSharedSizeScope" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.IsNativeMenuExported" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenu.Menu" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: NativeMenu</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NativeMenuBar.EnableMenuItemClickForwarding" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Above" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignBottomWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignHorizontalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignLeftWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignRightWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignTopWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWithPanel" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.AlignVerticalCenterWith" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.Below" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.LeftOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="RelativePanel.RightOf" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.HorizontalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ScrollViewer.VerticalScrollBarVisibility" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: ScrollBarVisibility</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontFamily" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontFamily</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontSize" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontStyle" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontStyle</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.FontWeight" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: FontWeight</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TextBlock.Foreground" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: IBrush</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Tip" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: object</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.IsOpen" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.Placement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: PlacementMode</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.HorizontalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.VerticalOffset" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: double</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ToolTip.ShowDelay" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: int</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TrayIcon.Icons" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: TrayIcons</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="NotificationCard.CloseOnClick" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AccessText.ShowAccessKey" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.AdornedElement" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: Visual</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="AdornerLayer.IsClipEnabled" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="TemplatedControl.IsTemplateFocusTarget" type="text">
            <xs:annotation>
              <xs:documentation>Attached property type: bool</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Duration" type="text">
            <xs:annotation>
              <xs:documentation>Property:

TimeSpan Transition&amp;lt;Vector&amp;gt;.Duration</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Delay" type="text">
            <xs:annotation>
              <xs:documentation>Property:

TimeSpan Transition&amp;lt;Vector&amp;gt;.Delay</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Easing" type="text">
            <xs:annotation>
              <xs:documentation>Property:

Easing Transition&amp;lt;Vector&amp;gt;.Easing</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Property" type="text">
            <xs:annotation>
              <xs:documentation>Property:

AvaloniaProperty Transition&amp;lt;Vector&amp;gt;.Property</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="Item" type="text">
            <xs:annotation>
              <xs:documentation>Property:

object AvaloniaObject.Item</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="PropertyChanged" type="text">
            <xs:annotation>
              <xs:documentation>Event:

EventHandler&amp;lt;AvaloniaPropertyChangedEventArgs&amp;gt; AvaloniaObject.PropertyChanged</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element name="VectorTransition" mixed="true" type="VectorTransitionType">
    <xs:annotation>
      <xs:documentation>Class: VectorTransition

Namespace: Avalonia.Animation

Base: AnimatorDrivenTransition`2, Transition`1, AvaloniaObject

Properties: Delay, Duration, Easing, Item, Property

Events: PropertyChanged</xs:documentation>
    </xs:annotation>
  </xs:element>
</xs:schema>